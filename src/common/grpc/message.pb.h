// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[48]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace FLINT_RPC_MESSAGE {
class BottleneckReportRequest;
struct BottleneckReportRequestDefaultTypeInternal;
extern BottleneckReportRequestDefaultTypeInternal _BottleneckReportRequest_default_instance_;
class BottleneckReportResponse;
struct BottleneckReportResponseDefaultTypeInternal;
extern BottleneckReportResponseDefaultTypeInternal _BottleneckReportResponse_default_instance_;
class CreateVolumeRequest;
struct CreateVolumeRequestDefaultTypeInternal;
extern CreateVolumeRequestDefaultTypeInternal _CreateVolumeRequest_default_instance_;
class CreateVolumeRequest_SsdPreferenceEntry_DoNotUse;
struct CreateVolumeRequest_SsdPreferenceEntry_DoNotUseDefaultTypeInternal;
extern CreateVolumeRequest_SsdPreferenceEntry_DoNotUseDefaultTypeInternal _CreateVolumeRequest_SsdPreferenceEntry_DoNotUse_default_instance_;
class CreateVolumeResponse;
struct CreateVolumeResponseDefaultTypeInternal;
extern CreateVolumeResponseDefaultTypeInternal _CreateVolumeResponse_default_instance_;
class DeleteVolumeRequest;
struct DeleteVolumeRequestDefaultTypeInternal;
extern DeleteVolumeRequestDefaultTypeInternal _DeleteVolumeRequest_default_instance_;
class DeleteVolumeResponse;
struct DeleteVolumeResponseDefaultTypeInternal;
extern DeleteVolumeResponseDefaultTypeInternal _DeleteVolumeResponse_default_instance_;
class EventCallback;
struct EventCallbackDefaultTypeInternal;
extern EventCallbackDefaultTypeInternal _EventCallback_default_instance_;
class ExtentLocator;
struct ExtentLocatorDefaultTypeInternal;
extern ExtentLocatorDefaultTypeInternal _ExtentLocator_default_instance_;
class ExtentLocators;
struct ExtentLocatorsDefaultTypeInternal;
extern ExtentLocatorsDefaultTypeInternal _ExtentLocators_default_instance_;
class FlintMetadata;
struct FlintMetadataDefaultTypeInternal;
extern FlintMetadataDefaultTypeInternal _FlintMetadata_default_instance_;
class FlintMetadata_SsdIdMapEntry_DoNotUse;
struct FlintMetadata_SsdIdMapEntry_DoNotUseDefaultTypeInternal;
extern FlintMetadata_SsdIdMapEntry_DoNotUseDefaultTypeInternal _FlintMetadata_SsdIdMapEntry_DoNotUse_default_instance_;
class GetFlintMetadataRequest;
struct GetFlintMetadataRequestDefaultTypeInternal;
extern GetFlintMetadataRequestDefaultTypeInternal _GetFlintMetadataRequest_default_instance_;
class GetFlintMetadataResponse;
struct GetFlintMetadataResponseDefaultTypeInternal;
extern GetFlintMetadataResponseDefaultTypeInternal _GetFlintMetadataResponse_default_instance_;
class IOCompletion;
struct IOCompletionDefaultTypeInternal;
extern IOCompletionDefaultTypeInternal _IOCompletion_default_instance_;
class ListVolumeRequest;
struct ListVolumeRequestDefaultTypeInternal;
extern ListVolumeRequestDefaultTypeInternal _ListVolumeRequest_default_instance_;
class ListVolumeResponse;
struct ListVolumeResponseDefaultTypeInternal;
extern ListVolumeResponseDefaultTypeInternal _ListVolumeResponse_default_instance_;
class OpenVolumeRequest;
struct OpenVolumeRequestDefaultTypeInternal;
extern OpenVolumeRequestDefaultTypeInternal _OpenVolumeRequest_default_instance_;
class OpenVolumeResponse;
struct OpenVolumeResponseDefaultTypeInternal;
extern OpenVolumeResponseDefaultTypeInternal _OpenVolumeResponse_default_instance_;
class OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse;
struct OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUseDefaultTypeInternal;
extern OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUseDefaultTypeInternal _OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse_default_instance_;
class PartialView;
struct PartialViewDefaultTypeInternal;
extern PartialViewDefaultTypeInternal _PartialView_default_instance_;
class PartialView_IoPipeViewsEntry_DoNotUse;
struct PartialView_IoPipeViewsEntry_DoNotUseDefaultTypeInternal;
extern PartialView_IoPipeViewsEntry_DoNotUseDefaultTypeInternal _PartialView_IoPipeViewsEntry_DoNotUse_default_instance_;
class PartialView_IoPortViewsEntry_DoNotUse;
struct PartialView_IoPortViewsEntry_DoNotUseDefaultTypeInternal;
extern PartialView_IoPortViewsEntry_DoNotUseDefaultTypeInternal _PartialView_IoPortViewsEntry_DoNotUse_default_instance_;
class PartialView_SsdViewsEntry_DoNotUse;
struct PartialView_SsdViewsEntry_DoNotUseDefaultTypeInternal;
extern PartialView_SsdViewsEntry_DoNotUseDefaultTypeInternal _PartialView_SsdViewsEntry_DoNotUse_default_instance_;
class PipeView;
struct PipeViewDefaultTypeInternal;
extern PipeViewDefaultTypeInternal _PipeView_default_instance_;
class PortView;
struct PortViewDefaultTypeInternal;
extern PortViewDefaultTypeInternal _PortView_default_instance_;
class PullViewRequest;
struct PullViewRequestDefaultTypeInternal;
extern PullViewRequestDefaultTypeInternal _PullViewRequest_default_instance_;
class PullViewResponse;
struct PullViewResponseDefaultTypeInternal;
extern PullViewResponseDefaultTypeInternal _PullViewResponse_default_instance_;
class PushViewRequest;
struct PushViewRequestDefaultTypeInternal;
extern PushViewRequestDefaultTypeInternal _PushViewRequest_default_instance_;
class PushViewResponse;
struct PushViewResponseDefaultTypeInternal;
extern PushViewResponseDefaultTypeInternal _PushViewResponse_default_instance_;
class RegisterEventCallbackRequest;
struct RegisterEventCallbackRequestDefaultTypeInternal;
extern RegisterEventCallbackRequestDefaultTypeInternal _RegisterEventCallbackRequest_default_instance_;
class RegisterEventCallbackResponse;
struct RegisterEventCallbackResponseDefaultTypeInternal;
extern RegisterEventCallbackResponseDefaultTypeInternal _RegisterEventCallbackResponse_default_instance_;
class RegisterRequest;
struct RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterResponse;
struct RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
class ReportCmplRequest;
struct ReportCmplRequestDefaultTypeInternal;
extern ReportCmplRequestDefaultTypeInternal _ReportCmplRequest_default_instance_;
class ReportCmplResponse;
struct ReportCmplResponseDefaultTypeInternal;
extern ReportCmplResponseDefaultTypeInternal _ReportCmplResponse_default_instance_;
class RequestIOSliceRequest;
struct RequestIOSliceRequestDefaultTypeInternal;
extern RequestIOSliceRequestDefaultTypeInternal _RequestIOSliceRequest_default_instance_;
class RequestIOSliceResponse;
struct RequestIOSliceResponseDefaultTypeInternal;
extern RequestIOSliceResponseDefaultTypeInternal _RequestIOSliceResponse_default_instance_;
class SsdView;
struct SsdViewDefaultTypeInternal;
extern SsdViewDefaultTypeInternal _SsdView_default_instance_;
class ViewRecency;
struct ViewRecencyDefaultTypeInternal;
extern ViewRecencyDefaultTypeInternal _ViewRecency_default_instance_;
class ViewRecency_IoPipeViewRecencyEntry_DoNotUse;
struct ViewRecency_IoPipeViewRecencyEntry_DoNotUseDefaultTypeInternal;
extern ViewRecency_IoPipeViewRecencyEntry_DoNotUseDefaultTypeInternal _ViewRecency_IoPipeViewRecencyEntry_DoNotUse_default_instance_;
class ViewRecency_IoPortViewRecencyEntry_DoNotUse;
struct ViewRecency_IoPortViewRecencyEntry_DoNotUseDefaultTypeInternal;
extern ViewRecency_IoPortViewRecencyEntry_DoNotUseDefaultTypeInternal _ViewRecency_IoPortViewRecencyEntry_DoNotUse_default_instance_;
class ViewRecency_SsdViewRecencyEntry_DoNotUse;
struct ViewRecency_SsdViewRecencyEntry_DoNotUseDefaultTypeInternal;
extern ViewRecency_SsdViewRecencyEntry_DoNotUseDefaultTypeInternal _ViewRecency_SsdViewRecencyEntry_DoNotUse_default_instance_;
class VolumeAttrs;
struct VolumeAttrsDefaultTypeInternal;
extern VolumeAttrsDefaultTypeInternal _VolumeAttrs_default_instance_;
class VolumeExtentFaultRequest;
struct VolumeExtentFaultRequestDefaultTypeInternal;
extern VolumeExtentFaultRequestDefaultTypeInternal _VolumeExtentFaultRequest_default_instance_;
class VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse;
struct VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUseDefaultTypeInternal;
extern VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUseDefaultTypeInternal _VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse_default_instance_;
class VolumeExtentFaultResponse;
struct VolumeExtentFaultResponseDefaultTypeInternal;
extern VolumeExtentFaultResponseDefaultTypeInternal _VolumeExtentFaultResponse_default_instance_;
class VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse;
struct VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUseDefaultTypeInternal;
extern VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUseDefaultTypeInternal _VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse_default_instance_;
}  // namespace FLINT_RPC_MESSAGE
PROTOBUF_NAMESPACE_OPEN
template<> ::FLINT_RPC_MESSAGE::BottleneckReportRequest* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::BottleneckReportRequest>(Arena*);
template<> ::FLINT_RPC_MESSAGE::BottleneckReportResponse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::BottleneckReportResponse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::CreateVolumeRequest* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::CreateVolumeRequest>(Arena*);
template<> ::FLINT_RPC_MESSAGE::CreateVolumeRequest_SsdPreferenceEntry_DoNotUse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::CreateVolumeRequest_SsdPreferenceEntry_DoNotUse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::CreateVolumeResponse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::CreateVolumeResponse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::DeleteVolumeRequest>(Arena*);
template<> ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::DeleteVolumeResponse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::EventCallback* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::EventCallback>(Arena*);
template<> ::FLINT_RPC_MESSAGE::ExtentLocator* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::ExtentLocator>(Arena*);
template<> ::FLINT_RPC_MESSAGE::ExtentLocators* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::ExtentLocators>(Arena*);
template<> ::FLINT_RPC_MESSAGE::FlintMetadata* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::FlintMetadata>(Arena*);
template<> ::FLINT_RPC_MESSAGE::FlintMetadata_SsdIdMapEntry_DoNotUse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::FlintMetadata_SsdIdMapEntry_DoNotUse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::GetFlintMetadataRequest>(Arena*);
template<> ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::IOCompletion* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::IOCompletion>(Arena*);
template<> ::FLINT_RPC_MESSAGE::ListVolumeRequest* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::ListVolumeRequest>(Arena*);
template<> ::FLINT_RPC_MESSAGE::ListVolumeResponse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::ListVolumeResponse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::OpenVolumeRequest* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::OpenVolumeRequest>(Arena*);
template<> ::FLINT_RPC_MESSAGE::OpenVolumeResponse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::OpenVolumeResponse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::PartialView* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::PartialView>(Arena*);
template<> ::FLINT_RPC_MESSAGE::PartialView_IoPipeViewsEntry_DoNotUse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::PartialView_IoPipeViewsEntry_DoNotUse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::PartialView_IoPortViewsEntry_DoNotUse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::PartialView_IoPortViewsEntry_DoNotUse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::PartialView_SsdViewsEntry_DoNotUse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::PartialView_SsdViewsEntry_DoNotUse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::PipeView* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::PipeView>(Arena*);
template<> ::FLINT_RPC_MESSAGE::PortView* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::PortView>(Arena*);
template<> ::FLINT_RPC_MESSAGE::PullViewRequest* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::PullViewRequest>(Arena*);
template<> ::FLINT_RPC_MESSAGE::PullViewResponse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::PullViewResponse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::PushViewRequest* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::PushViewRequest>(Arena*);
template<> ::FLINT_RPC_MESSAGE::PushViewResponse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::PushViewResponse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest>(Arena*);
template<> ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::RegisterRequest* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::RegisterRequest>(Arena*);
template<> ::FLINT_RPC_MESSAGE::RegisterResponse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::RegisterResponse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::ReportCmplRequest* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::ReportCmplRequest>(Arena*);
template<> ::FLINT_RPC_MESSAGE::ReportCmplResponse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::ReportCmplResponse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::RequestIOSliceRequest>(Arena*);
template<> ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::RequestIOSliceResponse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::SsdView* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::SsdView>(Arena*);
template<> ::FLINT_RPC_MESSAGE::ViewRecency* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::ViewRecency>(Arena*);
template<> ::FLINT_RPC_MESSAGE::ViewRecency_IoPipeViewRecencyEntry_DoNotUse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::ViewRecency_IoPipeViewRecencyEntry_DoNotUse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::ViewRecency_IoPortViewRecencyEntry_DoNotUse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::ViewRecency_IoPortViewRecencyEntry_DoNotUse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::ViewRecency_SsdViewRecencyEntry_DoNotUse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::ViewRecency_SsdViewRecencyEntry_DoNotUse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::VolumeAttrs* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::VolumeAttrs>(Arena*);
template<> ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest>(Arena*);
template<> ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>(Arena*);
template<> ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse* Arena::CreateMaybeMessage<::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FLINT_RPC_MESSAGE {

// ===================================================================

class GetFlintMetadataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.GetFlintMetadataRequest) */ {
 public:
  inline GetFlintMetadataRequest() : GetFlintMetadataRequest(nullptr) {}
  ~GetFlintMetadataRequest() override;
  explicit constexpr GetFlintMetadataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFlintMetadataRequest(const GetFlintMetadataRequest& from);
  GetFlintMetadataRequest(GetFlintMetadataRequest&& from) noexcept
    : GetFlintMetadataRequest() {
    *this = ::std::move(from);
  }

  inline GetFlintMetadataRequest& operator=(const GetFlintMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFlintMetadataRequest& operator=(GetFlintMetadataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFlintMetadataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFlintMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const GetFlintMetadataRequest*>(
               &_GetFlintMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetFlintMetadataRequest& a, GetFlintMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFlintMetadataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFlintMetadataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFlintMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFlintMetadataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFlintMetadataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetFlintMetadataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFlintMetadataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.GetFlintMetadataRequest";
  }
  protected:
  explicit GetFlintMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 1,
  };
  // string hostname = 1;
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.GetFlintMetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class FlintMetadata_SsdIdMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlintMetadata_SsdIdMapEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FlintMetadata_SsdIdMapEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  FlintMetadata_SsdIdMapEntry_DoNotUse();
  explicit constexpr FlintMetadata_SsdIdMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FlintMetadata_SsdIdMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FlintMetadata_SsdIdMapEntry_DoNotUse& other);
  static const FlintMetadata_SsdIdMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FlintMetadata_SsdIdMapEntry_DoNotUse*>(&_FlintMetadata_SsdIdMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "FLINT_RPC_MESSAGE.FlintMetadata.SsdIdMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class FlintMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.FlintMetadata) */ {
 public:
  inline FlintMetadata() : FlintMetadata(nullptr) {}
  ~FlintMetadata() override;
  explicit constexpr FlintMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlintMetadata(const FlintMetadata& from);
  FlintMetadata(FlintMetadata&& from) noexcept
    : FlintMetadata() {
    *this = ::std::move(from);
  }

  inline FlintMetadata& operator=(const FlintMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlintMetadata& operator=(FlintMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlintMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlintMetadata* internal_default_instance() {
    return reinterpret_cast<const FlintMetadata*>(
               &_FlintMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FlintMetadata& a, FlintMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(FlintMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlintMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlintMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlintMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlintMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FlintMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlintMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.FlintMetadata";
  }
  protected:
  explicit FlintMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSsdIdMapFieldNumber = 2,
    kEbofPortFieldNumber = 1,
    kNicPortsNumFieldNumber = 3,
  };
  // map<string, uint32> ssd_id_map = 2;
  int ssd_id_map_size() const;
  private:
  int _internal_ssd_id_map_size() const;
  public:
  void clear_ssd_id_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      _internal_ssd_id_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      _internal_mutable_ssd_id_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      ssd_id_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      mutable_ssd_id_map();

  // int32 ebof_port = 1;
  void clear_ebof_port();
  int32_t ebof_port() const;
  void set_ebof_port(int32_t value);
  private:
  int32_t _internal_ebof_port() const;
  void _internal_set_ebof_port(int32_t value);
  public:

  // int32 nic_ports_num = 3;
  void clear_nic_ports_num();
  int32_t nic_ports_num() const;
  void set_nic_ports_num(int32_t value);
  private:
  int32_t _internal_nic_ports_num() const;
  void _internal_set_nic_ports_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.FlintMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FlintMetadata_SsdIdMapEntry_DoNotUse,
      std::string, uint32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> ssd_id_map_;
  int32_t ebof_port_;
  int32_t nic_ports_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetFlintMetadataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.GetFlintMetadataResponse) */ {
 public:
  inline GetFlintMetadataResponse() : GetFlintMetadataResponse(nullptr) {}
  ~GetFlintMetadataResponse() override;
  explicit constexpr GetFlintMetadataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFlintMetadataResponse(const GetFlintMetadataResponse& from);
  GetFlintMetadataResponse(GetFlintMetadataResponse&& from) noexcept
    : GetFlintMetadataResponse() {
    *this = ::std::move(from);
  }

  inline GetFlintMetadataResponse& operator=(const GetFlintMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFlintMetadataResponse& operator=(GetFlintMetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFlintMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFlintMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const GetFlintMetadataResponse*>(
               &_GetFlintMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetFlintMetadataResponse& a, GetFlintMetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFlintMetadataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFlintMetadataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFlintMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFlintMetadataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFlintMetadataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetFlintMetadataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFlintMetadataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.GetFlintMetadataResponse";
  }
  protected:
  explicit GetFlintMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMessageFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kErrCodeFieldNumber = 1,
  };
  // string err_message = 2;
  void clear_err_message();
  const std::string& err_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_message();
  PROTOBUF_NODISCARD std::string* release_err_message();
  void set_allocated_err_message(std::string* err_message);
  private:
  const std::string& _internal_err_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_message(const std::string& value);
  std::string* _internal_mutable_err_message();
  public:

  // .FLINT_RPC_MESSAGE.FlintMetadata metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::FLINT_RPC_MESSAGE::FlintMetadata& metadata() const;
  PROTOBUF_NODISCARD ::FLINT_RPC_MESSAGE::FlintMetadata* release_metadata();
  ::FLINT_RPC_MESSAGE::FlintMetadata* mutable_metadata();
  void set_allocated_metadata(::FLINT_RPC_MESSAGE::FlintMetadata* metadata);
  private:
  const ::FLINT_RPC_MESSAGE::FlintMetadata& _internal_metadata() const;
  ::FLINT_RPC_MESSAGE::FlintMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::FLINT_RPC_MESSAGE::FlintMetadata* metadata);
  ::FLINT_RPC_MESSAGE::FlintMetadata* unsafe_arena_release_metadata();

  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.GetFlintMetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_message_;
  ::FLINT_RPC_MESSAGE::FlintMetadata* metadata_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CreateVolumeRequest_SsdPreferenceEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateVolumeRequest_SsdPreferenceEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateVolumeRequest_SsdPreferenceEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> SuperType;
  CreateVolumeRequest_SsdPreferenceEntry_DoNotUse();
  explicit constexpr CreateVolumeRequest_SsdPreferenceEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CreateVolumeRequest_SsdPreferenceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateVolumeRequest_SsdPreferenceEntry_DoNotUse& other);
  static const CreateVolumeRequest_SsdPreferenceEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateVolumeRequest_SsdPreferenceEntry_DoNotUse*>(&_CreateVolumeRequest_SsdPreferenceEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "FLINT_RPC_MESSAGE.CreateVolumeRequest.SsdPreferenceEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class CreateVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.CreateVolumeRequest) */ {
 public:
  inline CreateVolumeRequest() : CreateVolumeRequest(nullptr) {}
  ~CreateVolumeRequest() override;
  explicit constexpr CreateVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVolumeRequest(const CreateVolumeRequest& from);
  CreateVolumeRequest(CreateVolumeRequest&& from) noexcept
    : CreateVolumeRequest() {
    *this = ::std::move(from);
  }

  inline CreateVolumeRequest& operator=(const CreateVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVolumeRequest& operator=(CreateVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateVolumeRequest*>(
               &_CreateVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateVolumeRequest& a, CreateVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.CreateVolumeRequest";
  }
  protected:
  explicit CreateVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSsdPreferenceFieldNumber = 5,
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
    kRepFactorFieldNumber = 3,
    kFlagsFieldNumber = 4,
    kPolicyFieldNumber = 6,
  };
  // map<string, float> ssd_preference = 5;
  int ssd_preference_size() const;
  private:
  int _internal_ssd_preference_size() const;
  public:
  void clear_ssd_preference();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      _internal_ssd_preference() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      _internal_mutable_ssd_preference();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      ssd_preference() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_ssd_preference();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 size = 2;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // uint32 rep_factor = 3;
  void clear_rep_factor();
  uint32_t rep_factor() const;
  void set_rep_factor(uint32_t value);
  private:
  uint32_t _internal_rep_factor() const;
  void _internal_set_rep_factor(uint32_t value);
  public:

  // uint32 flags = 4;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // uint32 policy = 6;
  void clear_policy();
  uint32_t policy() const;
  void set_policy(uint32_t value);
  private:
  uint32_t _internal_policy() const;
  void _internal_set_policy(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.CreateVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CreateVolumeRequest_SsdPreferenceEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> ssd_preference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t size_;
  uint32_t rep_factor_;
  uint32_t flags_;
  uint32_t policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CreateVolumeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.CreateVolumeResponse) */ {
 public:
  inline CreateVolumeResponse() : CreateVolumeResponse(nullptr) {}
  ~CreateVolumeResponse() override;
  explicit constexpr CreateVolumeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVolumeResponse(const CreateVolumeResponse& from);
  CreateVolumeResponse(CreateVolumeResponse&& from) noexcept
    : CreateVolumeResponse() {
    *this = ::std::move(from);
  }

  inline CreateVolumeResponse& operator=(const CreateVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVolumeResponse& operator=(CreateVolumeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateVolumeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const CreateVolumeResponse*>(
               &_CreateVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateVolumeResponse& a, CreateVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVolumeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateVolumeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateVolumeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateVolumeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVolumeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.CreateVolumeResponse";
  }
  protected:
  explicit CreateVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMessageFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // string err_message = 2;
  void clear_err_message();
  const std::string& err_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_message();
  PROTOBUF_NODISCARD std::string* release_err_message();
  void set_allocated_err_message(std::string* err_message);
  private:
  const std::string& _internal_err_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_message(const std::string& value);
  std::string* _internal_mutable_err_message();
  public:

  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.CreateVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_message_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class OpenVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.OpenVolumeRequest) */ {
 public:
  inline OpenVolumeRequest() : OpenVolumeRequest(nullptr) {}
  ~OpenVolumeRequest() override;
  explicit constexpr OpenVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenVolumeRequest(const OpenVolumeRequest& from);
  OpenVolumeRequest(OpenVolumeRequest&& from) noexcept
    : OpenVolumeRequest() {
    *this = ::std::move(from);
  }

  inline OpenVolumeRequest& operator=(const OpenVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenVolumeRequest& operator=(OpenVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const OpenVolumeRequest*>(
               &_OpenVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OpenVolumeRequest& a, OpenVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpenVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.OpenVolumeRequest";
  }
  protected:
  explicit OpenVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.OpenVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ExtentLocator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.ExtentLocator) */ {
 public:
  inline ExtentLocator() : ExtentLocator(nullptr) {}
  ~ExtentLocator() override;
  explicit constexpr ExtentLocator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtentLocator(const ExtentLocator& from);
  ExtentLocator(ExtentLocator&& from) noexcept
    : ExtentLocator() {
    *this = ::std::move(from);
  }

  inline ExtentLocator& operator=(const ExtentLocator& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtentLocator& operator=(ExtentLocator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtentLocator& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtentLocator* internal_default_instance() {
    return reinterpret_cast<const ExtentLocator*>(
               &_ExtentLocator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ExtentLocator& a, ExtentLocator& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtentLocator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtentLocator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtentLocator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtentLocator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtentLocator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtentLocator& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtentLocator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.ExtentLocator";
  }
  protected:
  explicit ExtentLocator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepRoleFieldNumber = 1,
    kSsdIdFieldNumber = 2,
    kPextNumFieldNumber = 3,
  };
  // uint32 rep_role = 1;
  void clear_rep_role();
  uint32_t rep_role() const;
  void set_rep_role(uint32_t value);
  private:
  uint32_t _internal_rep_role() const;
  void _internal_set_rep_role(uint32_t value);
  public:

  // uint32 ssd_id = 2;
  void clear_ssd_id();
  uint32_t ssd_id() const;
  void set_ssd_id(uint32_t value);
  private:
  uint32_t _internal_ssd_id() const;
  void _internal_set_ssd_id(uint32_t value);
  public:

  // uint32 pext_num = 3;
  void clear_pext_num();
  uint32_t pext_num() const;
  void set_pext_num(uint32_t value);
  private:
  uint32_t _internal_pext_num() const;
  void _internal_set_pext_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.ExtentLocator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t rep_role_;
  uint32_t ssd_id_;
  uint32_t pext_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ExtentLocators final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.ExtentLocators) */ {
 public:
  inline ExtentLocators() : ExtentLocators(nullptr) {}
  ~ExtentLocators() override;
  explicit constexpr ExtentLocators(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtentLocators(const ExtentLocators& from);
  ExtentLocators(ExtentLocators&& from) noexcept
    : ExtentLocators() {
    *this = ::std::move(from);
  }

  inline ExtentLocators& operator=(const ExtentLocators& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtentLocators& operator=(ExtentLocators&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtentLocators& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtentLocators* internal_default_instance() {
    return reinterpret_cast<const ExtentLocators*>(
               &_ExtentLocators_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ExtentLocators& a, ExtentLocators& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtentLocators* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtentLocators* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtentLocators* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtentLocators>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtentLocators& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtentLocators& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtentLocators* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.ExtentLocators";
  }
  protected:
  explicit ExtentLocators(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocatorsFieldNumber = 1,
  };
  // repeated .FLINT_RPC_MESSAGE.ExtentLocator locators = 1;
  int locators_size() const;
  private:
  int _internal_locators_size() const;
  public:
  void clear_locators();
  ::FLINT_RPC_MESSAGE::ExtentLocator* mutable_locators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::ExtentLocator >*
      mutable_locators();
  private:
  const ::FLINT_RPC_MESSAGE::ExtentLocator& _internal_locators(int index) const;
  ::FLINT_RPC_MESSAGE::ExtentLocator* _internal_add_locators();
  public:
  const ::FLINT_RPC_MESSAGE::ExtentLocator& locators(int index) const;
  ::FLINT_RPC_MESSAGE::ExtentLocator* add_locators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::ExtentLocator >&
      locators() const;

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.ExtentLocators)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::ExtentLocator > locators_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse, 
    uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse, 
    uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse();
  explicit constexpr OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse& other);
  static const OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse*>(&_OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class OpenVolumeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.OpenVolumeResponse) */ {
 public:
  inline OpenVolumeResponse() : OpenVolumeResponse(nullptr) {}
  ~OpenVolumeResponse() override;
  explicit constexpr OpenVolumeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenVolumeResponse(const OpenVolumeResponse& from);
  OpenVolumeResponse(OpenVolumeResponse&& from) noexcept
    : OpenVolumeResponse() {
    *this = ::std::move(from);
  }

  inline OpenVolumeResponse& operator=(const OpenVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenVolumeResponse& operator=(OpenVolumeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenVolumeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const OpenVolumeResponse*>(
               &_OpenVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(OpenVolumeResponse& a, OpenVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenVolumeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpenVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpenVolumeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OpenVolumeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OpenVolumeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenVolumeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.OpenVolumeResponse";
  }
  protected:
  explicit OpenVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtentLocatorMapFieldNumber = 6,
    kErrMessageFieldNumber = 2,
    kErrCodeFieldNumber = 1,
    kRepFactorFieldNumber = 4,
    kSizeFieldNumber = 3,
    kFlagsFieldNumber = 5,
  };
  // map<uint32, .FLINT_RPC_MESSAGE.ExtentLocators> extent_locator_map = 6;
  int extent_locator_map_size() const;
  private:
  int _internal_extent_locator_map_size() const;
  public:
  void clear_extent_locator_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >&
      _internal_extent_locator_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >*
      _internal_mutable_extent_locator_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >&
      extent_locator_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >*
      mutable_extent_locator_map();

  // string err_message = 2;
  void clear_err_message();
  const std::string& err_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_message();
  PROTOBUF_NODISCARD std::string* release_err_message();
  void set_allocated_err_message(std::string* err_message);
  private:
  const std::string& _internal_err_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_message(const std::string& value);
  std::string* _internal_mutable_err_message();
  public:

  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // uint32 rep_factor = 4;
  void clear_rep_factor();
  uint32_t rep_factor() const;
  void set_rep_factor(uint32_t value);
  private:
  uint32_t _internal_rep_factor() const;
  void _internal_set_rep_factor(uint32_t value);
  public:

  // uint64 size = 3;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // uint32 flags = 5;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.OpenVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse,
      uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> extent_locator_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_message_;
  int32_t err_code_;
  uint32_t rep_factor_;
  uint64_t size_;
  uint32_t flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> SuperType;
  VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse();
  explicit constexpr VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse& other);
  static const VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse*>(&_VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.SsdPreferenceEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class VolumeExtentFaultRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest) */ {
 public:
  inline VolumeExtentFaultRequest() : VolumeExtentFaultRequest(nullptr) {}
  ~VolumeExtentFaultRequest() override;
  explicit constexpr VolumeExtentFaultRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeExtentFaultRequest(const VolumeExtentFaultRequest& from);
  VolumeExtentFaultRequest(VolumeExtentFaultRequest&& from) noexcept
    : VolumeExtentFaultRequest() {
    *this = ::std::move(from);
  }

  inline VolumeExtentFaultRequest& operator=(const VolumeExtentFaultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeExtentFaultRequest& operator=(VolumeExtentFaultRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VolumeExtentFaultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeExtentFaultRequest* internal_default_instance() {
    return reinterpret_cast<const VolumeExtentFaultRequest*>(
               &_VolumeExtentFaultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(VolumeExtentFaultRequest& a, VolumeExtentFaultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeExtentFaultRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeExtentFaultRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VolumeExtentFaultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VolumeExtentFaultRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VolumeExtentFaultRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VolumeExtentFaultRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeExtentFaultRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.VolumeExtentFaultRequest";
  }
  protected:
  explicit VolumeExtentFaultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLextsFieldNumber = 2,
    kSsdPreferenceFieldNumber = 3,
    kNameFieldNumber = 1,
    kPolicyFieldNumber = 4,
  };
  // repeated uint64 lexts = 2;
  int lexts_size() const;
  private:
  int _internal_lexts_size() const;
  public:
  void clear_lexts();
  private:
  uint64_t _internal_lexts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_lexts() const;
  void _internal_add_lexts(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_lexts();
  public:
  uint64_t lexts(int index) const;
  void set_lexts(int index, uint64_t value);
  void add_lexts(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      lexts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_lexts();

  // map<string, float> ssd_preference = 3;
  int ssd_preference_size() const;
  private:
  int _internal_ssd_preference_size() const;
  public:
  void clear_ssd_preference();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      _internal_ssd_preference() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      _internal_mutable_ssd_preference();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      ssd_preference() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_ssd_preference();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 policy = 4;
  void clear_policy();
  uint32_t policy() const;
  void set_policy(uint32_t value);
  private:
  uint32_t _internal_policy() const;
  void _internal_set_policy(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > lexts_;
  mutable std::atomic<int> _lexts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> ssd_preference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse, 
    uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse, 
    uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse();
  explicit constexpr VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse& other);
  static const VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse*>(&_VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class VolumeExtentFaultResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse) */ {
 public:
  inline VolumeExtentFaultResponse() : VolumeExtentFaultResponse(nullptr) {}
  ~VolumeExtentFaultResponse() override;
  explicit constexpr VolumeExtentFaultResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeExtentFaultResponse(const VolumeExtentFaultResponse& from);
  VolumeExtentFaultResponse(VolumeExtentFaultResponse&& from) noexcept
    : VolumeExtentFaultResponse() {
    *this = ::std::move(from);
  }

  inline VolumeExtentFaultResponse& operator=(const VolumeExtentFaultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeExtentFaultResponse& operator=(VolumeExtentFaultResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VolumeExtentFaultResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeExtentFaultResponse* internal_default_instance() {
    return reinterpret_cast<const VolumeExtentFaultResponse*>(
               &_VolumeExtentFaultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(VolumeExtentFaultResponse& a, VolumeExtentFaultResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeExtentFaultResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeExtentFaultResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VolumeExtentFaultResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VolumeExtentFaultResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VolumeExtentFaultResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VolumeExtentFaultResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeExtentFaultResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.VolumeExtentFaultResponse";
  }
  protected:
  explicit VolumeExtentFaultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtentLocatorMapFieldNumber = 3,
    kErrMessageFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // map<uint32, .FLINT_RPC_MESSAGE.ExtentLocators> extent_locator_map = 3;
  int extent_locator_map_size() const;
  private:
  int _internal_extent_locator_map_size() const;
  public:
  void clear_extent_locator_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >&
      _internal_extent_locator_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >*
      _internal_mutable_extent_locator_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >&
      extent_locator_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >*
      mutable_extent_locator_map();

  // string err_message = 2;
  void clear_err_message();
  const std::string& err_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_message();
  PROTOBUF_NODISCARD std::string* release_err_message();
  void set_allocated_err_message(std::string* err_message);
  private:
  const std::string& _internal_err_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_message(const std::string& value);
  std::string* _internal_mutable_err_message();
  public:

  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse,
      uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> extent_locator_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_message_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class DeleteVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.DeleteVolumeRequest) */ {
 public:
  inline DeleteVolumeRequest() : DeleteVolumeRequest(nullptr) {}
  ~DeleteVolumeRequest() override;
  explicit constexpr DeleteVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVolumeRequest(const DeleteVolumeRequest& from);
  DeleteVolumeRequest(DeleteVolumeRequest&& from) noexcept
    : DeleteVolumeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteVolumeRequest& operator=(const DeleteVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVolumeRequest& operator=(DeleteVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteVolumeRequest*>(
               &_DeleteVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DeleteVolumeRequest& a, DeleteVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.DeleteVolumeRequest";
  }
  protected:
  explicit DeleteVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.DeleteVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class DeleteVolumeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.DeleteVolumeResponse) */ {
 public:
  inline DeleteVolumeResponse() : DeleteVolumeResponse(nullptr) {}
  ~DeleteVolumeResponse() override;
  explicit constexpr DeleteVolumeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteVolumeResponse(const DeleteVolumeResponse& from);
  DeleteVolumeResponse(DeleteVolumeResponse&& from) noexcept
    : DeleteVolumeResponse() {
    *this = ::std::move(from);
  }

  inline DeleteVolumeResponse& operator=(const DeleteVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteVolumeResponse& operator=(DeleteVolumeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteVolumeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteVolumeResponse*>(
               &_DeleteVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeleteVolumeResponse& a, DeleteVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteVolumeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteVolumeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteVolumeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteVolumeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteVolumeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.DeleteVolumeResponse";
  }
  protected:
  explicit DeleteVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMessageFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // string err_message = 2;
  void clear_err_message();
  const std::string& err_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_message();
  PROTOBUF_NODISCARD std::string* release_err_message();
  void set_allocated_err_message(std::string* err_message);
  private:
  const std::string& _internal_err_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_message(const std::string& value);
  std::string* _internal_mutable_err_message();
  public:

  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.DeleteVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_message_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ListVolumeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.ListVolumeRequest) */ {
 public:
  inline ListVolumeRequest() : ListVolumeRequest(nullptr) {}
  ~ListVolumeRequest() override;
  explicit constexpr ListVolumeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVolumeRequest(const ListVolumeRequest& from);
  ListVolumeRequest(ListVolumeRequest&& from) noexcept
    : ListVolumeRequest() {
    *this = ::std::move(from);
  }

  inline ListVolumeRequest& operator=(const ListVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVolumeRequest& operator=(ListVolumeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVolumeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const ListVolumeRequest*>(
               &_ListVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ListVolumeRequest& a, ListVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVolumeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVolumeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVolumeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListVolumeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVolumeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.ListVolumeRequest";
  }
  protected:
  explicit ListVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kListAllFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool list_all = 2;
  void clear_list_all();
  bool list_all() const;
  void set_list_all(bool value);
  private:
  bool _internal_list_all() const;
  void _internal_set_list_all(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.ListVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool list_all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class VolumeAttrs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.VolumeAttrs) */ {
 public:
  inline VolumeAttrs() : VolumeAttrs(nullptr) {}
  ~VolumeAttrs() override;
  explicit constexpr VolumeAttrs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VolumeAttrs(const VolumeAttrs& from);
  VolumeAttrs(VolumeAttrs&& from) noexcept
    : VolumeAttrs() {
    *this = ::std::move(from);
  }

  inline VolumeAttrs& operator=(const VolumeAttrs& from) {
    CopyFrom(from);
    return *this;
  }
  inline VolumeAttrs& operator=(VolumeAttrs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VolumeAttrs& default_instance() {
    return *internal_default_instance();
  }
  static inline const VolumeAttrs* internal_default_instance() {
    return reinterpret_cast<const VolumeAttrs*>(
               &_VolumeAttrs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(VolumeAttrs& a, VolumeAttrs& b) {
    a.Swap(&b);
  }
  inline void Swap(VolumeAttrs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VolumeAttrs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VolumeAttrs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VolumeAttrs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VolumeAttrs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VolumeAttrs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VolumeAttrs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.VolumeAttrs";
  }
  protected:
  explicit VolumeAttrs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
    kRepFactorFieldNumber = 3,
    kFlagsFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 size = 2;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // uint32 rep_factor = 3;
  void clear_rep_factor();
  uint32_t rep_factor() const;
  void set_rep_factor(uint32_t value);
  private:
  uint32_t _internal_rep_factor() const;
  void _internal_set_rep_factor(uint32_t value);
  public:

  // uint32 flags = 4;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.VolumeAttrs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t size_;
  uint32_t rep_factor_;
  uint32_t flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ListVolumeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.ListVolumeResponse) */ {
 public:
  inline ListVolumeResponse() : ListVolumeResponse(nullptr) {}
  ~ListVolumeResponse() override;
  explicit constexpr ListVolumeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListVolumeResponse(const ListVolumeResponse& from);
  ListVolumeResponse(ListVolumeResponse&& from) noexcept
    : ListVolumeResponse() {
    *this = ::std::move(from);
  }

  inline ListVolumeResponse& operator=(const ListVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListVolumeResponse& operator=(ListVolumeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListVolumeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const ListVolumeResponse*>(
               &_ListVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ListVolumeResponse& a, ListVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListVolumeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListVolumeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListVolumeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListVolumeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListVolumeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.ListVolumeResponse";
  }
  protected:
  explicit ListVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolAttrsFieldNumber = 3,
    kErrMessageFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // repeated .FLINT_RPC_MESSAGE.VolumeAttrs vol_attrs = 3;
  int vol_attrs_size() const;
  private:
  int _internal_vol_attrs_size() const;
  public:
  void clear_vol_attrs();
  ::FLINT_RPC_MESSAGE::VolumeAttrs* mutable_vol_attrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::VolumeAttrs >*
      mutable_vol_attrs();
  private:
  const ::FLINT_RPC_MESSAGE::VolumeAttrs& _internal_vol_attrs(int index) const;
  ::FLINT_RPC_MESSAGE::VolumeAttrs* _internal_add_vol_attrs();
  public:
  const ::FLINT_RPC_MESSAGE::VolumeAttrs& vol_attrs(int index) const;
  ::FLINT_RPC_MESSAGE::VolumeAttrs* add_vol_attrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::VolumeAttrs >&
      vol_attrs() const;

  // string err_message = 2;
  void clear_err_message();
  const std::string& err_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_message();
  PROTOBUF_NODISCARD std::string* release_err_message();
  void set_allocated_err_message(std::string* err_message);
  private:
  const std::string& _internal_err_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_message(const std::string& value);
  std::string* _internal_mutable_err_message();
  public:

  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.ListVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::VolumeAttrs > vol_attrs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_message_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {}
  ~RegisterRequest() override;
  explicit constexpr RegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalSchedulerIpFieldNumber = 2,
    kClientIdFieldNumber = 1,
    kLocalSchedulerPortFieldNumber = 3,
    kEbofPortFieldNumber = 4,
    kSloLevelFieldNumber = 5,
  };
  // string local_scheduler_ip = 2;
  void clear_local_scheduler_ip();
  const std::string& local_scheduler_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_scheduler_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_scheduler_ip();
  PROTOBUF_NODISCARD std::string* release_local_scheduler_ip();
  void set_allocated_local_scheduler_ip(std::string* local_scheduler_ip);
  private:
  const std::string& _internal_local_scheduler_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_scheduler_ip(const std::string& value);
  std::string* _internal_mutable_local_scheduler_ip();
  public:

  // int32 client_id = 1;
  void clear_client_id();
  int32_t client_id() const;
  void set_client_id(int32_t value);
  private:
  int32_t _internal_client_id() const;
  void _internal_set_client_id(int32_t value);
  public:

  // int32 local_scheduler_port = 3;
  void clear_local_scheduler_port();
  int32_t local_scheduler_port() const;
  void set_local_scheduler_port(int32_t value);
  private:
  int32_t _internal_local_scheduler_port() const;
  void _internal_set_local_scheduler_port(int32_t value);
  public:

  // int32 ebof_port = 4;
  void clear_ebof_port();
  int32_t ebof_port() const;
  void set_ebof_port(int32_t value);
  private:
  int32_t _internal_ebof_port() const;
  void _internal_set_ebof_port(int32_t value);
  public:

  // int32 slo_level = 5;
  void clear_slo_level();
  int32_t slo_level() const;
  void set_slo_level(int32_t value);
  private:
  int32_t _internal_slo_level() const;
  void _internal_set_slo_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_scheduler_ip_;
  int32_t client_id_;
  int32_t local_scheduler_port_;
  int32_t ebof_port_;
  int32_t slo_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RegisterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.RegisterResponse) */ {
 public:
  inline RegisterResponse() : RegisterResponse(nullptr) {}
  ~RegisterResponse() override;
  explicit constexpr RegisterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterResponse(const RegisterResponse& from);
  RegisterResponse(RegisterResponse&& from) noexcept
    : RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
               &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(RegisterResponse& a, RegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.RegisterResponse";
  }
  protected:
  explicit RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 2,
    kErrCodeFieldNumber = 1,
    kClientIdFieldNumber = 3,
  };
  // string err_msg = 2;
  void clear_err_msg();
  const std::string& err_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_msg();
  PROTOBUF_NODISCARD std::string* release_err_msg();
  void set_allocated_err_msg(std::string* err_msg);
  private:
  const std::string& _internal_err_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_msg(const std::string& value);
  std::string* _internal_mutable_err_msg();
  public:

  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // int32 client_id = 3;
  void clear_client_id();
  int32_t client_id() const;
  void set_client_id(int32_t value);
  private:
  int32_t _internal_client_id() const;
  void _internal_set_client_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.RegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
  int32_t err_code_;
  int32_t client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PortView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.PortView) */ {
 public:
  inline PortView() : PortView(nullptr) {}
  ~PortView() override;
  explicit constexpr PortView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PortView(const PortView& from);
  PortView(PortView&& from) noexcept
    : PortView() {
    *this = ::std::move(from);
  }

  inline PortView& operator=(const PortView& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortView& operator=(PortView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortView& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortView* internal_default_instance() {
    return reinterpret_cast<const PortView*>(
               &_PortView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PortView& a, PortView& b) {
    a.Swap(&b);
  }
  inline void Swap(PortView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PortView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PortView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PortView& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.PortView";
  }
  protected:
  explicit PortView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadSizeDistFieldNumber = 6,
    kWriteSizeDistFieldNumber = 7,
    kPortIdFieldNumber = 1,
    kReadBwFieldNumber = 2,
    kWriteBwFieldNumber = 3,
    kReadIopsFieldNumber = 4,
    kRecencyCounterFieldNumber = 8,
    kWriteIopsFieldNumber = 5,
  };
  // repeated uint32 read_size_dist = 6;
  int read_size_dist_size() const;
  private:
  int _internal_read_size_dist_size() const;
  public:
  void clear_read_size_dist();
  private:
  uint32_t _internal_read_size_dist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_read_size_dist() const;
  void _internal_add_read_size_dist(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_read_size_dist();
  public:
  uint32_t read_size_dist(int index) const;
  void set_read_size_dist(int index, uint32_t value);
  void add_read_size_dist(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      read_size_dist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_read_size_dist();

  // repeated uint32 write_size_dist = 7;
  int write_size_dist_size() const;
  private:
  int _internal_write_size_dist_size() const;
  public:
  void clear_write_size_dist();
  private:
  uint32_t _internal_write_size_dist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_write_size_dist() const;
  void _internal_add_write_size_dist(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_write_size_dist();
  public:
  uint32_t write_size_dist(int index) const;
  void set_write_size_dist(int index, uint32_t value);
  void add_write_size_dist(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      write_size_dist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_write_size_dist();

  // int32 port_id = 1;
  void clear_port_id();
  int32_t port_id() const;
  void set_port_id(int32_t value);
  private:
  int32_t _internal_port_id() const;
  void _internal_set_port_id(int32_t value);
  public:

  // float read_bw = 2;
  void clear_read_bw();
  float read_bw() const;
  void set_read_bw(float value);
  private:
  float _internal_read_bw() const;
  void _internal_set_read_bw(float value);
  public:

  // float write_bw = 3;
  void clear_write_bw();
  float write_bw() const;
  void set_write_bw(float value);
  private:
  float _internal_write_bw() const;
  void _internal_set_write_bw(float value);
  public:

  // float read_iops = 4;
  void clear_read_iops();
  float read_iops() const;
  void set_read_iops(float value);
  private:
  float _internal_read_iops() const;
  void _internal_set_read_iops(float value);
  public:

  // uint64 recency_counter = 8;
  void clear_recency_counter();
  uint64_t recency_counter() const;
  void set_recency_counter(uint64_t value);
  private:
  uint64_t _internal_recency_counter() const;
  void _internal_set_recency_counter(uint64_t value);
  public:

  // float write_iops = 5;
  void clear_write_iops();
  float write_iops() const;
  void set_write_iops(float value);
  private:
  float _internal_write_iops() const;
  void _internal_set_write_iops(float value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.PortView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > read_size_dist_;
  mutable std::atomic<int> _read_size_dist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > write_size_dist_;
  mutable std::atomic<int> _write_size_dist_cached_byte_size_;
  int32_t port_id_;
  float read_bw_;
  float write_bw_;
  float read_iops_;
  uint64_t recency_counter_;
  float write_iops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PipeView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.PipeView) */ {
 public:
  inline PipeView() : PipeView(nullptr) {}
  ~PipeView() override;
  explicit constexpr PipeView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PipeView(const PipeView& from);
  PipeView(PipeView&& from) noexcept
    : PipeView() {
    *this = ::std::move(from);
  }

  inline PipeView& operator=(const PipeView& from) {
    CopyFrom(from);
    return *this;
  }
  inline PipeView& operator=(PipeView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PipeView& default_instance() {
    return *internal_default_instance();
  }
  static inline const PipeView* internal_default_instance() {
    return reinterpret_cast<const PipeView*>(
               &_PipeView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PipeView& a, PipeView& b) {
    a.Swap(&b);
  }
  inline void Swap(PipeView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PipeView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PipeView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PipeView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PipeView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PipeView& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PipeView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.PipeView";
  }
  protected:
  explicit PipeView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPipeIdFieldNumber = 1,
    kReadBwFieldNumber = 2,
    kWriteBwFieldNumber = 3,
    kReadIopsFieldNumber = 4,
    kRecencyCounterFieldNumber = 6,
    kWriteIopsFieldNumber = 5,
  };
  // int32 pipe_id = 1;
  void clear_pipe_id();
  int32_t pipe_id() const;
  void set_pipe_id(int32_t value);
  private:
  int32_t _internal_pipe_id() const;
  void _internal_set_pipe_id(int32_t value);
  public:

  // float read_bw = 2;
  void clear_read_bw();
  float read_bw() const;
  void set_read_bw(float value);
  private:
  float _internal_read_bw() const;
  void _internal_set_read_bw(float value);
  public:

  // float write_bw = 3;
  void clear_write_bw();
  float write_bw() const;
  void set_write_bw(float value);
  private:
  float _internal_write_bw() const;
  void _internal_set_write_bw(float value);
  public:

  // float read_iops = 4;
  void clear_read_iops();
  float read_iops() const;
  void set_read_iops(float value);
  private:
  float _internal_read_iops() const;
  void _internal_set_read_iops(float value);
  public:

  // uint64 recency_counter = 6;
  void clear_recency_counter();
  uint64_t recency_counter() const;
  void set_recency_counter(uint64_t value);
  private:
  uint64_t _internal_recency_counter() const;
  void _internal_set_recency_counter(uint64_t value);
  public:

  // float write_iops = 5;
  void clear_write_iops();
  float write_iops() const;
  void set_write_iops(float value);
  private:
  float _internal_write_iops() const;
  void _internal_set_write_iops(float value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.PipeView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t pipe_id_;
  float read_bw_;
  float write_bw_;
  float read_iops_;
  uint64_t recency_counter_;
  float write_iops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SsdView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.SsdView) */ {
 public:
  inline SsdView() : SsdView(nullptr) {}
  ~SsdView() override;
  explicit constexpr SsdView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SsdView(const SsdView& from);
  SsdView(SsdView&& from) noexcept
    : SsdView() {
    *this = ::std::move(from);
  }

  inline SsdView& operator=(const SsdView& from) {
    CopyFrom(from);
    return *this;
  }
  inline SsdView& operator=(SsdView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SsdView& default_instance() {
    return *internal_default_instance();
  }
  static inline const SsdView* internal_default_instance() {
    return reinterpret_cast<const SsdView*>(
               &_SsdView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SsdView& a, SsdView& b) {
    a.Swap(&b);
  }
  inline void Swap(SsdView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SsdView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SsdView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SsdView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SsdView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SsdView& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SsdView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.SsdView";
  }
  protected:
  explicit SsdView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsdIdFieldNumber = 1,
    kReadBwUsedFieldNumber = 2,
    kWriteBwUsedFieldNumber = 3,
    kReadBwFreeFieldNumber = 4,
    kWriteBwFreeFieldNumber = 5,
    kReadIopsFieldNumber = 6,
    kWriteIopsFieldNumber = 7,
    kFragDegreeFieldNumber = 8,
    kRecencyCounterFieldNumber = 10,
    kWriteCostFieldNumber = 9,
  };
  // int32 ssd_id = 1;
  void clear_ssd_id();
  int32_t ssd_id() const;
  void set_ssd_id(int32_t value);
  private:
  int32_t _internal_ssd_id() const;
  void _internal_set_ssd_id(int32_t value);
  public:

  // float read_bw_used = 2;
  void clear_read_bw_used();
  float read_bw_used() const;
  void set_read_bw_used(float value);
  private:
  float _internal_read_bw_used() const;
  void _internal_set_read_bw_used(float value);
  public:

  // float write_bw_used = 3;
  void clear_write_bw_used();
  float write_bw_used() const;
  void set_write_bw_used(float value);
  private:
  float _internal_write_bw_used() const;
  void _internal_set_write_bw_used(float value);
  public:

  // float read_bw_free = 4;
  void clear_read_bw_free();
  float read_bw_free() const;
  void set_read_bw_free(float value);
  private:
  float _internal_read_bw_free() const;
  void _internal_set_read_bw_free(float value);
  public:

  // float write_bw_free = 5;
  void clear_write_bw_free();
  float write_bw_free() const;
  void set_write_bw_free(float value);
  private:
  float _internal_write_bw_free() const;
  void _internal_set_write_bw_free(float value);
  public:

  // float read_iops = 6;
  void clear_read_iops();
  float read_iops() const;
  void set_read_iops(float value);
  private:
  float _internal_read_iops() const;
  void _internal_set_read_iops(float value);
  public:

  // float write_iops = 7;
  void clear_write_iops();
  float write_iops() const;
  void set_write_iops(float value);
  private:
  float _internal_write_iops() const;
  void _internal_set_write_iops(float value);
  public:

  // float frag_degree = 8;
  void clear_frag_degree();
  float frag_degree() const;
  void set_frag_degree(float value);
  private:
  float _internal_frag_degree() const;
  void _internal_set_frag_degree(float value);
  public:

  // uint64 recency_counter = 10;
  void clear_recency_counter();
  uint64_t recency_counter() const;
  void set_recency_counter(uint64_t value);
  private:
  uint64_t _internal_recency_counter() const;
  void _internal_set_recency_counter(uint64_t value);
  public:

  // float write_cost = 9;
  void clear_write_cost();
  float write_cost() const;
  void set_write_cost(float value);
  private:
  float _internal_write_cost() const;
  void _internal_set_write_cost(float value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.SsdView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t ssd_id_;
  float read_bw_used_;
  float write_bw_used_;
  float read_bw_free_;
  float write_bw_free_;
  float read_iops_;
  float write_iops_;
  float frag_degree_;
  uint64_t recency_counter_;
  float write_cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PartialView_IoPortViewsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PartialView_IoPortViewsEntry_DoNotUse, 
    int32_t, ::FLINT_RPC_MESSAGE::PortView,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PartialView_IoPortViewsEntry_DoNotUse, 
    int32_t, ::FLINT_RPC_MESSAGE::PortView,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PartialView_IoPortViewsEntry_DoNotUse();
  explicit constexpr PartialView_IoPortViewsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PartialView_IoPortViewsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PartialView_IoPortViewsEntry_DoNotUse& other);
  static const PartialView_IoPortViewsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PartialView_IoPortViewsEntry_DoNotUse*>(&_PartialView_IoPortViewsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PartialView_IoPipeViewsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PartialView_IoPipeViewsEntry_DoNotUse, 
    int32_t, ::FLINT_RPC_MESSAGE::PipeView,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PartialView_IoPipeViewsEntry_DoNotUse, 
    int32_t, ::FLINT_RPC_MESSAGE::PipeView,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PartialView_IoPipeViewsEntry_DoNotUse();
  explicit constexpr PartialView_IoPipeViewsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PartialView_IoPipeViewsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PartialView_IoPipeViewsEntry_DoNotUse& other);
  static const PartialView_IoPipeViewsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PartialView_IoPipeViewsEntry_DoNotUse*>(&_PartialView_IoPipeViewsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PartialView_SsdViewsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PartialView_SsdViewsEntry_DoNotUse, 
    int32_t, ::FLINT_RPC_MESSAGE::SsdView,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PartialView_SsdViewsEntry_DoNotUse, 
    int32_t, ::FLINT_RPC_MESSAGE::SsdView,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PartialView_SsdViewsEntry_DoNotUse();
  explicit constexpr PartialView_SsdViewsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PartialView_SsdViewsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PartialView_SsdViewsEntry_DoNotUse& other);
  static const PartialView_SsdViewsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PartialView_SsdViewsEntry_DoNotUse*>(&_PartialView_SsdViewsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PartialView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.PartialView) */ {
 public:
  inline PartialView() : PartialView(nullptr) {}
  ~PartialView() override;
  explicit constexpr PartialView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartialView(const PartialView& from);
  PartialView(PartialView&& from) noexcept
    : PartialView() {
    *this = ::std::move(from);
  }

  inline PartialView& operator=(const PartialView& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartialView& operator=(PartialView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartialView& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartialView* internal_default_instance() {
    return reinterpret_cast<const PartialView*>(
               &_PartialView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PartialView& a, PartialView& b) {
    a.Swap(&b);
  }
  inline void Swap(PartialView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartialView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartialView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartialView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PartialView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PartialView& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartialView* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.PartialView";
  }
  protected:
  explicit PartialView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kIoPortViewsFieldNumber = 3,
    kIoPipeViewsFieldNumber = 4,
    kSsdViewsFieldNumber = 5,
    kNetPortViewFieldNumber = 1,
    kNetPipeViewFieldNumber = 2,
  };
  // map<int32, .FLINT_RPC_MESSAGE.PortView> io_port_views = 3;
  int io_port_views_size() const;
  private:
  int _internal_io_port_views_size() const;
  public:
  void clear_io_port_views();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PortView >&
      _internal_io_port_views() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PortView >*
      _internal_mutable_io_port_views();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PortView >&
      io_port_views() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PortView >*
      mutable_io_port_views();

  // map<int32, .FLINT_RPC_MESSAGE.PipeView> io_pipe_views = 4;
  int io_pipe_views_size() const;
  private:
  int _internal_io_pipe_views_size() const;
  public:
  void clear_io_pipe_views();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PipeView >&
      _internal_io_pipe_views() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PipeView >*
      _internal_mutable_io_pipe_views();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PipeView >&
      io_pipe_views() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PipeView >*
      mutable_io_pipe_views();

  // map<int32, .FLINT_RPC_MESSAGE.SsdView> ssd_views = 5;
  int ssd_views_size() const;
  private:
  int _internal_ssd_views_size() const;
  public:
  void clear_ssd_views();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::SsdView >&
      _internal_ssd_views() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::SsdView >*
      _internal_mutable_ssd_views();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::SsdView >&
      ssd_views() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::SsdView >*
      mutable_ssd_views();

  // .FLINT_RPC_MESSAGE.PortView net_port_view = 1;
  bool has_net_port_view() const;
  private:
  bool _internal_has_net_port_view() const;
  public:
  void clear_net_port_view();
  const ::FLINT_RPC_MESSAGE::PortView& net_port_view() const;
  PROTOBUF_NODISCARD ::FLINT_RPC_MESSAGE::PortView* release_net_port_view();
  ::FLINT_RPC_MESSAGE::PortView* mutable_net_port_view();
  void set_allocated_net_port_view(::FLINT_RPC_MESSAGE::PortView* net_port_view);
  private:
  const ::FLINT_RPC_MESSAGE::PortView& _internal_net_port_view() const;
  ::FLINT_RPC_MESSAGE::PortView* _internal_mutable_net_port_view();
  public:
  void unsafe_arena_set_allocated_net_port_view(
      ::FLINT_RPC_MESSAGE::PortView* net_port_view);
  ::FLINT_RPC_MESSAGE::PortView* unsafe_arena_release_net_port_view();

  // .FLINT_RPC_MESSAGE.PipeView net_pipe_view = 2;
  bool has_net_pipe_view() const;
  private:
  bool _internal_has_net_pipe_view() const;
  public:
  void clear_net_pipe_view();
  const ::FLINT_RPC_MESSAGE::PipeView& net_pipe_view() const;
  PROTOBUF_NODISCARD ::FLINT_RPC_MESSAGE::PipeView* release_net_pipe_view();
  ::FLINT_RPC_MESSAGE::PipeView* mutable_net_pipe_view();
  void set_allocated_net_pipe_view(::FLINT_RPC_MESSAGE::PipeView* net_pipe_view);
  private:
  const ::FLINT_RPC_MESSAGE::PipeView& _internal_net_pipe_view() const;
  ::FLINT_RPC_MESSAGE::PipeView* _internal_mutable_net_pipe_view();
  public:
  void unsafe_arena_set_allocated_net_pipe_view(
      ::FLINT_RPC_MESSAGE::PipeView* net_pipe_view);
  ::FLINT_RPC_MESSAGE::PipeView* unsafe_arena_release_net_pipe_view();

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.PartialView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PartialView_IoPortViewsEntry_DoNotUse,
      int32_t, ::FLINT_RPC_MESSAGE::PortView,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> io_port_views_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PartialView_IoPipeViewsEntry_DoNotUse,
      int32_t, ::FLINT_RPC_MESSAGE::PipeView,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> io_pipe_views_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PartialView_SsdViewsEntry_DoNotUse,
      int32_t, ::FLINT_RPC_MESSAGE::SsdView,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> ssd_views_;
  ::FLINT_RPC_MESSAGE::PortView* net_port_view_;
  ::FLINT_RPC_MESSAGE::PipeView* net_pipe_view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PullViewRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.PullViewRequest) */ {
 public:
  inline PullViewRequest() : PullViewRequest(nullptr) {}
  ~PullViewRequest() override;
  explicit constexpr PullViewRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullViewRequest(const PullViewRequest& from);
  PullViewRequest(PullViewRequest&& from) noexcept
    : PullViewRequest() {
    *this = ::std::move(from);
  }

  inline PullViewRequest& operator=(const PullViewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullViewRequest& operator=(PullViewRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullViewRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullViewRequest* internal_default_instance() {
    return reinterpret_cast<const PullViewRequest*>(
               &_PullViewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PullViewRequest& a, PullViewRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PullViewRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullViewRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullViewRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullViewRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullViewRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PullViewRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullViewRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.PullViewRequest";
  }
  protected:
  explicit PullViewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEbofPortFieldNumber = 1,
  };
  // int32 ebof_port = 1;
  void clear_ebof_port();
  int32_t ebof_port() const;
  void set_ebof_port(int32_t value);
  private:
  int32_t _internal_ebof_port() const;
  void _internal_set_ebof_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.PullViewRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t ebof_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PullViewResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.PullViewResponse) */ {
 public:
  inline PullViewResponse() : PullViewResponse(nullptr) {}
  ~PullViewResponse() override;
  explicit constexpr PullViewResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PullViewResponse(const PullViewResponse& from);
  PullViewResponse(PullViewResponse&& from) noexcept
    : PullViewResponse() {
    *this = ::std::move(from);
  }

  inline PullViewResponse& operator=(const PullViewResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullViewResponse& operator=(PullViewResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PullViewResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PullViewResponse* internal_default_instance() {
    return reinterpret_cast<const PullViewResponse*>(
               &_PullViewResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PullViewResponse& a, PullViewResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PullViewResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PullViewResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PullViewResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PullViewResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PullViewResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PullViewResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullViewResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.PullViewResponse";
  }
  protected:
  explicit PullViewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartialViewFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // .FLINT_RPC_MESSAGE.PartialView partial_view = 2;
  bool has_partial_view() const;
  private:
  bool _internal_has_partial_view() const;
  public:
  void clear_partial_view();
  const ::FLINT_RPC_MESSAGE::PartialView& partial_view() const;
  PROTOBUF_NODISCARD ::FLINT_RPC_MESSAGE::PartialView* release_partial_view();
  ::FLINT_RPC_MESSAGE::PartialView* mutable_partial_view();
  void set_allocated_partial_view(::FLINT_RPC_MESSAGE::PartialView* partial_view);
  private:
  const ::FLINT_RPC_MESSAGE::PartialView& _internal_partial_view() const;
  ::FLINT_RPC_MESSAGE::PartialView* _internal_mutable_partial_view();
  public:
  void unsafe_arena_set_allocated_partial_view(
      ::FLINT_RPC_MESSAGE::PartialView* partial_view);
  ::FLINT_RPC_MESSAGE::PartialView* unsafe_arena_release_partial_view();

  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.PullViewResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::FLINT_RPC_MESSAGE::PartialView* partial_view_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PushViewRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.PushViewRequest) */ {
 public:
  inline PushViewRequest() : PushViewRequest(nullptr) {}
  ~PushViewRequest() override;
  explicit constexpr PushViewRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushViewRequest(const PushViewRequest& from);
  PushViewRequest(PushViewRequest&& from) noexcept
    : PushViewRequest() {
    *this = ::std::move(from);
  }

  inline PushViewRequest& operator=(const PushViewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushViewRequest& operator=(PushViewRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushViewRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushViewRequest* internal_default_instance() {
    return reinterpret_cast<const PushViewRequest*>(
               &_PushViewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(PushViewRequest& a, PushViewRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PushViewRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushViewRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushViewRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushViewRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PushViewRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PushViewRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushViewRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.PushViewRequest";
  }
  protected:
  explicit PushViewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartialViewFieldNumber = 3,
    kEventOpFieldNumber = 1,
    kPortOrSsdFieldNumber = 2,
  };
  // .FLINT_RPC_MESSAGE.PartialView partial_view = 3;
  bool has_partial_view() const;
  private:
  bool _internal_has_partial_view() const;
  public:
  void clear_partial_view();
  const ::FLINT_RPC_MESSAGE::PartialView& partial_view() const;
  PROTOBUF_NODISCARD ::FLINT_RPC_MESSAGE::PartialView* release_partial_view();
  ::FLINT_RPC_MESSAGE::PartialView* mutable_partial_view();
  void set_allocated_partial_view(::FLINT_RPC_MESSAGE::PartialView* partial_view);
  private:
  const ::FLINT_RPC_MESSAGE::PartialView& _internal_partial_view() const;
  ::FLINT_RPC_MESSAGE::PartialView* _internal_mutable_partial_view();
  public:
  void unsafe_arena_set_allocated_partial_view(
      ::FLINT_RPC_MESSAGE::PartialView* partial_view);
  ::FLINT_RPC_MESSAGE::PartialView* unsafe_arena_release_partial_view();

  // int32 event_op = 1;
  void clear_event_op();
  int32_t event_op() const;
  void set_event_op(int32_t value);
  private:
  int32_t _internal_event_op() const;
  void _internal_set_event_op(int32_t value);
  public:

  // int32 port_or_ssd = 2;
  void clear_port_or_ssd();
  int32_t port_or_ssd() const;
  void set_port_or_ssd(int32_t value);
  private:
  int32_t _internal_port_or_ssd() const;
  void _internal_set_port_or_ssd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.PushViewRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::FLINT_RPC_MESSAGE::PartialView* partial_view_;
  int32_t event_op_;
  int32_t port_or_ssd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PushViewResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.PushViewResponse) */ {
 public:
  inline PushViewResponse() : PushViewResponse(nullptr) {}
  ~PushViewResponse() override;
  explicit constexpr PushViewResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushViewResponse(const PushViewResponse& from);
  PushViewResponse(PushViewResponse&& from) noexcept
    : PushViewResponse() {
    *this = ::std::move(from);
  }

  inline PushViewResponse& operator=(const PushViewResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushViewResponse& operator=(PushViewResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushViewResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushViewResponse* internal_default_instance() {
    return reinterpret_cast<const PushViewResponse*>(
               &_PushViewResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(PushViewResponse& a, PushViewResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PushViewResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushViewResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushViewResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushViewResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PushViewResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PushViewResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushViewResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.PushViewResponse";
  }
  protected:
  explicit PushViewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.PushViewResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class IOCompletion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.IOCompletion) */ {
 public:
  inline IOCompletion() : IOCompletion(nullptr) {}
  ~IOCompletion() override;
  explicit constexpr IOCompletion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IOCompletion(const IOCompletion& from);
  IOCompletion(IOCompletion&& from) noexcept
    : IOCompletion() {
    *this = ::std::move(from);
  }

  inline IOCompletion& operator=(const IOCompletion& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOCompletion& operator=(IOCompletion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IOCompletion& default_instance() {
    return *internal_default_instance();
  }
  static inline const IOCompletion* internal_default_instance() {
    return reinterpret_cast<const IOCompletion*>(
               &_IOCompletion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(IOCompletion& a, IOCompletion& b) {
    a.Swap(&b);
  }
  inline void Swap(IOCompletion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IOCompletion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IOCompletion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IOCompletion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IOCompletion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IOCompletion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOCompletion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.IOCompletion";
  }
  protected:
  explicit IOCompletion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsdIdFieldNumber = 1,
    kIoTypeFieldNumber = 2,
    kSizeFieldNumber = 3,
    kLatMicrosecFieldNumber = 4,
    kClientIdFieldNumber = 5,
  };
  // int32 ssd_id = 1;
  void clear_ssd_id();
  int32_t ssd_id() const;
  void set_ssd_id(int32_t value);
  private:
  int32_t _internal_ssd_id() const;
  void _internal_set_ssd_id(int32_t value);
  public:

  // uint32 io_type = 2;
  void clear_io_type();
  uint32_t io_type() const;
  void set_io_type(uint32_t value);
  private:
  uint32_t _internal_io_type() const;
  void _internal_set_io_type(uint32_t value);
  public:

  // uint64 size = 3;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // uint32 lat_microsec = 4;
  void clear_lat_microsec();
  uint32_t lat_microsec() const;
  void set_lat_microsec(uint32_t value);
  private:
  uint32_t _internal_lat_microsec() const;
  void _internal_set_lat_microsec(uint32_t value);
  public:

  // optional int32 client_id = 5;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  int32_t client_id() const;
  void set_client_id(int32_t value);
  private:
  int32_t _internal_client_id() const;
  void _internal_set_client_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.IOCompletion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ssd_id_;
  uint32_t io_type_;
  uint64_t size_;
  uint32_t lat_microsec_;
  int32_t client_id_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ReportCmplRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.ReportCmplRequest) */ {
 public:
  inline ReportCmplRequest() : ReportCmplRequest(nullptr) {}
  ~ReportCmplRequest() override;
  explicit constexpr ReportCmplRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportCmplRequest(const ReportCmplRequest& from);
  ReportCmplRequest(ReportCmplRequest&& from) noexcept
    : ReportCmplRequest() {
    *this = ::std::move(from);
  }

  inline ReportCmplRequest& operator=(const ReportCmplRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportCmplRequest& operator=(ReportCmplRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportCmplRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportCmplRequest* internal_default_instance() {
    return reinterpret_cast<const ReportCmplRequest*>(
               &_ReportCmplRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ReportCmplRequest& a, ReportCmplRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportCmplRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportCmplRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportCmplRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportCmplRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportCmplRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReportCmplRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportCmplRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.ReportCmplRequest";
  }
  protected:
  explicit ReportCmplRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompletionsFieldNumber = 3,
    kClientIdFieldNumber = 1,
    kEbofPortFieldNumber = 2,
    kInSyncWindowFieldNumber = 4,
  };
  // repeated .FLINT_RPC_MESSAGE.IOCompletion completions = 3;
  int completions_size() const;
  private:
  int _internal_completions_size() const;
  public:
  void clear_completions();
  ::FLINT_RPC_MESSAGE::IOCompletion* mutable_completions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::IOCompletion >*
      mutable_completions();
  private:
  const ::FLINT_RPC_MESSAGE::IOCompletion& _internal_completions(int index) const;
  ::FLINT_RPC_MESSAGE::IOCompletion* _internal_add_completions();
  public:
  const ::FLINT_RPC_MESSAGE::IOCompletion& completions(int index) const;
  ::FLINT_RPC_MESSAGE::IOCompletion* add_completions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::IOCompletion >&
      completions() const;

  // int32 client_id = 1;
  void clear_client_id();
  int32_t client_id() const;
  void set_client_id(int32_t value);
  private:
  int32_t _internal_client_id() const;
  void _internal_set_client_id(int32_t value);
  public:

  // int32 ebof_port = 2;
  void clear_ebof_port();
  int32_t ebof_port() const;
  void set_ebof_port(int32_t value);
  private:
  int32_t _internal_ebof_port() const;
  void _internal_set_ebof_port(int32_t value);
  public:

  // bool in_sync_window = 4;
  void clear_in_sync_window();
  bool in_sync_window() const;
  void set_in_sync_window(bool value);
  private:
  bool _internal_in_sync_window() const;
  void _internal_set_in_sync_window(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.ReportCmplRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::IOCompletion > completions_;
  int32_t client_id_;
  int32_t ebof_port_;
  bool in_sync_window_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ViewRecency_IoPortViewRecencyEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ViewRecency_IoPortViewRecencyEntry_DoNotUse, 
    int32_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ViewRecency_IoPortViewRecencyEntry_DoNotUse, 
    int32_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  ViewRecency_IoPortViewRecencyEntry_DoNotUse();
  explicit constexpr ViewRecency_IoPortViewRecencyEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ViewRecency_IoPortViewRecencyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ViewRecency_IoPortViewRecencyEntry_DoNotUse& other);
  static const ViewRecency_IoPortViewRecencyEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ViewRecency_IoPortViewRecencyEntry_DoNotUse*>(&_ViewRecency_IoPortViewRecencyEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ViewRecency_IoPipeViewRecencyEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ViewRecency_IoPipeViewRecencyEntry_DoNotUse, 
    int32_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ViewRecency_IoPipeViewRecencyEntry_DoNotUse, 
    int32_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  ViewRecency_IoPipeViewRecencyEntry_DoNotUse();
  explicit constexpr ViewRecency_IoPipeViewRecencyEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ViewRecency_IoPipeViewRecencyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ViewRecency_IoPipeViewRecencyEntry_DoNotUse& other);
  static const ViewRecency_IoPipeViewRecencyEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ViewRecency_IoPipeViewRecencyEntry_DoNotUse*>(&_ViewRecency_IoPipeViewRecencyEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ViewRecency_SsdViewRecencyEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ViewRecency_SsdViewRecencyEntry_DoNotUse, 
    int32_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ViewRecency_SsdViewRecencyEntry_DoNotUse, 
    int32_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  ViewRecency_SsdViewRecencyEntry_DoNotUse();
  explicit constexpr ViewRecency_SsdViewRecencyEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ViewRecency_SsdViewRecencyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ViewRecency_SsdViewRecencyEntry_DoNotUse& other);
  static const ViewRecency_SsdViewRecencyEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ViewRecency_SsdViewRecencyEntry_DoNotUse*>(&_ViewRecency_SsdViewRecencyEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ViewRecency final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.ViewRecency) */ {
 public:
  inline ViewRecency() : ViewRecency(nullptr) {}
  ~ViewRecency() override;
  explicit constexpr ViewRecency(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewRecency(const ViewRecency& from);
  ViewRecency(ViewRecency&& from) noexcept
    : ViewRecency() {
    *this = ::std::move(from);
  }

  inline ViewRecency& operator=(const ViewRecency& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewRecency& operator=(ViewRecency&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewRecency& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewRecency* internal_default_instance() {
    return reinterpret_cast<const ViewRecency*>(
               &_ViewRecency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ViewRecency& a, ViewRecency& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewRecency* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewRecency* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ViewRecency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ViewRecency>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ViewRecency& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ViewRecency& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewRecency* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.ViewRecency";
  }
  protected:
  explicit ViewRecency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kIoPortViewRecencyFieldNumber = 3,
    kIoPipeViewRecencyFieldNumber = 4,
    kSsdViewRecencyFieldNumber = 5,
    kNetPortViewRecencyFieldNumber = 1,
    kNetPipeViewRecencyFieldNumber = 2,
  };
  // map<int32, uint64> io_port_view_recency = 3;
  int io_port_view_recency_size() const;
  private:
  int _internal_io_port_view_recency_size() const;
  public:
  void clear_io_port_view_recency();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
      _internal_io_port_view_recency() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
      _internal_mutable_io_port_view_recency();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
      io_port_view_recency() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
      mutable_io_port_view_recency();

  // map<int32, uint64> io_pipe_view_recency = 4;
  int io_pipe_view_recency_size() const;
  private:
  int _internal_io_pipe_view_recency_size() const;
  public:
  void clear_io_pipe_view_recency();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
      _internal_io_pipe_view_recency() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
      _internal_mutable_io_pipe_view_recency();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
      io_pipe_view_recency() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
      mutable_io_pipe_view_recency();

  // map<int32, uint64> ssd_view_recency = 5;
  int ssd_view_recency_size() const;
  private:
  int _internal_ssd_view_recency_size() const;
  public:
  void clear_ssd_view_recency();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
      _internal_ssd_view_recency() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
      _internal_mutable_ssd_view_recency();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
      ssd_view_recency() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
      mutable_ssd_view_recency();

  // uint64 net_port_view_recency = 1;
  void clear_net_port_view_recency();
  uint64_t net_port_view_recency() const;
  void set_net_port_view_recency(uint64_t value);
  private:
  uint64_t _internal_net_port_view_recency() const;
  void _internal_set_net_port_view_recency(uint64_t value);
  public:

  // uint64 net_pipe_view_recency = 2;
  void clear_net_pipe_view_recency();
  uint64_t net_pipe_view_recency() const;
  void set_net_pipe_view_recency(uint64_t value);
  private:
  uint64_t _internal_net_pipe_view_recency() const;
  void _internal_set_net_pipe_view_recency(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.ViewRecency)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ViewRecency_IoPortViewRecencyEntry_DoNotUse,
      int32_t, uint64_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> io_port_view_recency_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ViewRecency_IoPipeViewRecencyEntry_DoNotUse,
      int32_t, uint64_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> io_pipe_view_recency_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ViewRecency_SsdViewRecencyEntry_DoNotUse,
      int32_t, uint64_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> ssd_view_recency_;
  uint64_t net_port_view_recency_;
  uint64_t net_pipe_view_recency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ReportCmplResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.ReportCmplResponse) */ {
 public:
  inline ReportCmplResponse() : ReportCmplResponse(nullptr) {}
  ~ReportCmplResponse() override;
  explicit constexpr ReportCmplResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportCmplResponse(const ReportCmplResponse& from);
  ReportCmplResponse(ReportCmplResponse&& from) noexcept
    : ReportCmplResponse() {
    *this = ::std::move(from);
  }

  inline ReportCmplResponse& operator=(const ReportCmplResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportCmplResponse& operator=(ReportCmplResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportCmplResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportCmplResponse* internal_default_instance() {
    return reinterpret_cast<const ReportCmplResponse*>(
               &_ReportCmplResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ReportCmplResponse& a, ReportCmplResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportCmplResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportCmplResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportCmplResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportCmplResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportCmplResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReportCmplResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportCmplResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.ReportCmplResponse";
  }
  protected:
  explicit ReportCmplResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewRecencyFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // optional .FLINT_RPC_MESSAGE.ViewRecency view_recency = 2;
  bool has_view_recency() const;
  private:
  bool _internal_has_view_recency() const;
  public:
  void clear_view_recency();
  const ::FLINT_RPC_MESSAGE::ViewRecency& view_recency() const;
  PROTOBUF_NODISCARD ::FLINT_RPC_MESSAGE::ViewRecency* release_view_recency();
  ::FLINT_RPC_MESSAGE::ViewRecency* mutable_view_recency();
  void set_allocated_view_recency(::FLINT_RPC_MESSAGE::ViewRecency* view_recency);
  private:
  const ::FLINT_RPC_MESSAGE::ViewRecency& _internal_view_recency() const;
  ::FLINT_RPC_MESSAGE::ViewRecency* _internal_mutable_view_recency();
  public:
  void unsafe_arena_set_allocated_view_recency(
      ::FLINT_RPC_MESSAGE::ViewRecency* view_recency);
  ::FLINT_RPC_MESSAGE::ViewRecency* unsafe_arena_release_view_recency();

  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.ReportCmplResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::FLINT_RPC_MESSAGE::ViewRecency* view_recency_;
  int32_t err_code_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class EventCallback final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.EventCallback) */ {
 public:
  inline EventCallback() : EventCallback(nullptr) {}
  ~EventCallback() override;
  explicit constexpr EventCallback(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventCallback(const EventCallback& from);
  EventCallback(EventCallback&& from) noexcept
    : EventCallback() {
    *this = ::std::move(from);
  }

  inline EventCallback& operator=(const EventCallback& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventCallback& operator=(EventCallback&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventCallback& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventCallback* internal_default_instance() {
    return reinterpret_cast<const EventCallback*>(
               &_EventCallback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(EventCallback& a, EventCallback& b) {
    a.Swap(&b);
  }
  inline void Swap(EventCallback* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventCallback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventCallback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventCallback>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventCallback& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EventCallback& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventCallback* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.EventCallback";
  }
  protected:
  explicit EventCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
    kThresholdFieldNumber = 2,
    kPortOrSsdFieldNumber = 3,
    kIoTypeFieldNumber = 4,
    kCmpOpFieldNumber = 5,
  };
  // int32 op = 1;
  void clear_op();
  int32_t op() const;
  void set_op(int32_t value);
  private:
  int32_t _internal_op() const;
  void _internal_set_op(int32_t value);
  public:

  // float threshold = 2;
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);
  private:
  float _internal_threshold() const;
  void _internal_set_threshold(float value);
  public:

  // int32 port_or_ssd = 3;
  void clear_port_or_ssd();
  int32_t port_or_ssd() const;
  void set_port_or_ssd(int32_t value);
  private:
  int32_t _internal_port_or_ssd() const;
  void _internal_set_port_or_ssd(int32_t value);
  public:

  // int32 io_type = 4;
  void clear_io_type();
  int32_t io_type() const;
  void set_io_type(int32_t value);
  private:
  int32_t _internal_io_type() const;
  void _internal_set_io_type(int32_t value);
  public:

  // int32 cmp_op = 5;
  void clear_cmp_op();
  int32_t cmp_op() const;
  void set_cmp_op(int32_t value);
  private:
  int32_t _internal_cmp_op() const;
  void _internal_set_cmp_op(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.EventCallback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t op_;
  float threshold_;
  int32_t port_or_ssd_;
  int32_t io_type_;
  int32_t cmp_op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RegisterEventCallbackRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest) */ {
 public:
  inline RegisterEventCallbackRequest() : RegisterEventCallbackRequest(nullptr) {}
  ~RegisterEventCallbackRequest() override;
  explicit constexpr RegisterEventCallbackRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterEventCallbackRequest(const RegisterEventCallbackRequest& from);
  RegisterEventCallbackRequest(RegisterEventCallbackRequest&& from) noexcept
    : RegisterEventCallbackRequest() {
    *this = ::std::move(from);
  }

  inline RegisterEventCallbackRequest& operator=(const RegisterEventCallbackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterEventCallbackRequest& operator=(RegisterEventCallbackRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterEventCallbackRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterEventCallbackRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterEventCallbackRequest*>(
               &_RegisterEventCallbackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(RegisterEventCallbackRequest& a, RegisterEventCallbackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterEventCallbackRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterEventCallbackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterEventCallbackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterEventCallbackRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterEventCallbackRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterEventCallbackRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterEventCallbackRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.RegisterEventCallbackRequest";
  }
  protected:
  explicit RegisterEventCallbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallbacksFieldNumber = 2,
    kClientIdFieldNumber = 1,
  };
  // repeated .FLINT_RPC_MESSAGE.EventCallback callbacks = 2;
  int callbacks_size() const;
  private:
  int _internal_callbacks_size() const;
  public:
  void clear_callbacks();
  ::FLINT_RPC_MESSAGE::EventCallback* mutable_callbacks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::EventCallback >*
      mutable_callbacks();
  private:
  const ::FLINT_RPC_MESSAGE::EventCallback& _internal_callbacks(int index) const;
  ::FLINT_RPC_MESSAGE::EventCallback* _internal_add_callbacks();
  public:
  const ::FLINT_RPC_MESSAGE::EventCallback& callbacks(int index) const;
  ::FLINT_RPC_MESSAGE::EventCallback* add_callbacks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::EventCallback >&
      callbacks() const;

  // int32 client_id = 1;
  void clear_client_id();
  int32_t client_id() const;
  void set_client_id(int32_t value);
  private:
  int32_t _internal_client_id() const;
  void _internal_set_client_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::EventCallback > callbacks_;
  int32_t client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RegisterEventCallbackResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.RegisterEventCallbackResponse) */ {
 public:
  inline RegisterEventCallbackResponse() : RegisterEventCallbackResponse(nullptr) {}
  ~RegisterEventCallbackResponse() override;
  explicit constexpr RegisterEventCallbackResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterEventCallbackResponse(const RegisterEventCallbackResponse& from);
  RegisterEventCallbackResponse(RegisterEventCallbackResponse&& from) noexcept
    : RegisterEventCallbackResponse() {
    *this = ::std::move(from);
  }

  inline RegisterEventCallbackResponse& operator=(const RegisterEventCallbackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterEventCallbackResponse& operator=(RegisterEventCallbackResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterEventCallbackResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterEventCallbackResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterEventCallbackResponse*>(
               &_RegisterEventCallbackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(RegisterEventCallbackResponse& a, RegisterEventCallbackResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterEventCallbackResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterEventCallbackResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterEventCallbackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterEventCallbackResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterEventCallbackResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterEventCallbackResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterEventCallbackResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.RegisterEventCallbackResponse";
  }
  protected:
  explicit RegisterEventCallbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.RegisterEventCallbackResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class BottleneckReportRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.BottleneckReportRequest) */ {
 public:
  inline BottleneckReportRequest() : BottleneckReportRequest(nullptr) {}
  ~BottleneckReportRequest() override;
  explicit constexpr BottleneckReportRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BottleneckReportRequest(const BottleneckReportRequest& from);
  BottleneckReportRequest(BottleneckReportRequest&& from) noexcept
    : BottleneckReportRequest() {
    *this = ::std::move(from);
  }

  inline BottleneckReportRequest& operator=(const BottleneckReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BottleneckReportRequest& operator=(BottleneckReportRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BottleneckReportRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BottleneckReportRequest* internal_default_instance() {
    return reinterpret_cast<const BottleneckReportRequest*>(
               &_BottleneckReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(BottleneckReportRequest& a, BottleneckReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BottleneckReportRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BottleneckReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BottleneckReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BottleneckReportRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BottleneckReportRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BottleneckReportRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BottleneckReportRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.BottleneckReportRequest";
  }
  protected:
  explicit BottleneckReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCongestedSsdsFieldNumber = 1,
  };
  // repeated int32 congested_ssds = 1;
  int congested_ssds_size() const;
  private:
  int _internal_congested_ssds_size() const;
  public:
  void clear_congested_ssds();
  private:
  int32_t _internal_congested_ssds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_congested_ssds() const;
  void _internal_add_congested_ssds(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_congested_ssds();
  public:
  int32_t congested_ssds(int index) const;
  void set_congested_ssds(int index, int32_t value);
  void add_congested_ssds(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      congested_ssds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_congested_ssds();

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.BottleneckReportRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > congested_ssds_;
  mutable std::atomic<int> _congested_ssds_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class BottleneckReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.BottleneckReportResponse) */ {
 public:
  inline BottleneckReportResponse() : BottleneckReportResponse(nullptr) {}
  ~BottleneckReportResponse() override;
  explicit constexpr BottleneckReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BottleneckReportResponse(const BottleneckReportResponse& from);
  BottleneckReportResponse(BottleneckReportResponse&& from) noexcept
    : BottleneckReportResponse() {
    *this = ::std::move(from);
  }

  inline BottleneckReportResponse& operator=(const BottleneckReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BottleneckReportResponse& operator=(BottleneckReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BottleneckReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BottleneckReportResponse* internal_default_instance() {
    return reinterpret_cast<const BottleneckReportResponse*>(
               &_BottleneckReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(BottleneckReportResponse& a, BottleneckReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BottleneckReportResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BottleneckReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BottleneckReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BottleneckReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BottleneckReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BottleneckReportResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BottleneckReportResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.BottleneckReportResponse";
  }
  protected:
  explicit BottleneckReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.BottleneckReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t err_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestIOSliceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.RequestIOSliceRequest) */ {
 public:
  inline RequestIOSliceRequest() : RequestIOSliceRequest(nullptr) {}
  ~RequestIOSliceRequest() override;
  explicit constexpr RequestIOSliceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestIOSliceRequest(const RequestIOSliceRequest& from);
  RequestIOSliceRequest(RequestIOSliceRequest&& from) noexcept
    : RequestIOSliceRequest() {
    *this = ::std::move(from);
  }

  inline RequestIOSliceRequest& operator=(const RequestIOSliceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestIOSliceRequest& operator=(RequestIOSliceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestIOSliceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestIOSliceRequest* internal_default_instance() {
    return reinterpret_cast<const RequestIOSliceRequest*>(
               &_RequestIOSliceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(RequestIOSliceRequest& a, RequestIOSliceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestIOSliceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestIOSliceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestIOSliceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestIOSliceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestIOSliceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestIOSliceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestIOSliceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.RequestIOSliceRequest";
  }
  protected:
  explicit RequestIOSliceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSsdIdFieldNumber = 2,
    kLastEpochFieldNumber = 3,
  };
  // int32 client_id = 1;
  void clear_client_id();
  int32_t client_id() const;
  void set_client_id(int32_t value);
  private:
  int32_t _internal_client_id() const;
  void _internal_set_client_id(int32_t value);
  public:

  // int32 ssd_id = 2;
  void clear_ssd_id();
  int32_t ssd_id() const;
  void set_ssd_id(int32_t value);
  private:
  int32_t _internal_ssd_id() const;
  void _internal_set_ssd_id(int32_t value);
  public:

  // int32 last_epoch = 3;
  void clear_last_epoch();
  int32_t last_epoch() const;
  void set_last_epoch(int32_t value);
  private:
  int32_t _internal_last_epoch() const;
  void _internal_set_last_epoch(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.RequestIOSliceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t client_id_;
  int32_t ssd_id_;
  int32_t last_epoch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestIOSliceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FLINT_RPC_MESSAGE.RequestIOSliceResponse) */ {
 public:
  inline RequestIOSliceResponse() : RequestIOSliceResponse(nullptr) {}
  ~RequestIOSliceResponse() override;
  explicit constexpr RequestIOSliceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestIOSliceResponse(const RequestIOSliceResponse& from);
  RequestIOSliceResponse(RequestIOSliceResponse&& from) noexcept
    : RequestIOSliceResponse() {
    *this = ::std::move(from);
  }

  inline RequestIOSliceResponse& operator=(const RequestIOSliceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestIOSliceResponse& operator=(RequestIOSliceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestIOSliceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestIOSliceResponse* internal_default_instance() {
    return reinterpret_cast<const RequestIOSliceResponse*>(
               &_RequestIOSliceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(RequestIOSliceResponse& a, RequestIOSliceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestIOSliceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestIOSliceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestIOSliceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestIOSliceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestIOSliceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestIOSliceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestIOSliceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FLINT_RPC_MESSAGE.RequestIOSliceResponse";
  }
  protected:
  explicit RequestIOSliceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
    kSliceSizeFieldNumber = 2,
    kEpochFieldNumber = 3,
    kWaitTimeFieldNumber = 4,
  };
  // int32 err_code = 1;
  void clear_err_code();
  int32_t err_code() const;
  void set_err_code(int32_t value);
  private:
  int32_t _internal_err_code() const;
  void _internal_set_err_code(int32_t value);
  public:

  // int32 slice_size = 2;
  void clear_slice_size();
  int32_t slice_size() const;
  void set_slice_size(int32_t value);
  private:
  int32_t _internal_slice_size() const;
  void _internal_set_slice_size(int32_t value);
  public:

  // int32 epoch = 3;
  void clear_epoch();
  int32_t epoch() const;
  void set_epoch(int32_t value);
  private:
  int32_t _internal_epoch() const;
  void _internal_set_epoch(int32_t value);
  public:

  // int32 wait_time = 4;
  void clear_wait_time();
  int32_t wait_time() const;
  void set_wait_time(int32_t value);
  private:
  int32_t _internal_wait_time() const;
  void _internal_set_wait_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FLINT_RPC_MESSAGE.RequestIOSliceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t err_code_;
  int32_t slice_size_;
  int32_t epoch_;
  int32_t wait_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetFlintMetadataRequest

// string hostname = 1;
inline void GetFlintMetadataRequest::clear_hostname() {
  hostname_.ClearToEmpty();
}
inline const std::string& GetFlintMetadataRequest::hostname() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.GetFlintMetadataRequest.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFlintMetadataRequest::set_hostname(ArgT0&& arg0, ArgT... args) {
 
 hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.GetFlintMetadataRequest.hostname)
}
inline std::string* GetFlintMetadataRequest::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.GetFlintMetadataRequest.hostname)
  return _s;
}
inline const std::string& GetFlintMetadataRequest::_internal_hostname() const {
  return hostname_.Get();
}
inline void GetFlintMetadataRequest::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetFlintMetadataRequest::_internal_mutable_hostname() {
  
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetFlintMetadataRequest::release_hostname() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.GetFlintMetadataRequest.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetFlintMetadataRequest::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.GetFlintMetadataRequest.hostname)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FlintMetadata

// int32 ebof_port = 1;
inline void FlintMetadata::clear_ebof_port() {
  ebof_port_ = 0;
}
inline int32_t FlintMetadata::_internal_ebof_port() const {
  return ebof_port_;
}
inline int32_t FlintMetadata::ebof_port() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.FlintMetadata.ebof_port)
  return _internal_ebof_port();
}
inline void FlintMetadata::_internal_set_ebof_port(int32_t value) {
  
  ebof_port_ = value;
}
inline void FlintMetadata::set_ebof_port(int32_t value) {
  _internal_set_ebof_port(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.FlintMetadata.ebof_port)
}

// map<string, uint32> ssd_id_map = 2;
inline int FlintMetadata::_internal_ssd_id_map_size() const {
  return ssd_id_map_.size();
}
inline int FlintMetadata::ssd_id_map_size() const {
  return _internal_ssd_id_map_size();
}
inline void FlintMetadata::clear_ssd_id_map() {
  ssd_id_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
FlintMetadata::_internal_ssd_id_map() const {
  return ssd_id_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
FlintMetadata::ssd_id_map() const {
  // @@protoc_insertion_point(field_map:FLINT_RPC_MESSAGE.FlintMetadata.ssd_id_map)
  return _internal_ssd_id_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
FlintMetadata::_internal_mutable_ssd_id_map() {
  return ssd_id_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
FlintMetadata::mutable_ssd_id_map() {
  // @@protoc_insertion_point(field_mutable_map:FLINT_RPC_MESSAGE.FlintMetadata.ssd_id_map)
  return _internal_mutable_ssd_id_map();
}

// int32 nic_ports_num = 3;
inline void FlintMetadata::clear_nic_ports_num() {
  nic_ports_num_ = 0;
}
inline int32_t FlintMetadata::_internal_nic_ports_num() const {
  return nic_ports_num_;
}
inline int32_t FlintMetadata::nic_ports_num() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.FlintMetadata.nic_ports_num)
  return _internal_nic_ports_num();
}
inline void FlintMetadata::_internal_set_nic_ports_num(int32_t value) {
  
  nic_ports_num_ = value;
}
inline void FlintMetadata::set_nic_ports_num(int32_t value) {
  _internal_set_nic_ports_num(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.FlintMetadata.nic_ports_num)
}

// -------------------------------------------------------------------

// GetFlintMetadataResponse

// int32 err_code = 1;
inline void GetFlintMetadataResponse::clear_err_code() {
  err_code_ = 0;
}
inline int32_t GetFlintMetadataResponse::_internal_err_code() const {
  return err_code_;
}
inline int32_t GetFlintMetadataResponse::err_code() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.GetFlintMetadataResponse.err_code)
  return _internal_err_code();
}
inline void GetFlintMetadataResponse::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void GetFlintMetadataResponse::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.GetFlintMetadataResponse.err_code)
}

// string err_message = 2;
inline void GetFlintMetadataResponse::clear_err_message() {
  err_message_.ClearToEmpty();
}
inline const std::string& GetFlintMetadataResponse::err_message() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.GetFlintMetadataResponse.err_message)
  return _internal_err_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFlintMetadataResponse::set_err_message(ArgT0&& arg0, ArgT... args) {
 
 err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.GetFlintMetadataResponse.err_message)
}
inline std::string* GetFlintMetadataResponse::mutable_err_message() {
  std::string* _s = _internal_mutable_err_message();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.GetFlintMetadataResponse.err_message)
  return _s;
}
inline const std::string& GetFlintMetadataResponse::_internal_err_message() const {
  return err_message_.Get();
}
inline void GetFlintMetadataResponse::_internal_set_err_message(const std::string& value) {
  
  err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetFlintMetadataResponse::_internal_mutable_err_message() {
  
  return err_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetFlintMetadataResponse::release_err_message() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.GetFlintMetadataResponse.err_message)
  return err_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetFlintMetadataResponse::set_allocated_err_message(std::string* err_message) {
  if (err_message != nullptr) {
    
  } else {
    
  }
  err_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.GetFlintMetadataResponse.err_message)
}

// .FLINT_RPC_MESSAGE.FlintMetadata metadata = 3;
inline bool GetFlintMetadataResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool GetFlintMetadataResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void GetFlintMetadataResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::FLINT_RPC_MESSAGE::FlintMetadata& GetFlintMetadataResponse::_internal_metadata() const {
  const ::FLINT_RPC_MESSAGE::FlintMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::FLINT_RPC_MESSAGE::FlintMetadata&>(
      ::FLINT_RPC_MESSAGE::_FlintMetadata_default_instance_);
}
inline const ::FLINT_RPC_MESSAGE::FlintMetadata& GetFlintMetadataResponse::metadata() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.GetFlintMetadataResponse.metadata)
  return _internal_metadata();
}
inline void GetFlintMetadataResponse::unsafe_arena_set_allocated_metadata(
    ::FLINT_RPC_MESSAGE::FlintMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FLINT_RPC_MESSAGE.GetFlintMetadataResponse.metadata)
}
inline ::FLINT_RPC_MESSAGE::FlintMetadata* GetFlintMetadataResponse::release_metadata() {
  
  ::FLINT_RPC_MESSAGE::FlintMetadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FLINT_RPC_MESSAGE::FlintMetadata* GetFlintMetadataResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.GetFlintMetadataResponse.metadata)
  
  ::FLINT_RPC_MESSAGE::FlintMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::FLINT_RPC_MESSAGE::FlintMetadata* GetFlintMetadataResponse::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::FLINT_RPC_MESSAGE::FlintMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::FLINT_RPC_MESSAGE::FlintMetadata* GetFlintMetadataResponse::mutable_metadata() {
  ::FLINT_RPC_MESSAGE::FlintMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.GetFlintMetadataResponse.metadata)
  return _msg;
}
inline void GetFlintMetadataResponse::set_allocated_metadata(::FLINT_RPC_MESSAGE::FlintMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FLINT_RPC_MESSAGE::FlintMetadata>::GetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.GetFlintMetadataResponse.metadata)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateVolumeRequest

// string name = 1;
inline void CreateVolumeRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateVolumeRequest::name() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.CreateVolumeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateVolumeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.CreateVolumeRequest.name)
}
inline std::string* CreateVolumeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.CreateVolumeRequest.name)
  return _s;
}
inline const std::string& CreateVolumeRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateVolumeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateVolumeRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateVolumeRequest::release_name() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.CreateVolumeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateVolumeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.CreateVolumeRequest.name)
}

// uint64 size = 2;
inline void CreateVolumeRequest::clear_size() {
  size_ = uint64_t{0u};
}
inline uint64_t CreateVolumeRequest::_internal_size() const {
  return size_;
}
inline uint64_t CreateVolumeRequest::size() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.CreateVolumeRequest.size)
  return _internal_size();
}
inline void CreateVolumeRequest::_internal_set_size(uint64_t value) {
  
  size_ = value;
}
inline void CreateVolumeRequest::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.CreateVolumeRequest.size)
}

// uint32 rep_factor = 3;
inline void CreateVolumeRequest::clear_rep_factor() {
  rep_factor_ = 0u;
}
inline uint32_t CreateVolumeRequest::_internal_rep_factor() const {
  return rep_factor_;
}
inline uint32_t CreateVolumeRequest::rep_factor() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.CreateVolumeRequest.rep_factor)
  return _internal_rep_factor();
}
inline void CreateVolumeRequest::_internal_set_rep_factor(uint32_t value) {
  
  rep_factor_ = value;
}
inline void CreateVolumeRequest::set_rep_factor(uint32_t value) {
  _internal_set_rep_factor(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.CreateVolumeRequest.rep_factor)
}

// uint32 flags = 4;
inline void CreateVolumeRequest::clear_flags() {
  flags_ = 0u;
}
inline uint32_t CreateVolumeRequest::_internal_flags() const {
  return flags_;
}
inline uint32_t CreateVolumeRequest::flags() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.CreateVolumeRequest.flags)
  return _internal_flags();
}
inline void CreateVolumeRequest::_internal_set_flags(uint32_t value) {
  
  flags_ = value;
}
inline void CreateVolumeRequest::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.CreateVolumeRequest.flags)
}

// map<string, float> ssd_preference = 5;
inline int CreateVolumeRequest::_internal_ssd_preference_size() const {
  return ssd_preference_.size();
}
inline int CreateVolumeRequest::ssd_preference_size() const {
  return _internal_ssd_preference_size();
}
inline void CreateVolumeRequest::clear_ssd_preference() {
  ssd_preference_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
CreateVolumeRequest::_internal_ssd_preference() const {
  return ssd_preference_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
CreateVolumeRequest::ssd_preference() const {
  // @@protoc_insertion_point(field_map:FLINT_RPC_MESSAGE.CreateVolumeRequest.ssd_preference)
  return _internal_ssd_preference();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
CreateVolumeRequest::_internal_mutable_ssd_preference() {
  return ssd_preference_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
CreateVolumeRequest::mutable_ssd_preference() {
  // @@protoc_insertion_point(field_mutable_map:FLINT_RPC_MESSAGE.CreateVolumeRequest.ssd_preference)
  return _internal_mutable_ssd_preference();
}

// uint32 policy = 6;
inline void CreateVolumeRequest::clear_policy() {
  policy_ = 0u;
}
inline uint32_t CreateVolumeRequest::_internal_policy() const {
  return policy_;
}
inline uint32_t CreateVolumeRequest::policy() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.CreateVolumeRequest.policy)
  return _internal_policy();
}
inline void CreateVolumeRequest::_internal_set_policy(uint32_t value) {
  
  policy_ = value;
}
inline void CreateVolumeRequest::set_policy(uint32_t value) {
  _internal_set_policy(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.CreateVolumeRequest.policy)
}

// -------------------------------------------------------------------

// CreateVolumeResponse

// int32 err_code = 1;
inline void CreateVolumeResponse::clear_err_code() {
  err_code_ = 0;
}
inline int32_t CreateVolumeResponse::_internal_err_code() const {
  return err_code_;
}
inline int32_t CreateVolumeResponse::err_code() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.CreateVolumeResponse.err_code)
  return _internal_err_code();
}
inline void CreateVolumeResponse::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void CreateVolumeResponse::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.CreateVolumeResponse.err_code)
}

// string err_message = 2;
inline void CreateVolumeResponse::clear_err_message() {
  err_message_.ClearToEmpty();
}
inline const std::string& CreateVolumeResponse::err_message() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.CreateVolumeResponse.err_message)
  return _internal_err_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateVolumeResponse::set_err_message(ArgT0&& arg0, ArgT... args) {
 
 err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.CreateVolumeResponse.err_message)
}
inline std::string* CreateVolumeResponse::mutable_err_message() {
  std::string* _s = _internal_mutable_err_message();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.CreateVolumeResponse.err_message)
  return _s;
}
inline const std::string& CreateVolumeResponse::_internal_err_message() const {
  return err_message_.Get();
}
inline void CreateVolumeResponse::_internal_set_err_message(const std::string& value) {
  
  err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateVolumeResponse::_internal_mutable_err_message() {
  
  return err_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateVolumeResponse::release_err_message() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.CreateVolumeResponse.err_message)
  return err_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateVolumeResponse::set_allocated_err_message(std::string* err_message) {
  if (err_message != nullptr) {
    
  } else {
    
  }
  err_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.CreateVolumeResponse.err_message)
}

// -------------------------------------------------------------------

// OpenVolumeRequest

// string name = 1;
inline void OpenVolumeRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OpenVolumeRequest::name() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.OpenVolumeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenVolumeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.OpenVolumeRequest.name)
}
inline std::string* OpenVolumeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.OpenVolumeRequest.name)
  return _s;
}
inline const std::string& OpenVolumeRequest::_internal_name() const {
  return name_.Get();
}
inline void OpenVolumeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenVolumeRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenVolumeRequest::release_name() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.OpenVolumeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenVolumeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.OpenVolumeRequest.name)
}

// -------------------------------------------------------------------

// ExtentLocator

// uint32 rep_role = 1;
inline void ExtentLocator::clear_rep_role() {
  rep_role_ = 0u;
}
inline uint32_t ExtentLocator::_internal_rep_role() const {
  return rep_role_;
}
inline uint32_t ExtentLocator::rep_role() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ExtentLocator.rep_role)
  return _internal_rep_role();
}
inline void ExtentLocator::_internal_set_rep_role(uint32_t value) {
  
  rep_role_ = value;
}
inline void ExtentLocator::set_rep_role(uint32_t value) {
  _internal_set_rep_role(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.ExtentLocator.rep_role)
}

// uint32 ssd_id = 2;
inline void ExtentLocator::clear_ssd_id() {
  ssd_id_ = 0u;
}
inline uint32_t ExtentLocator::_internal_ssd_id() const {
  return ssd_id_;
}
inline uint32_t ExtentLocator::ssd_id() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ExtentLocator.ssd_id)
  return _internal_ssd_id();
}
inline void ExtentLocator::_internal_set_ssd_id(uint32_t value) {
  
  ssd_id_ = value;
}
inline void ExtentLocator::set_ssd_id(uint32_t value) {
  _internal_set_ssd_id(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.ExtentLocator.ssd_id)
}

// uint32 pext_num = 3;
inline void ExtentLocator::clear_pext_num() {
  pext_num_ = 0u;
}
inline uint32_t ExtentLocator::_internal_pext_num() const {
  return pext_num_;
}
inline uint32_t ExtentLocator::pext_num() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ExtentLocator.pext_num)
  return _internal_pext_num();
}
inline void ExtentLocator::_internal_set_pext_num(uint32_t value) {
  
  pext_num_ = value;
}
inline void ExtentLocator::set_pext_num(uint32_t value) {
  _internal_set_pext_num(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.ExtentLocator.pext_num)
}

// -------------------------------------------------------------------

// ExtentLocators

// repeated .FLINT_RPC_MESSAGE.ExtentLocator locators = 1;
inline int ExtentLocators::_internal_locators_size() const {
  return locators_.size();
}
inline int ExtentLocators::locators_size() const {
  return _internal_locators_size();
}
inline void ExtentLocators::clear_locators() {
  locators_.Clear();
}
inline ::FLINT_RPC_MESSAGE::ExtentLocator* ExtentLocators::mutable_locators(int index) {
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.ExtentLocators.locators)
  return locators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::ExtentLocator >*
ExtentLocators::mutable_locators() {
  // @@protoc_insertion_point(field_mutable_list:FLINT_RPC_MESSAGE.ExtentLocators.locators)
  return &locators_;
}
inline const ::FLINT_RPC_MESSAGE::ExtentLocator& ExtentLocators::_internal_locators(int index) const {
  return locators_.Get(index);
}
inline const ::FLINT_RPC_MESSAGE::ExtentLocator& ExtentLocators::locators(int index) const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ExtentLocators.locators)
  return _internal_locators(index);
}
inline ::FLINT_RPC_MESSAGE::ExtentLocator* ExtentLocators::_internal_add_locators() {
  return locators_.Add();
}
inline ::FLINT_RPC_MESSAGE::ExtentLocator* ExtentLocators::add_locators() {
  ::FLINT_RPC_MESSAGE::ExtentLocator* _add = _internal_add_locators();
  // @@protoc_insertion_point(field_add:FLINT_RPC_MESSAGE.ExtentLocators.locators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::ExtentLocator >&
ExtentLocators::locators() const {
  // @@protoc_insertion_point(field_list:FLINT_RPC_MESSAGE.ExtentLocators.locators)
  return locators_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OpenVolumeResponse

// int32 err_code = 1;
inline void OpenVolumeResponse::clear_err_code() {
  err_code_ = 0;
}
inline int32_t OpenVolumeResponse::_internal_err_code() const {
  return err_code_;
}
inline int32_t OpenVolumeResponse::err_code() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.OpenVolumeResponse.err_code)
  return _internal_err_code();
}
inline void OpenVolumeResponse::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void OpenVolumeResponse::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.OpenVolumeResponse.err_code)
}

// string err_message = 2;
inline void OpenVolumeResponse::clear_err_message() {
  err_message_.ClearToEmpty();
}
inline const std::string& OpenVolumeResponse::err_message() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.OpenVolumeResponse.err_message)
  return _internal_err_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OpenVolumeResponse::set_err_message(ArgT0&& arg0, ArgT... args) {
 
 err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.OpenVolumeResponse.err_message)
}
inline std::string* OpenVolumeResponse::mutable_err_message() {
  std::string* _s = _internal_mutable_err_message();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.OpenVolumeResponse.err_message)
  return _s;
}
inline const std::string& OpenVolumeResponse::_internal_err_message() const {
  return err_message_.Get();
}
inline void OpenVolumeResponse::_internal_set_err_message(const std::string& value) {
  
  err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OpenVolumeResponse::_internal_mutable_err_message() {
  
  return err_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OpenVolumeResponse::release_err_message() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.OpenVolumeResponse.err_message)
  return err_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OpenVolumeResponse::set_allocated_err_message(std::string* err_message) {
  if (err_message != nullptr) {
    
  } else {
    
  }
  err_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.OpenVolumeResponse.err_message)
}

// uint64 size = 3;
inline void OpenVolumeResponse::clear_size() {
  size_ = uint64_t{0u};
}
inline uint64_t OpenVolumeResponse::_internal_size() const {
  return size_;
}
inline uint64_t OpenVolumeResponse::size() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.OpenVolumeResponse.size)
  return _internal_size();
}
inline void OpenVolumeResponse::_internal_set_size(uint64_t value) {
  
  size_ = value;
}
inline void OpenVolumeResponse::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.OpenVolumeResponse.size)
}

// uint32 rep_factor = 4;
inline void OpenVolumeResponse::clear_rep_factor() {
  rep_factor_ = 0u;
}
inline uint32_t OpenVolumeResponse::_internal_rep_factor() const {
  return rep_factor_;
}
inline uint32_t OpenVolumeResponse::rep_factor() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.OpenVolumeResponse.rep_factor)
  return _internal_rep_factor();
}
inline void OpenVolumeResponse::_internal_set_rep_factor(uint32_t value) {
  
  rep_factor_ = value;
}
inline void OpenVolumeResponse::set_rep_factor(uint32_t value) {
  _internal_set_rep_factor(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.OpenVolumeResponse.rep_factor)
}

// uint32 flags = 5;
inline void OpenVolumeResponse::clear_flags() {
  flags_ = 0u;
}
inline uint32_t OpenVolumeResponse::_internal_flags() const {
  return flags_;
}
inline uint32_t OpenVolumeResponse::flags() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.OpenVolumeResponse.flags)
  return _internal_flags();
}
inline void OpenVolumeResponse::_internal_set_flags(uint32_t value) {
  
  flags_ = value;
}
inline void OpenVolumeResponse::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.OpenVolumeResponse.flags)
}

// map<uint32, .FLINT_RPC_MESSAGE.ExtentLocators> extent_locator_map = 6;
inline int OpenVolumeResponse::_internal_extent_locator_map_size() const {
  return extent_locator_map_.size();
}
inline int OpenVolumeResponse::extent_locator_map_size() const {
  return _internal_extent_locator_map_size();
}
inline void OpenVolumeResponse::clear_extent_locator_map() {
  extent_locator_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >&
OpenVolumeResponse::_internal_extent_locator_map() const {
  return extent_locator_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >&
OpenVolumeResponse::extent_locator_map() const {
  // @@protoc_insertion_point(field_map:FLINT_RPC_MESSAGE.OpenVolumeResponse.extent_locator_map)
  return _internal_extent_locator_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >*
OpenVolumeResponse::_internal_mutable_extent_locator_map() {
  return extent_locator_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >*
OpenVolumeResponse::mutable_extent_locator_map() {
  // @@protoc_insertion_point(field_mutable_map:FLINT_RPC_MESSAGE.OpenVolumeResponse.extent_locator_map)
  return _internal_mutable_extent_locator_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VolumeExtentFaultRequest

// string name = 1;
inline void VolumeExtentFaultRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& VolumeExtentFaultRequest::name() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VolumeExtentFaultRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.name)
}
inline std::string* VolumeExtentFaultRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.name)
  return _s;
}
inline const std::string& VolumeExtentFaultRequest::_internal_name() const {
  return name_.Get();
}
inline void VolumeExtentFaultRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VolumeExtentFaultRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VolumeExtentFaultRequest::release_name() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VolumeExtentFaultRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.name)
}

// repeated uint64 lexts = 2;
inline int VolumeExtentFaultRequest::_internal_lexts_size() const {
  return lexts_.size();
}
inline int VolumeExtentFaultRequest::lexts_size() const {
  return _internal_lexts_size();
}
inline void VolumeExtentFaultRequest::clear_lexts() {
  lexts_.Clear();
}
inline uint64_t VolumeExtentFaultRequest::_internal_lexts(int index) const {
  return lexts_.Get(index);
}
inline uint64_t VolumeExtentFaultRequest::lexts(int index) const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.lexts)
  return _internal_lexts(index);
}
inline void VolumeExtentFaultRequest::set_lexts(int index, uint64_t value) {
  lexts_.Set(index, value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.lexts)
}
inline void VolumeExtentFaultRequest::_internal_add_lexts(uint64_t value) {
  lexts_.Add(value);
}
inline void VolumeExtentFaultRequest::add_lexts(uint64_t value) {
  _internal_add_lexts(value);
  // @@protoc_insertion_point(field_add:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.lexts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
VolumeExtentFaultRequest::_internal_lexts() const {
  return lexts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
VolumeExtentFaultRequest::lexts() const {
  // @@protoc_insertion_point(field_list:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.lexts)
  return _internal_lexts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
VolumeExtentFaultRequest::_internal_mutable_lexts() {
  return &lexts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
VolumeExtentFaultRequest::mutable_lexts() {
  // @@protoc_insertion_point(field_mutable_list:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.lexts)
  return _internal_mutable_lexts();
}

// map<string, float> ssd_preference = 3;
inline int VolumeExtentFaultRequest::_internal_ssd_preference_size() const {
  return ssd_preference_.size();
}
inline int VolumeExtentFaultRequest::ssd_preference_size() const {
  return _internal_ssd_preference_size();
}
inline void VolumeExtentFaultRequest::clear_ssd_preference() {
  ssd_preference_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
VolumeExtentFaultRequest::_internal_ssd_preference() const {
  return ssd_preference_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
VolumeExtentFaultRequest::ssd_preference() const {
  // @@protoc_insertion_point(field_map:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.ssd_preference)
  return _internal_ssd_preference();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
VolumeExtentFaultRequest::_internal_mutable_ssd_preference() {
  return ssd_preference_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
VolumeExtentFaultRequest::mutable_ssd_preference() {
  // @@protoc_insertion_point(field_mutable_map:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.ssd_preference)
  return _internal_mutable_ssd_preference();
}

// uint32 policy = 4;
inline void VolumeExtentFaultRequest::clear_policy() {
  policy_ = 0u;
}
inline uint32_t VolumeExtentFaultRequest::_internal_policy() const {
  return policy_;
}
inline uint32_t VolumeExtentFaultRequest::policy() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.policy)
  return _internal_policy();
}
inline void VolumeExtentFaultRequest::_internal_set_policy(uint32_t value) {
  
  policy_ = value;
}
inline void VolumeExtentFaultRequest::set_policy(uint32_t value) {
  _internal_set_policy(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.policy)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VolumeExtentFaultResponse

// int32 err_code = 1;
inline void VolumeExtentFaultResponse::clear_err_code() {
  err_code_ = 0;
}
inline int32_t VolumeExtentFaultResponse::_internal_err_code() const {
  return err_code_;
}
inline int32_t VolumeExtentFaultResponse::err_code() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse.err_code)
  return _internal_err_code();
}
inline void VolumeExtentFaultResponse::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void VolumeExtentFaultResponse::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse.err_code)
}

// string err_message = 2;
inline void VolumeExtentFaultResponse::clear_err_message() {
  err_message_.ClearToEmpty();
}
inline const std::string& VolumeExtentFaultResponse::err_message() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse.err_message)
  return _internal_err_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VolumeExtentFaultResponse::set_err_message(ArgT0&& arg0, ArgT... args) {
 
 err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse.err_message)
}
inline std::string* VolumeExtentFaultResponse::mutable_err_message() {
  std::string* _s = _internal_mutable_err_message();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse.err_message)
  return _s;
}
inline const std::string& VolumeExtentFaultResponse::_internal_err_message() const {
  return err_message_.Get();
}
inline void VolumeExtentFaultResponse::_internal_set_err_message(const std::string& value) {
  
  err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VolumeExtentFaultResponse::_internal_mutable_err_message() {
  
  return err_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VolumeExtentFaultResponse::release_err_message() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse.err_message)
  return err_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VolumeExtentFaultResponse::set_allocated_err_message(std::string* err_message) {
  if (err_message != nullptr) {
    
  } else {
    
  }
  err_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse.err_message)
}

// map<uint32, .FLINT_RPC_MESSAGE.ExtentLocators> extent_locator_map = 3;
inline int VolumeExtentFaultResponse::_internal_extent_locator_map_size() const {
  return extent_locator_map_.size();
}
inline int VolumeExtentFaultResponse::extent_locator_map_size() const {
  return _internal_extent_locator_map_size();
}
inline void VolumeExtentFaultResponse::clear_extent_locator_map() {
  extent_locator_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >&
VolumeExtentFaultResponse::_internal_extent_locator_map() const {
  return extent_locator_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >&
VolumeExtentFaultResponse::extent_locator_map() const {
  // @@protoc_insertion_point(field_map:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse.extent_locator_map)
  return _internal_extent_locator_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >*
VolumeExtentFaultResponse::_internal_mutable_extent_locator_map() {
  return extent_locator_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >*
VolumeExtentFaultResponse::mutable_extent_locator_map() {
  // @@protoc_insertion_point(field_mutable_map:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse.extent_locator_map)
  return _internal_mutable_extent_locator_map();
}

// -------------------------------------------------------------------

// DeleteVolumeRequest

// string name = 1;
inline void DeleteVolumeRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteVolumeRequest::name() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.DeleteVolumeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteVolumeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.DeleteVolumeRequest.name)
}
inline std::string* DeleteVolumeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.DeleteVolumeRequest.name)
  return _s;
}
inline const std::string& DeleteVolumeRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteVolumeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteVolumeRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteVolumeRequest::release_name() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.DeleteVolumeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteVolumeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.DeleteVolumeRequest.name)
}

// -------------------------------------------------------------------

// DeleteVolumeResponse

// int32 err_code = 1;
inline void DeleteVolumeResponse::clear_err_code() {
  err_code_ = 0;
}
inline int32_t DeleteVolumeResponse::_internal_err_code() const {
  return err_code_;
}
inline int32_t DeleteVolumeResponse::err_code() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.DeleteVolumeResponse.err_code)
  return _internal_err_code();
}
inline void DeleteVolumeResponse::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void DeleteVolumeResponse::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.DeleteVolumeResponse.err_code)
}

// string err_message = 2;
inline void DeleteVolumeResponse::clear_err_message() {
  err_message_.ClearToEmpty();
}
inline const std::string& DeleteVolumeResponse::err_message() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.DeleteVolumeResponse.err_message)
  return _internal_err_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteVolumeResponse::set_err_message(ArgT0&& arg0, ArgT... args) {
 
 err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.DeleteVolumeResponse.err_message)
}
inline std::string* DeleteVolumeResponse::mutable_err_message() {
  std::string* _s = _internal_mutable_err_message();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.DeleteVolumeResponse.err_message)
  return _s;
}
inline const std::string& DeleteVolumeResponse::_internal_err_message() const {
  return err_message_.Get();
}
inline void DeleteVolumeResponse::_internal_set_err_message(const std::string& value) {
  
  err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteVolumeResponse::_internal_mutable_err_message() {
  
  return err_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteVolumeResponse::release_err_message() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.DeleteVolumeResponse.err_message)
  return err_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteVolumeResponse::set_allocated_err_message(std::string* err_message) {
  if (err_message != nullptr) {
    
  } else {
    
  }
  err_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.DeleteVolumeResponse.err_message)
}

// -------------------------------------------------------------------

// ListVolumeRequest

// string name = 1;
inline void ListVolumeRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListVolumeRequest::name() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ListVolumeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVolumeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.ListVolumeRequest.name)
}
inline std::string* ListVolumeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.ListVolumeRequest.name)
  return _s;
}
inline const std::string& ListVolumeRequest::_internal_name() const {
  return name_.Get();
}
inline void ListVolumeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListVolumeRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListVolumeRequest::release_name() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.ListVolumeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListVolumeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.ListVolumeRequest.name)
}

// bool list_all = 2;
inline void ListVolumeRequest::clear_list_all() {
  list_all_ = false;
}
inline bool ListVolumeRequest::_internal_list_all() const {
  return list_all_;
}
inline bool ListVolumeRequest::list_all() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ListVolumeRequest.list_all)
  return _internal_list_all();
}
inline void ListVolumeRequest::_internal_set_list_all(bool value) {
  
  list_all_ = value;
}
inline void ListVolumeRequest::set_list_all(bool value) {
  _internal_set_list_all(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.ListVolumeRequest.list_all)
}

// -------------------------------------------------------------------

// VolumeAttrs

// string name = 1;
inline void VolumeAttrs::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& VolumeAttrs::name() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.VolumeAttrs.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VolumeAttrs::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.VolumeAttrs.name)
}
inline std::string* VolumeAttrs::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.VolumeAttrs.name)
  return _s;
}
inline const std::string& VolumeAttrs::_internal_name() const {
  return name_.Get();
}
inline void VolumeAttrs::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VolumeAttrs::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VolumeAttrs::release_name() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.VolumeAttrs.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VolumeAttrs::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.VolumeAttrs.name)
}

// uint64 size = 2;
inline void VolumeAttrs::clear_size() {
  size_ = uint64_t{0u};
}
inline uint64_t VolumeAttrs::_internal_size() const {
  return size_;
}
inline uint64_t VolumeAttrs::size() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.VolumeAttrs.size)
  return _internal_size();
}
inline void VolumeAttrs::_internal_set_size(uint64_t value) {
  
  size_ = value;
}
inline void VolumeAttrs::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.VolumeAttrs.size)
}

// uint32 rep_factor = 3;
inline void VolumeAttrs::clear_rep_factor() {
  rep_factor_ = 0u;
}
inline uint32_t VolumeAttrs::_internal_rep_factor() const {
  return rep_factor_;
}
inline uint32_t VolumeAttrs::rep_factor() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.VolumeAttrs.rep_factor)
  return _internal_rep_factor();
}
inline void VolumeAttrs::_internal_set_rep_factor(uint32_t value) {
  
  rep_factor_ = value;
}
inline void VolumeAttrs::set_rep_factor(uint32_t value) {
  _internal_set_rep_factor(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.VolumeAttrs.rep_factor)
}

// uint32 flags = 4;
inline void VolumeAttrs::clear_flags() {
  flags_ = 0u;
}
inline uint32_t VolumeAttrs::_internal_flags() const {
  return flags_;
}
inline uint32_t VolumeAttrs::flags() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.VolumeAttrs.flags)
  return _internal_flags();
}
inline void VolumeAttrs::_internal_set_flags(uint32_t value) {
  
  flags_ = value;
}
inline void VolumeAttrs::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.VolumeAttrs.flags)
}

// -------------------------------------------------------------------

// ListVolumeResponse

// int32 err_code = 1;
inline void ListVolumeResponse::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ListVolumeResponse::_internal_err_code() const {
  return err_code_;
}
inline int32_t ListVolumeResponse::err_code() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ListVolumeResponse.err_code)
  return _internal_err_code();
}
inline void ListVolumeResponse::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ListVolumeResponse::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.ListVolumeResponse.err_code)
}

// string err_message = 2;
inline void ListVolumeResponse::clear_err_message() {
  err_message_.ClearToEmpty();
}
inline const std::string& ListVolumeResponse::err_message() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ListVolumeResponse.err_message)
  return _internal_err_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListVolumeResponse::set_err_message(ArgT0&& arg0, ArgT... args) {
 
 err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.ListVolumeResponse.err_message)
}
inline std::string* ListVolumeResponse::mutable_err_message() {
  std::string* _s = _internal_mutable_err_message();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.ListVolumeResponse.err_message)
  return _s;
}
inline const std::string& ListVolumeResponse::_internal_err_message() const {
  return err_message_.Get();
}
inline void ListVolumeResponse::_internal_set_err_message(const std::string& value) {
  
  err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListVolumeResponse::_internal_mutable_err_message() {
  
  return err_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListVolumeResponse::release_err_message() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.ListVolumeResponse.err_message)
  return err_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListVolumeResponse::set_allocated_err_message(std::string* err_message) {
  if (err_message != nullptr) {
    
  } else {
    
  }
  err_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.ListVolumeResponse.err_message)
}

// repeated .FLINT_RPC_MESSAGE.VolumeAttrs vol_attrs = 3;
inline int ListVolumeResponse::_internal_vol_attrs_size() const {
  return vol_attrs_.size();
}
inline int ListVolumeResponse::vol_attrs_size() const {
  return _internal_vol_attrs_size();
}
inline void ListVolumeResponse::clear_vol_attrs() {
  vol_attrs_.Clear();
}
inline ::FLINT_RPC_MESSAGE::VolumeAttrs* ListVolumeResponse::mutable_vol_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.ListVolumeResponse.vol_attrs)
  return vol_attrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::VolumeAttrs >*
ListVolumeResponse::mutable_vol_attrs() {
  // @@protoc_insertion_point(field_mutable_list:FLINT_RPC_MESSAGE.ListVolumeResponse.vol_attrs)
  return &vol_attrs_;
}
inline const ::FLINT_RPC_MESSAGE::VolumeAttrs& ListVolumeResponse::_internal_vol_attrs(int index) const {
  return vol_attrs_.Get(index);
}
inline const ::FLINT_RPC_MESSAGE::VolumeAttrs& ListVolumeResponse::vol_attrs(int index) const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ListVolumeResponse.vol_attrs)
  return _internal_vol_attrs(index);
}
inline ::FLINT_RPC_MESSAGE::VolumeAttrs* ListVolumeResponse::_internal_add_vol_attrs() {
  return vol_attrs_.Add();
}
inline ::FLINT_RPC_MESSAGE::VolumeAttrs* ListVolumeResponse::add_vol_attrs() {
  ::FLINT_RPC_MESSAGE::VolumeAttrs* _add = _internal_add_vol_attrs();
  // @@protoc_insertion_point(field_add:FLINT_RPC_MESSAGE.ListVolumeResponse.vol_attrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::VolumeAttrs >&
ListVolumeResponse::vol_attrs() const {
  // @@protoc_insertion_point(field_list:FLINT_RPC_MESSAGE.ListVolumeResponse.vol_attrs)
  return vol_attrs_;
}

// -------------------------------------------------------------------

// RegisterRequest

// int32 client_id = 1;
inline void RegisterRequest::clear_client_id() {
  client_id_ = 0;
}
inline int32_t RegisterRequest::_internal_client_id() const {
  return client_id_;
}
inline int32_t RegisterRequest::client_id() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RegisterRequest.client_id)
  return _internal_client_id();
}
inline void RegisterRequest::_internal_set_client_id(int32_t value) {
  
  client_id_ = value;
}
inline void RegisterRequest::set_client_id(int32_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RegisterRequest.client_id)
}

// string local_scheduler_ip = 2;
inline void RegisterRequest::clear_local_scheduler_ip() {
  local_scheduler_ip_.ClearToEmpty();
}
inline const std::string& RegisterRequest::local_scheduler_ip() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RegisterRequest.local_scheduler_ip)
  return _internal_local_scheduler_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterRequest::set_local_scheduler_ip(ArgT0&& arg0, ArgT... args) {
 
 local_scheduler_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RegisterRequest.local_scheduler_ip)
}
inline std::string* RegisterRequest::mutable_local_scheduler_ip() {
  std::string* _s = _internal_mutable_local_scheduler_ip();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.RegisterRequest.local_scheduler_ip)
  return _s;
}
inline const std::string& RegisterRequest::_internal_local_scheduler_ip() const {
  return local_scheduler_ip_.Get();
}
inline void RegisterRequest::_internal_set_local_scheduler_ip(const std::string& value) {
  
  local_scheduler_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterRequest::_internal_mutable_local_scheduler_ip() {
  
  return local_scheduler_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterRequest::release_local_scheduler_ip() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.RegisterRequest.local_scheduler_ip)
  return local_scheduler_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterRequest::set_allocated_local_scheduler_ip(std::string* local_scheduler_ip) {
  if (local_scheduler_ip != nullptr) {
    
  } else {
    
  }
  local_scheduler_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_scheduler_ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (local_scheduler_ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    local_scheduler_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.RegisterRequest.local_scheduler_ip)
}

// int32 local_scheduler_port = 3;
inline void RegisterRequest::clear_local_scheduler_port() {
  local_scheduler_port_ = 0;
}
inline int32_t RegisterRequest::_internal_local_scheduler_port() const {
  return local_scheduler_port_;
}
inline int32_t RegisterRequest::local_scheduler_port() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RegisterRequest.local_scheduler_port)
  return _internal_local_scheduler_port();
}
inline void RegisterRequest::_internal_set_local_scheduler_port(int32_t value) {
  
  local_scheduler_port_ = value;
}
inline void RegisterRequest::set_local_scheduler_port(int32_t value) {
  _internal_set_local_scheduler_port(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RegisterRequest.local_scheduler_port)
}

// int32 ebof_port = 4;
inline void RegisterRequest::clear_ebof_port() {
  ebof_port_ = 0;
}
inline int32_t RegisterRequest::_internal_ebof_port() const {
  return ebof_port_;
}
inline int32_t RegisterRequest::ebof_port() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RegisterRequest.ebof_port)
  return _internal_ebof_port();
}
inline void RegisterRequest::_internal_set_ebof_port(int32_t value) {
  
  ebof_port_ = value;
}
inline void RegisterRequest::set_ebof_port(int32_t value) {
  _internal_set_ebof_port(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RegisterRequest.ebof_port)
}

// int32 slo_level = 5;
inline void RegisterRequest::clear_slo_level() {
  slo_level_ = 0;
}
inline int32_t RegisterRequest::_internal_slo_level() const {
  return slo_level_;
}
inline int32_t RegisterRequest::slo_level() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RegisterRequest.slo_level)
  return _internal_slo_level();
}
inline void RegisterRequest::_internal_set_slo_level(int32_t value) {
  
  slo_level_ = value;
}
inline void RegisterRequest::set_slo_level(int32_t value) {
  _internal_set_slo_level(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RegisterRequest.slo_level)
}

// -------------------------------------------------------------------

// RegisterResponse

// int32 err_code = 1;
inline void RegisterResponse::clear_err_code() {
  err_code_ = 0;
}
inline int32_t RegisterResponse::_internal_err_code() const {
  return err_code_;
}
inline int32_t RegisterResponse::err_code() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RegisterResponse.err_code)
  return _internal_err_code();
}
inline void RegisterResponse::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void RegisterResponse::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RegisterResponse.err_code)
}

// string err_msg = 2;
inline void RegisterResponse::clear_err_msg() {
  err_msg_.ClearToEmpty();
}
inline const std::string& RegisterResponse::err_msg() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RegisterResponse.err_msg)
  return _internal_err_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterResponse::set_err_msg(ArgT0&& arg0, ArgT... args) {
 
 err_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RegisterResponse.err_msg)
}
inline std::string* RegisterResponse::mutable_err_msg() {
  std::string* _s = _internal_mutable_err_msg();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.RegisterResponse.err_msg)
  return _s;
}
inline const std::string& RegisterResponse::_internal_err_msg() const {
  return err_msg_.Get();
}
inline void RegisterResponse::_internal_set_err_msg(const std::string& value) {
  
  err_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterResponse::_internal_mutable_err_msg() {
  
  return err_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterResponse::release_err_msg() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.RegisterResponse.err_msg)
  return err_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterResponse::set_allocated_err_msg(std::string* err_msg) {
  if (err_msg != nullptr) {
    
  } else {
    
  }
  err_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.RegisterResponse.err_msg)
}

// int32 client_id = 3;
inline void RegisterResponse::clear_client_id() {
  client_id_ = 0;
}
inline int32_t RegisterResponse::_internal_client_id() const {
  return client_id_;
}
inline int32_t RegisterResponse::client_id() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RegisterResponse.client_id)
  return _internal_client_id();
}
inline void RegisterResponse::_internal_set_client_id(int32_t value) {
  
  client_id_ = value;
}
inline void RegisterResponse::set_client_id(int32_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RegisterResponse.client_id)
}

// -------------------------------------------------------------------

// PortView

// int32 port_id = 1;
inline void PortView::clear_port_id() {
  port_id_ = 0;
}
inline int32_t PortView::_internal_port_id() const {
  return port_id_;
}
inline int32_t PortView::port_id() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PortView.port_id)
  return _internal_port_id();
}
inline void PortView::_internal_set_port_id(int32_t value) {
  
  port_id_ = value;
}
inline void PortView::set_port_id(int32_t value) {
  _internal_set_port_id(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PortView.port_id)
}

// float read_bw = 2;
inline void PortView::clear_read_bw() {
  read_bw_ = 0;
}
inline float PortView::_internal_read_bw() const {
  return read_bw_;
}
inline float PortView::read_bw() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PortView.read_bw)
  return _internal_read_bw();
}
inline void PortView::_internal_set_read_bw(float value) {
  
  read_bw_ = value;
}
inline void PortView::set_read_bw(float value) {
  _internal_set_read_bw(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PortView.read_bw)
}

// float write_bw = 3;
inline void PortView::clear_write_bw() {
  write_bw_ = 0;
}
inline float PortView::_internal_write_bw() const {
  return write_bw_;
}
inline float PortView::write_bw() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PortView.write_bw)
  return _internal_write_bw();
}
inline void PortView::_internal_set_write_bw(float value) {
  
  write_bw_ = value;
}
inline void PortView::set_write_bw(float value) {
  _internal_set_write_bw(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PortView.write_bw)
}

// float read_iops = 4;
inline void PortView::clear_read_iops() {
  read_iops_ = 0;
}
inline float PortView::_internal_read_iops() const {
  return read_iops_;
}
inline float PortView::read_iops() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PortView.read_iops)
  return _internal_read_iops();
}
inline void PortView::_internal_set_read_iops(float value) {
  
  read_iops_ = value;
}
inline void PortView::set_read_iops(float value) {
  _internal_set_read_iops(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PortView.read_iops)
}

// float write_iops = 5;
inline void PortView::clear_write_iops() {
  write_iops_ = 0;
}
inline float PortView::_internal_write_iops() const {
  return write_iops_;
}
inline float PortView::write_iops() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PortView.write_iops)
  return _internal_write_iops();
}
inline void PortView::_internal_set_write_iops(float value) {
  
  write_iops_ = value;
}
inline void PortView::set_write_iops(float value) {
  _internal_set_write_iops(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PortView.write_iops)
}

// repeated uint32 read_size_dist = 6;
inline int PortView::_internal_read_size_dist_size() const {
  return read_size_dist_.size();
}
inline int PortView::read_size_dist_size() const {
  return _internal_read_size_dist_size();
}
inline void PortView::clear_read_size_dist() {
  read_size_dist_.Clear();
}
inline uint32_t PortView::_internal_read_size_dist(int index) const {
  return read_size_dist_.Get(index);
}
inline uint32_t PortView::read_size_dist(int index) const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PortView.read_size_dist)
  return _internal_read_size_dist(index);
}
inline void PortView::set_read_size_dist(int index, uint32_t value) {
  read_size_dist_.Set(index, value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PortView.read_size_dist)
}
inline void PortView::_internal_add_read_size_dist(uint32_t value) {
  read_size_dist_.Add(value);
}
inline void PortView::add_read_size_dist(uint32_t value) {
  _internal_add_read_size_dist(value);
  // @@protoc_insertion_point(field_add:FLINT_RPC_MESSAGE.PortView.read_size_dist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PortView::_internal_read_size_dist() const {
  return read_size_dist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PortView::read_size_dist() const {
  // @@protoc_insertion_point(field_list:FLINT_RPC_MESSAGE.PortView.read_size_dist)
  return _internal_read_size_dist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PortView::_internal_mutable_read_size_dist() {
  return &read_size_dist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PortView::mutable_read_size_dist() {
  // @@protoc_insertion_point(field_mutable_list:FLINT_RPC_MESSAGE.PortView.read_size_dist)
  return _internal_mutable_read_size_dist();
}

// repeated uint32 write_size_dist = 7;
inline int PortView::_internal_write_size_dist_size() const {
  return write_size_dist_.size();
}
inline int PortView::write_size_dist_size() const {
  return _internal_write_size_dist_size();
}
inline void PortView::clear_write_size_dist() {
  write_size_dist_.Clear();
}
inline uint32_t PortView::_internal_write_size_dist(int index) const {
  return write_size_dist_.Get(index);
}
inline uint32_t PortView::write_size_dist(int index) const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PortView.write_size_dist)
  return _internal_write_size_dist(index);
}
inline void PortView::set_write_size_dist(int index, uint32_t value) {
  write_size_dist_.Set(index, value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PortView.write_size_dist)
}
inline void PortView::_internal_add_write_size_dist(uint32_t value) {
  write_size_dist_.Add(value);
}
inline void PortView::add_write_size_dist(uint32_t value) {
  _internal_add_write_size_dist(value);
  // @@protoc_insertion_point(field_add:FLINT_RPC_MESSAGE.PortView.write_size_dist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PortView::_internal_write_size_dist() const {
  return write_size_dist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PortView::write_size_dist() const {
  // @@protoc_insertion_point(field_list:FLINT_RPC_MESSAGE.PortView.write_size_dist)
  return _internal_write_size_dist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PortView::_internal_mutable_write_size_dist() {
  return &write_size_dist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PortView::mutable_write_size_dist() {
  // @@protoc_insertion_point(field_mutable_list:FLINT_RPC_MESSAGE.PortView.write_size_dist)
  return _internal_mutable_write_size_dist();
}

// uint64 recency_counter = 8;
inline void PortView::clear_recency_counter() {
  recency_counter_ = uint64_t{0u};
}
inline uint64_t PortView::_internal_recency_counter() const {
  return recency_counter_;
}
inline uint64_t PortView::recency_counter() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PortView.recency_counter)
  return _internal_recency_counter();
}
inline void PortView::_internal_set_recency_counter(uint64_t value) {
  
  recency_counter_ = value;
}
inline void PortView::set_recency_counter(uint64_t value) {
  _internal_set_recency_counter(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PortView.recency_counter)
}

// -------------------------------------------------------------------

// PipeView

// int32 pipe_id = 1;
inline void PipeView::clear_pipe_id() {
  pipe_id_ = 0;
}
inline int32_t PipeView::_internal_pipe_id() const {
  return pipe_id_;
}
inline int32_t PipeView::pipe_id() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PipeView.pipe_id)
  return _internal_pipe_id();
}
inline void PipeView::_internal_set_pipe_id(int32_t value) {
  
  pipe_id_ = value;
}
inline void PipeView::set_pipe_id(int32_t value) {
  _internal_set_pipe_id(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PipeView.pipe_id)
}

// float read_bw = 2;
inline void PipeView::clear_read_bw() {
  read_bw_ = 0;
}
inline float PipeView::_internal_read_bw() const {
  return read_bw_;
}
inline float PipeView::read_bw() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PipeView.read_bw)
  return _internal_read_bw();
}
inline void PipeView::_internal_set_read_bw(float value) {
  
  read_bw_ = value;
}
inline void PipeView::set_read_bw(float value) {
  _internal_set_read_bw(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PipeView.read_bw)
}

// float write_bw = 3;
inline void PipeView::clear_write_bw() {
  write_bw_ = 0;
}
inline float PipeView::_internal_write_bw() const {
  return write_bw_;
}
inline float PipeView::write_bw() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PipeView.write_bw)
  return _internal_write_bw();
}
inline void PipeView::_internal_set_write_bw(float value) {
  
  write_bw_ = value;
}
inline void PipeView::set_write_bw(float value) {
  _internal_set_write_bw(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PipeView.write_bw)
}

// float read_iops = 4;
inline void PipeView::clear_read_iops() {
  read_iops_ = 0;
}
inline float PipeView::_internal_read_iops() const {
  return read_iops_;
}
inline float PipeView::read_iops() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PipeView.read_iops)
  return _internal_read_iops();
}
inline void PipeView::_internal_set_read_iops(float value) {
  
  read_iops_ = value;
}
inline void PipeView::set_read_iops(float value) {
  _internal_set_read_iops(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PipeView.read_iops)
}

// float write_iops = 5;
inline void PipeView::clear_write_iops() {
  write_iops_ = 0;
}
inline float PipeView::_internal_write_iops() const {
  return write_iops_;
}
inline float PipeView::write_iops() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PipeView.write_iops)
  return _internal_write_iops();
}
inline void PipeView::_internal_set_write_iops(float value) {
  
  write_iops_ = value;
}
inline void PipeView::set_write_iops(float value) {
  _internal_set_write_iops(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PipeView.write_iops)
}

// uint64 recency_counter = 6;
inline void PipeView::clear_recency_counter() {
  recency_counter_ = uint64_t{0u};
}
inline uint64_t PipeView::_internal_recency_counter() const {
  return recency_counter_;
}
inline uint64_t PipeView::recency_counter() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PipeView.recency_counter)
  return _internal_recency_counter();
}
inline void PipeView::_internal_set_recency_counter(uint64_t value) {
  
  recency_counter_ = value;
}
inline void PipeView::set_recency_counter(uint64_t value) {
  _internal_set_recency_counter(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PipeView.recency_counter)
}

// -------------------------------------------------------------------

// SsdView

// int32 ssd_id = 1;
inline void SsdView::clear_ssd_id() {
  ssd_id_ = 0;
}
inline int32_t SsdView::_internal_ssd_id() const {
  return ssd_id_;
}
inline int32_t SsdView::ssd_id() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.SsdView.ssd_id)
  return _internal_ssd_id();
}
inline void SsdView::_internal_set_ssd_id(int32_t value) {
  
  ssd_id_ = value;
}
inline void SsdView::set_ssd_id(int32_t value) {
  _internal_set_ssd_id(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.SsdView.ssd_id)
}

// float read_bw_used = 2;
inline void SsdView::clear_read_bw_used() {
  read_bw_used_ = 0;
}
inline float SsdView::_internal_read_bw_used() const {
  return read_bw_used_;
}
inline float SsdView::read_bw_used() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.SsdView.read_bw_used)
  return _internal_read_bw_used();
}
inline void SsdView::_internal_set_read_bw_used(float value) {
  
  read_bw_used_ = value;
}
inline void SsdView::set_read_bw_used(float value) {
  _internal_set_read_bw_used(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.SsdView.read_bw_used)
}

// float write_bw_used = 3;
inline void SsdView::clear_write_bw_used() {
  write_bw_used_ = 0;
}
inline float SsdView::_internal_write_bw_used() const {
  return write_bw_used_;
}
inline float SsdView::write_bw_used() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.SsdView.write_bw_used)
  return _internal_write_bw_used();
}
inline void SsdView::_internal_set_write_bw_used(float value) {
  
  write_bw_used_ = value;
}
inline void SsdView::set_write_bw_used(float value) {
  _internal_set_write_bw_used(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.SsdView.write_bw_used)
}

// float read_bw_free = 4;
inline void SsdView::clear_read_bw_free() {
  read_bw_free_ = 0;
}
inline float SsdView::_internal_read_bw_free() const {
  return read_bw_free_;
}
inline float SsdView::read_bw_free() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.SsdView.read_bw_free)
  return _internal_read_bw_free();
}
inline void SsdView::_internal_set_read_bw_free(float value) {
  
  read_bw_free_ = value;
}
inline void SsdView::set_read_bw_free(float value) {
  _internal_set_read_bw_free(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.SsdView.read_bw_free)
}

// float write_bw_free = 5;
inline void SsdView::clear_write_bw_free() {
  write_bw_free_ = 0;
}
inline float SsdView::_internal_write_bw_free() const {
  return write_bw_free_;
}
inline float SsdView::write_bw_free() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.SsdView.write_bw_free)
  return _internal_write_bw_free();
}
inline void SsdView::_internal_set_write_bw_free(float value) {
  
  write_bw_free_ = value;
}
inline void SsdView::set_write_bw_free(float value) {
  _internal_set_write_bw_free(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.SsdView.write_bw_free)
}

// float read_iops = 6;
inline void SsdView::clear_read_iops() {
  read_iops_ = 0;
}
inline float SsdView::_internal_read_iops() const {
  return read_iops_;
}
inline float SsdView::read_iops() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.SsdView.read_iops)
  return _internal_read_iops();
}
inline void SsdView::_internal_set_read_iops(float value) {
  
  read_iops_ = value;
}
inline void SsdView::set_read_iops(float value) {
  _internal_set_read_iops(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.SsdView.read_iops)
}

// float write_iops = 7;
inline void SsdView::clear_write_iops() {
  write_iops_ = 0;
}
inline float SsdView::_internal_write_iops() const {
  return write_iops_;
}
inline float SsdView::write_iops() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.SsdView.write_iops)
  return _internal_write_iops();
}
inline void SsdView::_internal_set_write_iops(float value) {
  
  write_iops_ = value;
}
inline void SsdView::set_write_iops(float value) {
  _internal_set_write_iops(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.SsdView.write_iops)
}

// float frag_degree = 8;
inline void SsdView::clear_frag_degree() {
  frag_degree_ = 0;
}
inline float SsdView::_internal_frag_degree() const {
  return frag_degree_;
}
inline float SsdView::frag_degree() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.SsdView.frag_degree)
  return _internal_frag_degree();
}
inline void SsdView::_internal_set_frag_degree(float value) {
  
  frag_degree_ = value;
}
inline void SsdView::set_frag_degree(float value) {
  _internal_set_frag_degree(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.SsdView.frag_degree)
}

// float write_cost = 9;
inline void SsdView::clear_write_cost() {
  write_cost_ = 0;
}
inline float SsdView::_internal_write_cost() const {
  return write_cost_;
}
inline float SsdView::write_cost() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.SsdView.write_cost)
  return _internal_write_cost();
}
inline void SsdView::_internal_set_write_cost(float value) {
  
  write_cost_ = value;
}
inline void SsdView::set_write_cost(float value) {
  _internal_set_write_cost(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.SsdView.write_cost)
}

// uint64 recency_counter = 10;
inline void SsdView::clear_recency_counter() {
  recency_counter_ = uint64_t{0u};
}
inline uint64_t SsdView::_internal_recency_counter() const {
  return recency_counter_;
}
inline uint64_t SsdView::recency_counter() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.SsdView.recency_counter)
  return _internal_recency_counter();
}
inline void SsdView::_internal_set_recency_counter(uint64_t value) {
  
  recency_counter_ = value;
}
inline void SsdView::set_recency_counter(uint64_t value) {
  _internal_set_recency_counter(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.SsdView.recency_counter)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PartialView

// .FLINT_RPC_MESSAGE.PortView net_port_view = 1;
inline bool PartialView::_internal_has_net_port_view() const {
  return this != internal_default_instance() && net_port_view_ != nullptr;
}
inline bool PartialView::has_net_port_view() const {
  return _internal_has_net_port_view();
}
inline void PartialView::clear_net_port_view() {
  if (GetArenaForAllocation() == nullptr && net_port_view_ != nullptr) {
    delete net_port_view_;
  }
  net_port_view_ = nullptr;
}
inline const ::FLINT_RPC_MESSAGE::PortView& PartialView::_internal_net_port_view() const {
  const ::FLINT_RPC_MESSAGE::PortView* p = net_port_view_;
  return p != nullptr ? *p : reinterpret_cast<const ::FLINT_RPC_MESSAGE::PortView&>(
      ::FLINT_RPC_MESSAGE::_PortView_default_instance_);
}
inline const ::FLINT_RPC_MESSAGE::PortView& PartialView::net_port_view() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PartialView.net_port_view)
  return _internal_net_port_view();
}
inline void PartialView::unsafe_arena_set_allocated_net_port_view(
    ::FLINT_RPC_MESSAGE::PortView* net_port_view) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(net_port_view_);
  }
  net_port_view_ = net_port_view;
  if (net_port_view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FLINT_RPC_MESSAGE.PartialView.net_port_view)
}
inline ::FLINT_RPC_MESSAGE::PortView* PartialView::release_net_port_view() {
  
  ::FLINT_RPC_MESSAGE::PortView* temp = net_port_view_;
  net_port_view_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FLINT_RPC_MESSAGE::PortView* PartialView::unsafe_arena_release_net_port_view() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.PartialView.net_port_view)
  
  ::FLINT_RPC_MESSAGE::PortView* temp = net_port_view_;
  net_port_view_ = nullptr;
  return temp;
}
inline ::FLINT_RPC_MESSAGE::PortView* PartialView::_internal_mutable_net_port_view() {
  
  if (net_port_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::FLINT_RPC_MESSAGE::PortView>(GetArenaForAllocation());
    net_port_view_ = p;
  }
  return net_port_view_;
}
inline ::FLINT_RPC_MESSAGE::PortView* PartialView::mutable_net_port_view() {
  ::FLINT_RPC_MESSAGE::PortView* _msg = _internal_mutable_net_port_view();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.PartialView.net_port_view)
  return _msg;
}
inline void PartialView::set_allocated_net_port_view(::FLINT_RPC_MESSAGE::PortView* net_port_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete net_port_view_;
  }
  if (net_port_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FLINT_RPC_MESSAGE::PortView>::GetOwningArena(net_port_view);
    if (message_arena != submessage_arena) {
      net_port_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net_port_view, submessage_arena);
    }
    
  } else {
    
  }
  net_port_view_ = net_port_view;
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.PartialView.net_port_view)
}

// .FLINT_RPC_MESSAGE.PipeView net_pipe_view = 2;
inline bool PartialView::_internal_has_net_pipe_view() const {
  return this != internal_default_instance() && net_pipe_view_ != nullptr;
}
inline bool PartialView::has_net_pipe_view() const {
  return _internal_has_net_pipe_view();
}
inline void PartialView::clear_net_pipe_view() {
  if (GetArenaForAllocation() == nullptr && net_pipe_view_ != nullptr) {
    delete net_pipe_view_;
  }
  net_pipe_view_ = nullptr;
}
inline const ::FLINT_RPC_MESSAGE::PipeView& PartialView::_internal_net_pipe_view() const {
  const ::FLINT_RPC_MESSAGE::PipeView* p = net_pipe_view_;
  return p != nullptr ? *p : reinterpret_cast<const ::FLINT_RPC_MESSAGE::PipeView&>(
      ::FLINT_RPC_MESSAGE::_PipeView_default_instance_);
}
inline const ::FLINT_RPC_MESSAGE::PipeView& PartialView::net_pipe_view() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PartialView.net_pipe_view)
  return _internal_net_pipe_view();
}
inline void PartialView::unsafe_arena_set_allocated_net_pipe_view(
    ::FLINT_RPC_MESSAGE::PipeView* net_pipe_view) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(net_pipe_view_);
  }
  net_pipe_view_ = net_pipe_view;
  if (net_pipe_view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FLINT_RPC_MESSAGE.PartialView.net_pipe_view)
}
inline ::FLINT_RPC_MESSAGE::PipeView* PartialView::release_net_pipe_view() {
  
  ::FLINT_RPC_MESSAGE::PipeView* temp = net_pipe_view_;
  net_pipe_view_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FLINT_RPC_MESSAGE::PipeView* PartialView::unsafe_arena_release_net_pipe_view() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.PartialView.net_pipe_view)
  
  ::FLINT_RPC_MESSAGE::PipeView* temp = net_pipe_view_;
  net_pipe_view_ = nullptr;
  return temp;
}
inline ::FLINT_RPC_MESSAGE::PipeView* PartialView::_internal_mutable_net_pipe_view() {
  
  if (net_pipe_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::FLINT_RPC_MESSAGE::PipeView>(GetArenaForAllocation());
    net_pipe_view_ = p;
  }
  return net_pipe_view_;
}
inline ::FLINT_RPC_MESSAGE::PipeView* PartialView::mutable_net_pipe_view() {
  ::FLINT_RPC_MESSAGE::PipeView* _msg = _internal_mutable_net_pipe_view();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.PartialView.net_pipe_view)
  return _msg;
}
inline void PartialView::set_allocated_net_pipe_view(::FLINT_RPC_MESSAGE::PipeView* net_pipe_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete net_pipe_view_;
  }
  if (net_pipe_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FLINT_RPC_MESSAGE::PipeView>::GetOwningArena(net_pipe_view);
    if (message_arena != submessage_arena) {
      net_pipe_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net_pipe_view, submessage_arena);
    }
    
  } else {
    
  }
  net_pipe_view_ = net_pipe_view;
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.PartialView.net_pipe_view)
}

// map<int32, .FLINT_RPC_MESSAGE.PortView> io_port_views = 3;
inline int PartialView::_internal_io_port_views_size() const {
  return io_port_views_.size();
}
inline int PartialView::io_port_views_size() const {
  return _internal_io_port_views_size();
}
inline void PartialView::clear_io_port_views() {
  io_port_views_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PortView >&
PartialView::_internal_io_port_views() const {
  return io_port_views_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PortView >&
PartialView::io_port_views() const {
  // @@protoc_insertion_point(field_map:FLINT_RPC_MESSAGE.PartialView.io_port_views)
  return _internal_io_port_views();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PortView >*
PartialView::_internal_mutable_io_port_views() {
  return io_port_views_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PortView >*
PartialView::mutable_io_port_views() {
  // @@protoc_insertion_point(field_mutable_map:FLINT_RPC_MESSAGE.PartialView.io_port_views)
  return _internal_mutable_io_port_views();
}

// map<int32, .FLINT_RPC_MESSAGE.PipeView> io_pipe_views = 4;
inline int PartialView::_internal_io_pipe_views_size() const {
  return io_pipe_views_.size();
}
inline int PartialView::io_pipe_views_size() const {
  return _internal_io_pipe_views_size();
}
inline void PartialView::clear_io_pipe_views() {
  io_pipe_views_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PipeView >&
PartialView::_internal_io_pipe_views() const {
  return io_pipe_views_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PipeView >&
PartialView::io_pipe_views() const {
  // @@protoc_insertion_point(field_map:FLINT_RPC_MESSAGE.PartialView.io_pipe_views)
  return _internal_io_pipe_views();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PipeView >*
PartialView::_internal_mutable_io_pipe_views() {
  return io_pipe_views_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PipeView >*
PartialView::mutable_io_pipe_views() {
  // @@protoc_insertion_point(field_mutable_map:FLINT_RPC_MESSAGE.PartialView.io_pipe_views)
  return _internal_mutable_io_pipe_views();
}

// map<int32, .FLINT_RPC_MESSAGE.SsdView> ssd_views = 5;
inline int PartialView::_internal_ssd_views_size() const {
  return ssd_views_.size();
}
inline int PartialView::ssd_views_size() const {
  return _internal_ssd_views_size();
}
inline void PartialView::clear_ssd_views() {
  ssd_views_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::SsdView >&
PartialView::_internal_ssd_views() const {
  return ssd_views_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::SsdView >&
PartialView::ssd_views() const {
  // @@protoc_insertion_point(field_map:FLINT_RPC_MESSAGE.PartialView.ssd_views)
  return _internal_ssd_views();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::SsdView >*
PartialView::_internal_mutable_ssd_views() {
  return ssd_views_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::SsdView >*
PartialView::mutable_ssd_views() {
  // @@protoc_insertion_point(field_mutable_map:FLINT_RPC_MESSAGE.PartialView.ssd_views)
  return _internal_mutable_ssd_views();
}

// -------------------------------------------------------------------

// PullViewRequest

// int32 ebof_port = 1;
inline void PullViewRequest::clear_ebof_port() {
  ebof_port_ = 0;
}
inline int32_t PullViewRequest::_internal_ebof_port() const {
  return ebof_port_;
}
inline int32_t PullViewRequest::ebof_port() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PullViewRequest.ebof_port)
  return _internal_ebof_port();
}
inline void PullViewRequest::_internal_set_ebof_port(int32_t value) {
  
  ebof_port_ = value;
}
inline void PullViewRequest::set_ebof_port(int32_t value) {
  _internal_set_ebof_port(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PullViewRequest.ebof_port)
}

// -------------------------------------------------------------------

// PullViewResponse

// int32 err_code = 1;
inline void PullViewResponse::clear_err_code() {
  err_code_ = 0;
}
inline int32_t PullViewResponse::_internal_err_code() const {
  return err_code_;
}
inline int32_t PullViewResponse::err_code() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PullViewResponse.err_code)
  return _internal_err_code();
}
inline void PullViewResponse::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void PullViewResponse::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PullViewResponse.err_code)
}

// .FLINT_RPC_MESSAGE.PartialView partial_view = 2;
inline bool PullViewResponse::_internal_has_partial_view() const {
  return this != internal_default_instance() && partial_view_ != nullptr;
}
inline bool PullViewResponse::has_partial_view() const {
  return _internal_has_partial_view();
}
inline void PullViewResponse::clear_partial_view() {
  if (GetArenaForAllocation() == nullptr && partial_view_ != nullptr) {
    delete partial_view_;
  }
  partial_view_ = nullptr;
}
inline const ::FLINT_RPC_MESSAGE::PartialView& PullViewResponse::_internal_partial_view() const {
  const ::FLINT_RPC_MESSAGE::PartialView* p = partial_view_;
  return p != nullptr ? *p : reinterpret_cast<const ::FLINT_RPC_MESSAGE::PartialView&>(
      ::FLINT_RPC_MESSAGE::_PartialView_default_instance_);
}
inline const ::FLINT_RPC_MESSAGE::PartialView& PullViewResponse::partial_view() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PullViewResponse.partial_view)
  return _internal_partial_view();
}
inline void PullViewResponse::unsafe_arena_set_allocated_partial_view(
    ::FLINT_RPC_MESSAGE::PartialView* partial_view) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partial_view_);
  }
  partial_view_ = partial_view;
  if (partial_view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FLINT_RPC_MESSAGE.PullViewResponse.partial_view)
}
inline ::FLINT_RPC_MESSAGE::PartialView* PullViewResponse::release_partial_view() {
  
  ::FLINT_RPC_MESSAGE::PartialView* temp = partial_view_;
  partial_view_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FLINT_RPC_MESSAGE::PartialView* PullViewResponse::unsafe_arena_release_partial_view() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.PullViewResponse.partial_view)
  
  ::FLINT_RPC_MESSAGE::PartialView* temp = partial_view_;
  partial_view_ = nullptr;
  return temp;
}
inline ::FLINT_RPC_MESSAGE::PartialView* PullViewResponse::_internal_mutable_partial_view() {
  
  if (partial_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::FLINT_RPC_MESSAGE::PartialView>(GetArenaForAllocation());
    partial_view_ = p;
  }
  return partial_view_;
}
inline ::FLINT_RPC_MESSAGE::PartialView* PullViewResponse::mutable_partial_view() {
  ::FLINT_RPC_MESSAGE::PartialView* _msg = _internal_mutable_partial_view();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.PullViewResponse.partial_view)
  return _msg;
}
inline void PullViewResponse::set_allocated_partial_view(::FLINT_RPC_MESSAGE::PartialView* partial_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete partial_view_;
  }
  if (partial_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FLINT_RPC_MESSAGE::PartialView>::GetOwningArena(partial_view);
    if (message_arena != submessage_arena) {
      partial_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partial_view, submessage_arena);
    }
    
  } else {
    
  }
  partial_view_ = partial_view;
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.PullViewResponse.partial_view)
}

// -------------------------------------------------------------------

// PushViewRequest

// int32 event_op = 1;
inline void PushViewRequest::clear_event_op() {
  event_op_ = 0;
}
inline int32_t PushViewRequest::_internal_event_op() const {
  return event_op_;
}
inline int32_t PushViewRequest::event_op() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PushViewRequest.event_op)
  return _internal_event_op();
}
inline void PushViewRequest::_internal_set_event_op(int32_t value) {
  
  event_op_ = value;
}
inline void PushViewRequest::set_event_op(int32_t value) {
  _internal_set_event_op(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PushViewRequest.event_op)
}

// int32 port_or_ssd = 2;
inline void PushViewRequest::clear_port_or_ssd() {
  port_or_ssd_ = 0;
}
inline int32_t PushViewRequest::_internal_port_or_ssd() const {
  return port_or_ssd_;
}
inline int32_t PushViewRequest::port_or_ssd() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PushViewRequest.port_or_ssd)
  return _internal_port_or_ssd();
}
inline void PushViewRequest::_internal_set_port_or_ssd(int32_t value) {
  
  port_or_ssd_ = value;
}
inline void PushViewRequest::set_port_or_ssd(int32_t value) {
  _internal_set_port_or_ssd(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PushViewRequest.port_or_ssd)
}

// .FLINT_RPC_MESSAGE.PartialView partial_view = 3;
inline bool PushViewRequest::_internal_has_partial_view() const {
  return this != internal_default_instance() && partial_view_ != nullptr;
}
inline bool PushViewRequest::has_partial_view() const {
  return _internal_has_partial_view();
}
inline void PushViewRequest::clear_partial_view() {
  if (GetArenaForAllocation() == nullptr && partial_view_ != nullptr) {
    delete partial_view_;
  }
  partial_view_ = nullptr;
}
inline const ::FLINT_RPC_MESSAGE::PartialView& PushViewRequest::_internal_partial_view() const {
  const ::FLINT_RPC_MESSAGE::PartialView* p = partial_view_;
  return p != nullptr ? *p : reinterpret_cast<const ::FLINT_RPC_MESSAGE::PartialView&>(
      ::FLINT_RPC_MESSAGE::_PartialView_default_instance_);
}
inline const ::FLINT_RPC_MESSAGE::PartialView& PushViewRequest::partial_view() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PushViewRequest.partial_view)
  return _internal_partial_view();
}
inline void PushViewRequest::unsafe_arena_set_allocated_partial_view(
    ::FLINT_RPC_MESSAGE::PartialView* partial_view) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(partial_view_);
  }
  partial_view_ = partial_view;
  if (partial_view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FLINT_RPC_MESSAGE.PushViewRequest.partial_view)
}
inline ::FLINT_RPC_MESSAGE::PartialView* PushViewRequest::release_partial_view() {
  
  ::FLINT_RPC_MESSAGE::PartialView* temp = partial_view_;
  partial_view_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FLINT_RPC_MESSAGE::PartialView* PushViewRequest::unsafe_arena_release_partial_view() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.PushViewRequest.partial_view)
  
  ::FLINT_RPC_MESSAGE::PartialView* temp = partial_view_;
  partial_view_ = nullptr;
  return temp;
}
inline ::FLINT_RPC_MESSAGE::PartialView* PushViewRequest::_internal_mutable_partial_view() {
  
  if (partial_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::FLINT_RPC_MESSAGE::PartialView>(GetArenaForAllocation());
    partial_view_ = p;
  }
  return partial_view_;
}
inline ::FLINT_RPC_MESSAGE::PartialView* PushViewRequest::mutable_partial_view() {
  ::FLINT_RPC_MESSAGE::PartialView* _msg = _internal_mutable_partial_view();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.PushViewRequest.partial_view)
  return _msg;
}
inline void PushViewRequest::set_allocated_partial_view(::FLINT_RPC_MESSAGE::PartialView* partial_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete partial_view_;
  }
  if (partial_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FLINT_RPC_MESSAGE::PartialView>::GetOwningArena(partial_view);
    if (message_arena != submessage_arena) {
      partial_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partial_view, submessage_arena);
    }
    
  } else {
    
  }
  partial_view_ = partial_view;
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.PushViewRequest.partial_view)
}

// -------------------------------------------------------------------

// PushViewResponse

// int32 err_code = 1;
inline void PushViewResponse::clear_err_code() {
  err_code_ = 0;
}
inline int32_t PushViewResponse::_internal_err_code() const {
  return err_code_;
}
inline int32_t PushViewResponse::err_code() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.PushViewResponse.err_code)
  return _internal_err_code();
}
inline void PushViewResponse::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void PushViewResponse::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.PushViewResponse.err_code)
}

// -------------------------------------------------------------------

// IOCompletion

// int32 ssd_id = 1;
inline void IOCompletion::clear_ssd_id() {
  ssd_id_ = 0;
}
inline int32_t IOCompletion::_internal_ssd_id() const {
  return ssd_id_;
}
inline int32_t IOCompletion::ssd_id() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.IOCompletion.ssd_id)
  return _internal_ssd_id();
}
inline void IOCompletion::_internal_set_ssd_id(int32_t value) {
  
  ssd_id_ = value;
}
inline void IOCompletion::set_ssd_id(int32_t value) {
  _internal_set_ssd_id(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.IOCompletion.ssd_id)
}

// uint32 io_type = 2;
inline void IOCompletion::clear_io_type() {
  io_type_ = 0u;
}
inline uint32_t IOCompletion::_internal_io_type() const {
  return io_type_;
}
inline uint32_t IOCompletion::io_type() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.IOCompletion.io_type)
  return _internal_io_type();
}
inline void IOCompletion::_internal_set_io_type(uint32_t value) {
  
  io_type_ = value;
}
inline void IOCompletion::set_io_type(uint32_t value) {
  _internal_set_io_type(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.IOCompletion.io_type)
}

// uint64 size = 3;
inline void IOCompletion::clear_size() {
  size_ = uint64_t{0u};
}
inline uint64_t IOCompletion::_internal_size() const {
  return size_;
}
inline uint64_t IOCompletion::size() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.IOCompletion.size)
  return _internal_size();
}
inline void IOCompletion::_internal_set_size(uint64_t value) {
  
  size_ = value;
}
inline void IOCompletion::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.IOCompletion.size)
}

// uint32 lat_microsec = 4;
inline void IOCompletion::clear_lat_microsec() {
  lat_microsec_ = 0u;
}
inline uint32_t IOCompletion::_internal_lat_microsec() const {
  return lat_microsec_;
}
inline uint32_t IOCompletion::lat_microsec() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.IOCompletion.lat_microsec)
  return _internal_lat_microsec();
}
inline void IOCompletion::_internal_set_lat_microsec(uint32_t value) {
  
  lat_microsec_ = value;
}
inline void IOCompletion::set_lat_microsec(uint32_t value) {
  _internal_set_lat_microsec(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.IOCompletion.lat_microsec)
}

// optional int32 client_id = 5;
inline bool IOCompletion::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IOCompletion::has_client_id() const {
  return _internal_has_client_id();
}
inline void IOCompletion::clear_client_id() {
  client_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t IOCompletion::_internal_client_id() const {
  return client_id_;
}
inline int32_t IOCompletion::client_id() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.IOCompletion.client_id)
  return _internal_client_id();
}
inline void IOCompletion::_internal_set_client_id(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  client_id_ = value;
}
inline void IOCompletion::set_client_id(int32_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.IOCompletion.client_id)
}

// -------------------------------------------------------------------

// ReportCmplRequest

// int32 client_id = 1;
inline void ReportCmplRequest::clear_client_id() {
  client_id_ = 0;
}
inline int32_t ReportCmplRequest::_internal_client_id() const {
  return client_id_;
}
inline int32_t ReportCmplRequest::client_id() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ReportCmplRequest.client_id)
  return _internal_client_id();
}
inline void ReportCmplRequest::_internal_set_client_id(int32_t value) {
  
  client_id_ = value;
}
inline void ReportCmplRequest::set_client_id(int32_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.ReportCmplRequest.client_id)
}

// int32 ebof_port = 2;
inline void ReportCmplRequest::clear_ebof_port() {
  ebof_port_ = 0;
}
inline int32_t ReportCmplRequest::_internal_ebof_port() const {
  return ebof_port_;
}
inline int32_t ReportCmplRequest::ebof_port() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ReportCmplRequest.ebof_port)
  return _internal_ebof_port();
}
inline void ReportCmplRequest::_internal_set_ebof_port(int32_t value) {
  
  ebof_port_ = value;
}
inline void ReportCmplRequest::set_ebof_port(int32_t value) {
  _internal_set_ebof_port(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.ReportCmplRequest.ebof_port)
}

// repeated .FLINT_RPC_MESSAGE.IOCompletion completions = 3;
inline int ReportCmplRequest::_internal_completions_size() const {
  return completions_.size();
}
inline int ReportCmplRequest::completions_size() const {
  return _internal_completions_size();
}
inline void ReportCmplRequest::clear_completions() {
  completions_.Clear();
}
inline ::FLINT_RPC_MESSAGE::IOCompletion* ReportCmplRequest::mutable_completions(int index) {
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.ReportCmplRequest.completions)
  return completions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::IOCompletion >*
ReportCmplRequest::mutable_completions() {
  // @@protoc_insertion_point(field_mutable_list:FLINT_RPC_MESSAGE.ReportCmplRequest.completions)
  return &completions_;
}
inline const ::FLINT_RPC_MESSAGE::IOCompletion& ReportCmplRequest::_internal_completions(int index) const {
  return completions_.Get(index);
}
inline const ::FLINT_RPC_MESSAGE::IOCompletion& ReportCmplRequest::completions(int index) const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ReportCmplRequest.completions)
  return _internal_completions(index);
}
inline ::FLINT_RPC_MESSAGE::IOCompletion* ReportCmplRequest::_internal_add_completions() {
  return completions_.Add();
}
inline ::FLINT_RPC_MESSAGE::IOCompletion* ReportCmplRequest::add_completions() {
  ::FLINT_RPC_MESSAGE::IOCompletion* _add = _internal_add_completions();
  // @@protoc_insertion_point(field_add:FLINT_RPC_MESSAGE.ReportCmplRequest.completions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::IOCompletion >&
ReportCmplRequest::completions() const {
  // @@protoc_insertion_point(field_list:FLINT_RPC_MESSAGE.ReportCmplRequest.completions)
  return completions_;
}

// bool in_sync_window = 4;
inline void ReportCmplRequest::clear_in_sync_window() {
  in_sync_window_ = false;
}
inline bool ReportCmplRequest::_internal_in_sync_window() const {
  return in_sync_window_;
}
inline bool ReportCmplRequest::in_sync_window() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ReportCmplRequest.in_sync_window)
  return _internal_in_sync_window();
}
inline void ReportCmplRequest::_internal_set_in_sync_window(bool value) {
  
  in_sync_window_ = value;
}
inline void ReportCmplRequest::set_in_sync_window(bool value) {
  _internal_set_in_sync_window(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.ReportCmplRequest.in_sync_window)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ViewRecency

// uint64 net_port_view_recency = 1;
inline void ViewRecency::clear_net_port_view_recency() {
  net_port_view_recency_ = uint64_t{0u};
}
inline uint64_t ViewRecency::_internal_net_port_view_recency() const {
  return net_port_view_recency_;
}
inline uint64_t ViewRecency::net_port_view_recency() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ViewRecency.net_port_view_recency)
  return _internal_net_port_view_recency();
}
inline void ViewRecency::_internal_set_net_port_view_recency(uint64_t value) {
  
  net_port_view_recency_ = value;
}
inline void ViewRecency::set_net_port_view_recency(uint64_t value) {
  _internal_set_net_port_view_recency(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.ViewRecency.net_port_view_recency)
}

// uint64 net_pipe_view_recency = 2;
inline void ViewRecency::clear_net_pipe_view_recency() {
  net_pipe_view_recency_ = uint64_t{0u};
}
inline uint64_t ViewRecency::_internal_net_pipe_view_recency() const {
  return net_pipe_view_recency_;
}
inline uint64_t ViewRecency::net_pipe_view_recency() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ViewRecency.net_pipe_view_recency)
  return _internal_net_pipe_view_recency();
}
inline void ViewRecency::_internal_set_net_pipe_view_recency(uint64_t value) {
  
  net_pipe_view_recency_ = value;
}
inline void ViewRecency::set_net_pipe_view_recency(uint64_t value) {
  _internal_set_net_pipe_view_recency(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.ViewRecency.net_pipe_view_recency)
}

// map<int32, uint64> io_port_view_recency = 3;
inline int ViewRecency::_internal_io_port_view_recency_size() const {
  return io_port_view_recency_.size();
}
inline int ViewRecency::io_port_view_recency_size() const {
  return _internal_io_port_view_recency_size();
}
inline void ViewRecency::clear_io_port_view_recency() {
  io_port_view_recency_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
ViewRecency::_internal_io_port_view_recency() const {
  return io_port_view_recency_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
ViewRecency::io_port_view_recency() const {
  // @@protoc_insertion_point(field_map:FLINT_RPC_MESSAGE.ViewRecency.io_port_view_recency)
  return _internal_io_port_view_recency();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
ViewRecency::_internal_mutable_io_port_view_recency() {
  return io_port_view_recency_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
ViewRecency::mutable_io_port_view_recency() {
  // @@protoc_insertion_point(field_mutable_map:FLINT_RPC_MESSAGE.ViewRecency.io_port_view_recency)
  return _internal_mutable_io_port_view_recency();
}

// map<int32, uint64> io_pipe_view_recency = 4;
inline int ViewRecency::_internal_io_pipe_view_recency_size() const {
  return io_pipe_view_recency_.size();
}
inline int ViewRecency::io_pipe_view_recency_size() const {
  return _internal_io_pipe_view_recency_size();
}
inline void ViewRecency::clear_io_pipe_view_recency() {
  io_pipe_view_recency_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
ViewRecency::_internal_io_pipe_view_recency() const {
  return io_pipe_view_recency_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
ViewRecency::io_pipe_view_recency() const {
  // @@protoc_insertion_point(field_map:FLINT_RPC_MESSAGE.ViewRecency.io_pipe_view_recency)
  return _internal_io_pipe_view_recency();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
ViewRecency::_internal_mutable_io_pipe_view_recency() {
  return io_pipe_view_recency_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
ViewRecency::mutable_io_pipe_view_recency() {
  // @@protoc_insertion_point(field_mutable_map:FLINT_RPC_MESSAGE.ViewRecency.io_pipe_view_recency)
  return _internal_mutable_io_pipe_view_recency();
}

// map<int32, uint64> ssd_view_recency = 5;
inline int ViewRecency::_internal_ssd_view_recency_size() const {
  return ssd_view_recency_.size();
}
inline int ViewRecency::ssd_view_recency_size() const {
  return _internal_ssd_view_recency_size();
}
inline void ViewRecency::clear_ssd_view_recency() {
  ssd_view_recency_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
ViewRecency::_internal_ssd_view_recency() const {
  return ssd_view_recency_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >&
ViewRecency::ssd_view_recency() const {
  // @@protoc_insertion_point(field_map:FLINT_RPC_MESSAGE.ViewRecency.ssd_view_recency)
  return _internal_ssd_view_recency();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
ViewRecency::_internal_mutable_ssd_view_recency() {
  return ssd_view_recency_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >*
ViewRecency::mutable_ssd_view_recency() {
  // @@protoc_insertion_point(field_mutable_map:FLINT_RPC_MESSAGE.ViewRecency.ssd_view_recency)
  return _internal_mutable_ssd_view_recency();
}

// -------------------------------------------------------------------

// ReportCmplResponse

// int32 err_code = 1;
inline void ReportCmplResponse::clear_err_code() {
  err_code_ = 0;
}
inline int32_t ReportCmplResponse::_internal_err_code() const {
  return err_code_;
}
inline int32_t ReportCmplResponse::err_code() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ReportCmplResponse.err_code)
  return _internal_err_code();
}
inline void ReportCmplResponse::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void ReportCmplResponse::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.ReportCmplResponse.err_code)
}

// optional .FLINT_RPC_MESSAGE.ViewRecency view_recency = 2;
inline bool ReportCmplResponse::_internal_has_view_recency() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || view_recency_ != nullptr);
  return value;
}
inline bool ReportCmplResponse::has_view_recency() const {
  return _internal_has_view_recency();
}
inline void ReportCmplResponse::clear_view_recency() {
  if (view_recency_ != nullptr) view_recency_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::FLINT_RPC_MESSAGE::ViewRecency& ReportCmplResponse::_internal_view_recency() const {
  const ::FLINT_RPC_MESSAGE::ViewRecency* p = view_recency_;
  return p != nullptr ? *p : reinterpret_cast<const ::FLINT_RPC_MESSAGE::ViewRecency&>(
      ::FLINT_RPC_MESSAGE::_ViewRecency_default_instance_);
}
inline const ::FLINT_RPC_MESSAGE::ViewRecency& ReportCmplResponse::view_recency() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.ReportCmplResponse.view_recency)
  return _internal_view_recency();
}
inline void ReportCmplResponse::unsafe_arena_set_allocated_view_recency(
    ::FLINT_RPC_MESSAGE::ViewRecency* view_recency) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_recency_);
  }
  view_recency_ = view_recency;
  if (view_recency) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FLINT_RPC_MESSAGE.ReportCmplResponse.view_recency)
}
inline ::FLINT_RPC_MESSAGE::ViewRecency* ReportCmplResponse::release_view_recency() {
  _has_bits_[0] &= ~0x00000001u;
  ::FLINT_RPC_MESSAGE::ViewRecency* temp = view_recency_;
  view_recency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FLINT_RPC_MESSAGE::ViewRecency* ReportCmplResponse::unsafe_arena_release_view_recency() {
  // @@protoc_insertion_point(field_release:FLINT_RPC_MESSAGE.ReportCmplResponse.view_recency)
  _has_bits_[0] &= ~0x00000001u;
  ::FLINT_RPC_MESSAGE::ViewRecency* temp = view_recency_;
  view_recency_ = nullptr;
  return temp;
}
inline ::FLINT_RPC_MESSAGE::ViewRecency* ReportCmplResponse::_internal_mutable_view_recency() {
  _has_bits_[0] |= 0x00000001u;
  if (view_recency_ == nullptr) {
    auto* p = CreateMaybeMessage<::FLINT_RPC_MESSAGE::ViewRecency>(GetArenaForAllocation());
    view_recency_ = p;
  }
  return view_recency_;
}
inline ::FLINT_RPC_MESSAGE::ViewRecency* ReportCmplResponse::mutable_view_recency() {
  ::FLINT_RPC_MESSAGE::ViewRecency* _msg = _internal_mutable_view_recency();
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.ReportCmplResponse.view_recency)
  return _msg;
}
inline void ReportCmplResponse::set_allocated_view_recency(::FLINT_RPC_MESSAGE::ViewRecency* view_recency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete view_recency_;
  }
  if (view_recency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FLINT_RPC_MESSAGE::ViewRecency>::GetOwningArena(view_recency);
    if (message_arena != submessage_arena) {
      view_recency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_recency, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  view_recency_ = view_recency;
  // @@protoc_insertion_point(field_set_allocated:FLINT_RPC_MESSAGE.ReportCmplResponse.view_recency)
}

// -------------------------------------------------------------------

// EventCallback

// int32 op = 1;
inline void EventCallback::clear_op() {
  op_ = 0;
}
inline int32_t EventCallback::_internal_op() const {
  return op_;
}
inline int32_t EventCallback::op() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.EventCallback.op)
  return _internal_op();
}
inline void EventCallback::_internal_set_op(int32_t value) {
  
  op_ = value;
}
inline void EventCallback::set_op(int32_t value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.EventCallback.op)
}

// float threshold = 2;
inline void EventCallback::clear_threshold() {
  threshold_ = 0;
}
inline float EventCallback::_internal_threshold() const {
  return threshold_;
}
inline float EventCallback::threshold() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.EventCallback.threshold)
  return _internal_threshold();
}
inline void EventCallback::_internal_set_threshold(float value) {
  
  threshold_ = value;
}
inline void EventCallback::set_threshold(float value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.EventCallback.threshold)
}

// int32 port_or_ssd = 3;
inline void EventCallback::clear_port_or_ssd() {
  port_or_ssd_ = 0;
}
inline int32_t EventCallback::_internal_port_or_ssd() const {
  return port_or_ssd_;
}
inline int32_t EventCallback::port_or_ssd() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.EventCallback.port_or_ssd)
  return _internal_port_or_ssd();
}
inline void EventCallback::_internal_set_port_or_ssd(int32_t value) {
  
  port_or_ssd_ = value;
}
inline void EventCallback::set_port_or_ssd(int32_t value) {
  _internal_set_port_or_ssd(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.EventCallback.port_or_ssd)
}

// int32 io_type = 4;
inline void EventCallback::clear_io_type() {
  io_type_ = 0;
}
inline int32_t EventCallback::_internal_io_type() const {
  return io_type_;
}
inline int32_t EventCallback::io_type() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.EventCallback.io_type)
  return _internal_io_type();
}
inline void EventCallback::_internal_set_io_type(int32_t value) {
  
  io_type_ = value;
}
inline void EventCallback::set_io_type(int32_t value) {
  _internal_set_io_type(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.EventCallback.io_type)
}

// int32 cmp_op = 5;
inline void EventCallback::clear_cmp_op() {
  cmp_op_ = 0;
}
inline int32_t EventCallback::_internal_cmp_op() const {
  return cmp_op_;
}
inline int32_t EventCallback::cmp_op() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.EventCallback.cmp_op)
  return _internal_cmp_op();
}
inline void EventCallback::_internal_set_cmp_op(int32_t value) {
  
  cmp_op_ = value;
}
inline void EventCallback::set_cmp_op(int32_t value) {
  _internal_set_cmp_op(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.EventCallback.cmp_op)
}

// -------------------------------------------------------------------

// RegisterEventCallbackRequest

// int32 client_id = 1;
inline void RegisterEventCallbackRequest::clear_client_id() {
  client_id_ = 0;
}
inline int32_t RegisterEventCallbackRequest::_internal_client_id() const {
  return client_id_;
}
inline int32_t RegisterEventCallbackRequest::client_id() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest.client_id)
  return _internal_client_id();
}
inline void RegisterEventCallbackRequest::_internal_set_client_id(int32_t value) {
  
  client_id_ = value;
}
inline void RegisterEventCallbackRequest::set_client_id(int32_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest.client_id)
}

// repeated .FLINT_RPC_MESSAGE.EventCallback callbacks = 2;
inline int RegisterEventCallbackRequest::_internal_callbacks_size() const {
  return callbacks_.size();
}
inline int RegisterEventCallbackRequest::callbacks_size() const {
  return _internal_callbacks_size();
}
inline void RegisterEventCallbackRequest::clear_callbacks() {
  callbacks_.Clear();
}
inline ::FLINT_RPC_MESSAGE::EventCallback* RegisterEventCallbackRequest::mutable_callbacks(int index) {
  // @@protoc_insertion_point(field_mutable:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest.callbacks)
  return callbacks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::EventCallback >*
RegisterEventCallbackRequest::mutable_callbacks() {
  // @@protoc_insertion_point(field_mutable_list:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest.callbacks)
  return &callbacks_;
}
inline const ::FLINT_RPC_MESSAGE::EventCallback& RegisterEventCallbackRequest::_internal_callbacks(int index) const {
  return callbacks_.Get(index);
}
inline const ::FLINT_RPC_MESSAGE::EventCallback& RegisterEventCallbackRequest::callbacks(int index) const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest.callbacks)
  return _internal_callbacks(index);
}
inline ::FLINT_RPC_MESSAGE::EventCallback* RegisterEventCallbackRequest::_internal_add_callbacks() {
  return callbacks_.Add();
}
inline ::FLINT_RPC_MESSAGE::EventCallback* RegisterEventCallbackRequest::add_callbacks() {
  ::FLINT_RPC_MESSAGE::EventCallback* _add = _internal_add_callbacks();
  // @@protoc_insertion_point(field_add:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest.callbacks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FLINT_RPC_MESSAGE::EventCallback >&
RegisterEventCallbackRequest::callbacks() const {
  // @@protoc_insertion_point(field_list:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest.callbacks)
  return callbacks_;
}

// -------------------------------------------------------------------

// RegisterEventCallbackResponse

// int32 err_code = 1;
inline void RegisterEventCallbackResponse::clear_err_code() {
  err_code_ = 0;
}
inline int32_t RegisterEventCallbackResponse::_internal_err_code() const {
  return err_code_;
}
inline int32_t RegisterEventCallbackResponse::err_code() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RegisterEventCallbackResponse.err_code)
  return _internal_err_code();
}
inline void RegisterEventCallbackResponse::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void RegisterEventCallbackResponse::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RegisterEventCallbackResponse.err_code)
}

// -------------------------------------------------------------------

// BottleneckReportRequest

// repeated int32 congested_ssds = 1;
inline int BottleneckReportRequest::_internal_congested_ssds_size() const {
  return congested_ssds_.size();
}
inline int BottleneckReportRequest::congested_ssds_size() const {
  return _internal_congested_ssds_size();
}
inline void BottleneckReportRequest::clear_congested_ssds() {
  congested_ssds_.Clear();
}
inline int32_t BottleneckReportRequest::_internal_congested_ssds(int index) const {
  return congested_ssds_.Get(index);
}
inline int32_t BottleneckReportRequest::congested_ssds(int index) const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.BottleneckReportRequest.congested_ssds)
  return _internal_congested_ssds(index);
}
inline void BottleneckReportRequest::set_congested_ssds(int index, int32_t value) {
  congested_ssds_.Set(index, value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.BottleneckReportRequest.congested_ssds)
}
inline void BottleneckReportRequest::_internal_add_congested_ssds(int32_t value) {
  congested_ssds_.Add(value);
}
inline void BottleneckReportRequest::add_congested_ssds(int32_t value) {
  _internal_add_congested_ssds(value);
  // @@protoc_insertion_point(field_add:FLINT_RPC_MESSAGE.BottleneckReportRequest.congested_ssds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BottleneckReportRequest::_internal_congested_ssds() const {
  return congested_ssds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BottleneckReportRequest::congested_ssds() const {
  // @@protoc_insertion_point(field_list:FLINT_RPC_MESSAGE.BottleneckReportRequest.congested_ssds)
  return _internal_congested_ssds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BottleneckReportRequest::_internal_mutable_congested_ssds() {
  return &congested_ssds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BottleneckReportRequest::mutable_congested_ssds() {
  // @@protoc_insertion_point(field_mutable_list:FLINT_RPC_MESSAGE.BottleneckReportRequest.congested_ssds)
  return _internal_mutable_congested_ssds();
}

// -------------------------------------------------------------------

// BottleneckReportResponse

// int32 err_code = 1;
inline void BottleneckReportResponse::clear_err_code() {
  err_code_ = 0;
}
inline int32_t BottleneckReportResponse::_internal_err_code() const {
  return err_code_;
}
inline int32_t BottleneckReportResponse::err_code() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.BottleneckReportResponse.err_code)
  return _internal_err_code();
}
inline void BottleneckReportResponse::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void BottleneckReportResponse::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.BottleneckReportResponse.err_code)
}

// -------------------------------------------------------------------

// RequestIOSliceRequest

// int32 client_id = 1;
inline void RequestIOSliceRequest::clear_client_id() {
  client_id_ = 0;
}
inline int32_t RequestIOSliceRequest::_internal_client_id() const {
  return client_id_;
}
inline int32_t RequestIOSliceRequest::client_id() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RequestIOSliceRequest.client_id)
  return _internal_client_id();
}
inline void RequestIOSliceRequest::_internal_set_client_id(int32_t value) {
  
  client_id_ = value;
}
inline void RequestIOSliceRequest::set_client_id(int32_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RequestIOSliceRequest.client_id)
}

// int32 ssd_id = 2;
inline void RequestIOSliceRequest::clear_ssd_id() {
  ssd_id_ = 0;
}
inline int32_t RequestIOSliceRequest::_internal_ssd_id() const {
  return ssd_id_;
}
inline int32_t RequestIOSliceRequest::ssd_id() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RequestIOSliceRequest.ssd_id)
  return _internal_ssd_id();
}
inline void RequestIOSliceRequest::_internal_set_ssd_id(int32_t value) {
  
  ssd_id_ = value;
}
inline void RequestIOSliceRequest::set_ssd_id(int32_t value) {
  _internal_set_ssd_id(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RequestIOSliceRequest.ssd_id)
}

// int32 last_epoch = 3;
inline void RequestIOSliceRequest::clear_last_epoch() {
  last_epoch_ = 0;
}
inline int32_t RequestIOSliceRequest::_internal_last_epoch() const {
  return last_epoch_;
}
inline int32_t RequestIOSliceRequest::last_epoch() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RequestIOSliceRequest.last_epoch)
  return _internal_last_epoch();
}
inline void RequestIOSliceRequest::_internal_set_last_epoch(int32_t value) {
  
  last_epoch_ = value;
}
inline void RequestIOSliceRequest::set_last_epoch(int32_t value) {
  _internal_set_last_epoch(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RequestIOSliceRequest.last_epoch)
}

// -------------------------------------------------------------------

// RequestIOSliceResponse

// int32 err_code = 1;
inline void RequestIOSliceResponse::clear_err_code() {
  err_code_ = 0;
}
inline int32_t RequestIOSliceResponse::_internal_err_code() const {
  return err_code_;
}
inline int32_t RequestIOSliceResponse::err_code() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RequestIOSliceResponse.err_code)
  return _internal_err_code();
}
inline void RequestIOSliceResponse::_internal_set_err_code(int32_t value) {
  
  err_code_ = value;
}
inline void RequestIOSliceResponse::set_err_code(int32_t value) {
  _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RequestIOSliceResponse.err_code)
}

// int32 slice_size = 2;
inline void RequestIOSliceResponse::clear_slice_size() {
  slice_size_ = 0;
}
inline int32_t RequestIOSliceResponse::_internal_slice_size() const {
  return slice_size_;
}
inline int32_t RequestIOSliceResponse::slice_size() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RequestIOSliceResponse.slice_size)
  return _internal_slice_size();
}
inline void RequestIOSliceResponse::_internal_set_slice_size(int32_t value) {
  
  slice_size_ = value;
}
inline void RequestIOSliceResponse::set_slice_size(int32_t value) {
  _internal_set_slice_size(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RequestIOSliceResponse.slice_size)
}

// int32 epoch = 3;
inline void RequestIOSliceResponse::clear_epoch() {
  epoch_ = 0;
}
inline int32_t RequestIOSliceResponse::_internal_epoch() const {
  return epoch_;
}
inline int32_t RequestIOSliceResponse::epoch() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RequestIOSliceResponse.epoch)
  return _internal_epoch();
}
inline void RequestIOSliceResponse::_internal_set_epoch(int32_t value) {
  
  epoch_ = value;
}
inline void RequestIOSliceResponse::set_epoch(int32_t value) {
  _internal_set_epoch(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RequestIOSliceResponse.epoch)
}

// int32 wait_time = 4;
inline void RequestIOSliceResponse::clear_wait_time() {
  wait_time_ = 0;
}
inline int32_t RequestIOSliceResponse::_internal_wait_time() const {
  return wait_time_;
}
inline int32_t RequestIOSliceResponse::wait_time() const {
  // @@protoc_insertion_point(field_get:FLINT_RPC_MESSAGE.RequestIOSliceResponse.wait_time)
  return _internal_wait_time();
}
inline void RequestIOSliceResponse::_internal_set_wait_time(int32_t value) {
  
  wait_time_ = value;
}
inline void RequestIOSliceResponse::set_wait_time(int32_t value) {
  _internal_set_wait_time(value);
  // @@protoc_insertion_point(field_set:FLINT_RPC_MESSAGE.RequestIOSliceResponse.wait_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FLINT_RPC_MESSAGE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
