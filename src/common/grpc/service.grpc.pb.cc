// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace FLINT_RPC_SERVICE {

static const char* VolumeService_method_names[] = {
  "/FLINT_RPC_SERVICE.VolumeService/GetFlintMetadata",
  "/FLINT_RPC_SERVICE.VolumeService/CreateVolume",
  "/FLINT_RPC_SERVICE.VolumeService/OpenVolume",
  "/FLINT_RPC_SERVICE.VolumeService/DeleteVolume",
  "/FLINT_RPC_SERVICE.VolumeService/ListVolumes",
  "/FLINT_RPC_SERVICE.VolumeService/VolumeExtentFault",
};

std::unique_ptr< VolumeService::Stub> VolumeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VolumeService::Stub> stub(new VolumeService::Stub(channel, options));
  return stub;
}

VolumeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetFlintMetadata_(VolumeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateVolume_(VolumeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenVolume_(VolumeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteVolume_(VolumeService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListVolumes_(VolumeService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeExtentFault_(VolumeService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VolumeService::Stub::GetFlintMetadata(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest& request, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFlintMetadata_, context, request, response);
}

void VolumeService::Stub::async::GetFlintMetadata(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* request, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFlintMetadata_, context, request, response, std::move(f));
}

void VolumeService::Stub::async::GetFlintMetadata(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* request, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFlintMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>* VolumeService::Stub::PrepareAsyncGetFlintMetadataRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse, ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFlintMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>* VolumeService::Stub::AsyncGetFlintMetadataRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFlintMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VolumeService::Stub::CreateVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest& request, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FLINT_RPC_MESSAGE::CreateVolumeRequest, ::FLINT_RPC_MESSAGE::CreateVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateVolume_, context, request, response);
}

void VolumeService::Stub::async::CreateVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* request, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FLINT_RPC_MESSAGE::CreateVolumeRequest, ::FLINT_RPC_MESSAGE::CreateVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateVolume_, context, request, response, std::move(f));
}

void VolumeService::Stub::async::CreateVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* request, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::CreateVolumeResponse>* VolumeService::Stub::PrepareAsyncCreateVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FLINT_RPC_MESSAGE::CreateVolumeResponse, ::FLINT_RPC_MESSAGE::CreateVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::CreateVolumeResponse>* VolumeService::Stub::AsyncCreateVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VolumeService::Stub::OpenVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest& request, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FLINT_RPC_MESSAGE::OpenVolumeRequest, ::FLINT_RPC_MESSAGE::OpenVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OpenVolume_, context, request, response);
}

void VolumeService::Stub::async::OpenVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* request, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FLINT_RPC_MESSAGE::OpenVolumeRequest, ::FLINT_RPC_MESSAGE::OpenVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OpenVolume_, context, request, response, std::move(f));
}

void VolumeService::Stub::async::OpenVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* request, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OpenVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::OpenVolumeResponse>* VolumeService::Stub::PrepareAsyncOpenVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FLINT_RPC_MESSAGE::OpenVolumeResponse, ::FLINT_RPC_MESSAGE::OpenVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OpenVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::OpenVolumeResponse>* VolumeService::Stub::AsyncOpenVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOpenVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VolumeService::Stub::DeleteVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest& request, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FLINT_RPC_MESSAGE::DeleteVolumeRequest, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteVolume_, context, request, response);
}

void VolumeService::Stub::async::DeleteVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* request, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FLINT_RPC_MESSAGE::DeleteVolumeRequest, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteVolume_, context, request, response, std::move(f));
}

void VolumeService::Stub::async::DeleteVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* request, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>* VolumeService::Stub::PrepareAsyncDeleteVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse, ::FLINT_RPC_MESSAGE::DeleteVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteVolume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>* VolumeService::Stub::AsyncDeleteVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteVolumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VolumeService::Stub::ListVolumes(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest& request, ::FLINT_RPC_MESSAGE::ListVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FLINT_RPC_MESSAGE::ListVolumeRequest, ::FLINT_RPC_MESSAGE::ListVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListVolumes_, context, request, response);
}

void VolumeService::Stub::async::ListVolumes(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* request, ::FLINT_RPC_MESSAGE::ListVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FLINT_RPC_MESSAGE::ListVolumeRequest, ::FLINT_RPC_MESSAGE::ListVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListVolumes_, context, request, response, std::move(f));
}

void VolumeService::Stub::async::ListVolumes(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* request, ::FLINT_RPC_MESSAGE::ListVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListVolumes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ListVolumeResponse>* VolumeService::Stub::PrepareAsyncListVolumesRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FLINT_RPC_MESSAGE::ListVolumeResponse, ::FLINT_RPC_MESSAGE::ListVolumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListVolumes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ListVolumeResponse>* VolumeService::Stub::AsyncListVolumesRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListVolumesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status VolumeService::Stub::VolumeExtentFault(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest& request, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VolumeExtentFault_, context, request, response);
}

void VolumeService::Stub::async::VolumeExtentFault(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* request, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VolumeExtentFault_, context, request, response, std::move(f));
}

void VolumeService::Stub::async::VolumeExtentFault(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* request, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VolumeExtentFault_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>* VolumeService::Stub::PrepareAsyncVolumeExtentFaultRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse, ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VolumeExtentFault_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>* VolumeService::Stub::AsyncVolumeExtentFaultRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVolumeExtentFaultRaw(context, request, cq);
  result->StartCall();
  return result;
}

VolumeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VolumeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VolumeService::Service, ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* req,
             ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* resp) {
               return service->GetFlintMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VolumeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VolumeService::Service, ::FLINT_RPC_MESSAGE::CreateVolumeRequest, ::FLINT_RPC_MESSAGE::CreateVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* req,
             ::FLINT_RPC_MESSAGE::CreateVolumeResponse* resp) {
               return service->CreateVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VolumeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VolumeService::Service, ::FLINT_RPC_MESSAGE::OpenVolumeRequest, ::FLINT_RPC_MESSAGE::OpenVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* req,
             ::FLINT_RPC_MESSAGE::OpenVolumeResponse* resp) {
               return service->OpenVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VolumeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VolumeService::Service, ::FLINT_RPC_MESSAGE::DeleteVolumeRequest, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* req,
             ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* resp) {
               return service->DeleteVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VolumeService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VolumeService::Service, ::FLINT_RPC_MESSAGE::ListVolumeRequest, ::FLINT_RPC_MESSAGE::ListVolumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FLINT_RPC_MESSAGE::ListVolumeRequest* req,
             ::FLINT_RPC_MESSAGE::ListVolumeResponse* resp) {
               return service->ListVolumes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VolumeService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VolumeService::Service, ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VolumeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* req,
             ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* resp) {
               return service->VolumeExtentFault(ctx, req, resp);
             }, this)));
}

VolumeService::Service::~Service() {
}

::grpc::Status VolumeService::Service::GetFlintMetadata(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* request, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VolumeService::Service::CreateVolume(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* request, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VolumeService::Service::OpenVolume(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* request, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VolumeService::Service::DeleteVolume(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* request, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VolumeService::Service::ListVolumes(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* request, ::FLINT_RPC_MESSAGE::ListVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VolumeService::Service::VolumeExtentFault(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* request, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SchedulerService_method_names[] = {
  "/FLINT_RPC_SERVICE.SchedulerService/RegisterClient",
  "/FLINT_RPC_SERVICE.SchedulerService/UnregisterClient",
  "/FLINT_RPC_SERVICE.SchedulerService/UpdateClientSlo",
  "/FLINT_RPC_SERVICE.SchedulerService/RegisterEventCallbacks",
  "/FLINT_RPC_SERVICE.SchedulerService/PullView",
  "/FLINT_RPC_SERVICE.SchedulerService/ReportCmpl",
  "/FLINT_RPC_SERVICE.SchedulerService/RequestIOSlice",
};

std::unique_ptr< SchedulerService::Stub> SchedulerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SchedulerService::Stub> stub(new SchedulerService::Stub(channel, options));
  return stub;
}

SchedulerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RegisterClient_(SchedulerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnregisterClient_(SchedulerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateClientSlo_(SchedulerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterEventCallbacks_(SchedulerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PullView_(SchedulerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReportCmpl_(SchedulerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestIOSlice_(SchedulerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SchedulerService::Stub::RegisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::FLINT_RPC_MESSAGE::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterClient_, context, request, response);
}

void SchedulerService::Stub::async::RegisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterClient_, context, request, response, std::move(f));
}

void SchedulerService::Stub::async::RegisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>* SchedulerService::Stub::PrepareAsyncRegisterClientRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FLINT_RPC_MESSAGE::RegisterResponse, ::FLINT_RPC_MESSAGE::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>* SchedulerService::Stub::AsyncRegisterClientRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SchedulerService::Stub::UnregisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::FLINT_RPC_MESSAGE::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnregisterClient_, context, request, response);
}

void SchedulerService::Stub::async::UnregisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnregisterClient_, context, request, response, std::move(f));
}

void SchedulerService::Stub::async::UnregisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnregisterClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>* SchedulerService::Stub::PrepareAsyncUnregisterClientRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FLINT_RPC_MESSAGE::RegisterResponse, ::FLINT_RPC_MESSAGE::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnregisterClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>* SchedulerService::Stub::AsyncUnregisterClientRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnregisterClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SchedulerService::Stub::UpdateClientSlo(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::FLINT_RPC_MESSAGE::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateClientSlo_, context, request, response);
}

void SchedulerService::Stub::async::UpdateClientSlo(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateClientSlo_, context, request, response, std::move(f));
}

void SchedulerService::Stub::async::UpdateClientSlo(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateClientSlo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>* SchedulerService::Stub::PrepareAsyncUpdateClientSloRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FLINT_RPC_MESSAGE::RegisterResponse, ::FLINT_RPC_MESSAGE::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateClientSlo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>* SchedulerService::Stub::AsyncUpdateClientSloRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateClientSloRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SchedulerService::Stub::RegisterEventCallbacks(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest& request, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterEventCallbacks_, context, request, response);
}

void SchedulerService::Stub::async::RegisterEventCallbacks(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* request, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterEventCallbacks_, context, request, response, std::move(f));
}

void SchedulerService::Stub::async::RegisterEventCallbacks(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* request, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterEventCallbacks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>* SchedulerService::Stub::PrepareAsyncRegisterEventCallbacksRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse, ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterEventCallbacks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>* SchedulerService::Stub::AsyncRegisterEventCallbacksRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterEventCallbacksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SchedulerService::Stub::PullView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest& request, ::FLINT_RPC_MESSAGE::PullViewResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FLINT_RPC_MESSAGE::PullViewRequest, ::FLINT_RPC_MESSAGE::PullViewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PullView_, context, request, response);
}

void SchedulerService::Stub::async::PullView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest* request, ::FLINT_RPC_MESSAGE::PullViewResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FLINT_RPC_MESSAGE::PullViewRequest, ::FLINT_RPC_MESSAGE::PullViewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PullView_, context, request, response, std::move(f));
}

void SchedulerService::Stub::async::PullView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest* request, ::FLINT_RPC_MESSAGE::PullViewResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PullView_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PullViewResponse>* SchedulerService::Stub::PrepareAsyncPullViewRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FLINT_RPC_MESSAGE::PullViewResponse, ::FLINT_RPC_MESSAGE::PullViewRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PullView_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PullViewResponse>* SchedulerService::Stub::AsyncPullViewRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPullViewRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SchedulerService::Stub::ReportCmpl(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest& request, ::FLINT_RPC_MESSAGE::ReportCmplResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FLINT_RPC_MESSAGE::ReportCmplRequest, ::FLINT_RPC_MESSAGE::ReportCmplResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReportCmpl_, context, request, response);
}

void SchedulerService::Stub::async::ReportCmpl(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* request, ::FLINT_RPC_MESSAGE::ReportCmplResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FLINT_RPC_MESSAGE::ReportCmplRequest, ::FLINT_RPC_MESSAGE::ReportCmplResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportCmpl_, context, request, response, std::move(f));
}

void SchedulerService::Stub::async::ReportCmpl(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* request, ::FLINT_RPC_MESSAGE::ReportCmplResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportCmpl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ReportCmplResponse>* SchedulerService::Stub::PrepareAsyncReportCmplRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FLINT_RPC_MESSAGE::ReportCmplResponse, ::FLINT_RPC_MESSAGE::ReportCmplRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReportCmpl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ReportCmplResponse>* SchedulerService::Stub::AsyncReportCmplRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReportCmplRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SchedulerService::Stub::RequestIOSlice(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest& request, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FLINT_RPC_MESSAGE::RequestIOSliceRequest, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestIOSlice_, context, request, response);
}

void SchedulerService::Stub::async::RequestIOSlice(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* request, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FLINT_RPC_MESSAGE::RequestIOSliceRequest, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestIOSlice_, context, request, response, std::move(f));
}

void SchedulerService::Stub::async::RequestIOSlice(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* request, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestIOSlice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>* SchedulerService::Stub::PrepareAsyncRequestIOSliceRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse, ::FLINT_RPC_MESSAGE::RequestIOSliceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestIOSlice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>* SchedulerService::Stub::AsyncRequestIOSliceRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestIOSliceRaw(context, request, cq);
  result->StartCall();
  return result;
}

SchedulerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SchedulerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SchedulerService::Service, ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SchedulerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FLINT_RPC_MESSAGE::RegisterRequest* req,
             ::FLINT_RPC_MESSAGE::RegisterResponse* resp) {
               return service->RegisterClient(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SchedulerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SchedulerService::Service, ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SchedulerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FLINT_RPC_MESSAGE::RegisterRequest* req,
             ::FLINT_RPC_MESSAGE::RegisterResponse* resp) {
               return service->UnregisterClient(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SchedulerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SchedulerService::Service, ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SchedulerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FLINT_RPC_MESSAGE::RegisterRequest* req,
             ::FLINT_RPC_MESSAGE::RegisterResponse* resp) {
               return service->UpdateClientSlo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SchedulerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SchedulerService::Service, ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SchedulerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* req,
             ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* resp) {
               return service->RegisterEventCallbacks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SchedulerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SchedulerService::Service, ::FLINT_RPC_MESSAGE::PullViewRequest, ::FLINT_RPC_MESSAGE::PullViewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SchedulerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FLINT_RPC_MESSAGE::PullViewRequest* req,
             ::FLINT_RPC_MESSAGE::PullViewResponse* resp) {
               return service->PullView(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SchedulerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SchedulerService::Service, ::FLINT_RPC_MESSAGE::ReportCmplRequest, ::FLINT_RPC_MESSAGE::ReportCmplResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SchedulerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FLINT_RPC_MESSAGE::ReportCmplRequest* req,
             ::FLINT_RPC_MESSAGE::ReportCmplResponse* resp) {
               return service->ReportCmpl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SchedulerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SchedulerService::Service, ::FLINT_RPC_MESSAGE::RequestIOSliceRequest, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SchedulerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* req,
             ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* resp) {
               return service->RequestIOSlice(ctx, req, resp);
             }, this)));
}

SchedulerService::Service::~Service() {
}

::grpc::Status SchedulerService::Service::RegisterClient(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SchedulerService::Service::UnregisterClient(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SchedulerService::Service::UpdateClientSlo(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SchedulerService::Service::RegisterEventCallbacks(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* request, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SchedulerService::Service::PullView(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest* request, ::FLINT_RPC_MESSAGE::PullViewResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SchedulerService::Service::ReportCmpl(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* request, ::FLINT_RPC_MESSAGE::ReportCmplResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SchedulerService::Service::RequestIOSlice(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* request, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* LocalSchedulerService_method_names[] = {
  "/FLINT_RPC_SERVICE.LocalSchedulerService/PushView",
  "/FLINT_RPC_SERVICE.LocalSchedulerService/BottleneckReport",
};

std::unique_ptr< LocalSchedulerService::Stub> LocalSchedulerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LocalSchedulerService::Stub> stub(new LocalSchedulerService::Stub(channel, options));
  return stub;
}

LocalSchedulerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PushView_(LocalSchedulerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BottleneckReport_(LocalSchedulerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LocalSchedulerService::Stub::PushView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest& request, ::FLINT_RPC_MESSAGE::PushViewResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FLINT_RPC_MESSAGE::PushViewRequest, ::FLINT_RPC_MESSAGE::PushViewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PushView_, context, request, response);
}

void LocalSchedulerService::Stub::async::PushView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest* request, ::FLINT_RPC_MESSAGE::PushViewResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FLINT_RPC_MESSAGE::PushViewRequest, ::FLINT_RPC_MESSAGE::PushViewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushView_, context, request, response, std::move(f));
}

void LocalSchedulerService::Stub::async::PushView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest* request, ::FLINT_RPC_MESSAGE::PushViewResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushView_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PushViewResponse>* LocalSchedulerService::Stub::PrepareAsyncPushViewRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FLINT_RPC_MESSAGE::PushViewResponse, ::FLINT_RPC_MESSAGE::PushViewRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PushView_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PushViewResponse>* LocalSchedulerService::Stub::AsyncPushViewRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushViewRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocalSchedulerService::Stub::BottleneckReport(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest& request, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::FLINT_RPC_MESSAGE::BottleneckReportRequest, ::FLINT_RPC_MESSAGE::BottleneckReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BottleneckReport_, context, request, response);
}

void LocalSchedulerService::Stub::async::BottleneckReport(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* request, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::FLINT_RPC_MESSAGE::BottleneckReportRequest, ::FLINT_RPC_MESSAGE::BottleneckReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BottleneckReport_, context, request, response, std::move(f));
}

void LocalSchedulerService::Stub::async::BottleneckReport(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* request, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BottleneckReport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::BottleneckReportResponse>* LocalSchedulerService::Stub::PrepareAsyncBottleneckReportRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::FLINT_RPC_MESSAGE::BottleneckReportResponse, ::FLINT_RPC_MESSAGE::BottleneckReportRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BottleneckReport_, context, request);
}

::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::BottleneckReportResponse>* LocalSchedulerService::Stub::AsyncBottleneckReportRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBottleneckReportRaw(context, request, cq);
  result->StartCall();
  return result;
}

LocalSchedulerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocalSchedulerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocalSchedulerService::Service, ::FLINT_RPC_MESSAGE::PushViewRequest, ::FLINT_RPC_MESSAGE::PushViewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocalSchedulerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FLINT_RPC_MESSAGE::PushViewRequest* req,
             ::FLINT_RPC_MESSAGE::PushViewResponse* resp) {
               return service->PushView(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocalSchedulerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocalSchedulerService::Service, ::FLINT_RPC_MESSAGE::BottleneckReportRequest, ::FLINT_RPC_MESSAGE::BottleneckReportResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocalSchedulerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* req,
             ::FLINT_RPC_MESSAGE::BottleneckReportResponse* resp) {
               return service->BottleneckReport(ctx, req, resp);
             }, this)));
}

LocalSchedulerService::Service::~Service() {
}

::grpc::Status LocalSchedulerService::Service::PushView(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest* request, ::FLINT_RPC_MESSAGE::PushViewResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocalSchedulerService::Service::BottleneckReport(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* request, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace FLINT_RPC_SERVICE

