// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace FLINT_RPC_MESSAGE {
constexpr GetFlintMetadataRequest::GetFlintMetadataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hostname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetFlintMetadataRequestDefaultTypeInternal {
  constexpr GetFlintMetadataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFlintMetadataRequestDefaultTypeInternal() {}
  union {
    GetFlintMetadataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFlintMetadataRequestDefaultTypeInternal _GetFlintMetadataRequest_default_instance_;
constexpr FlintMetadata_SsdIdMapEntry_DoNotUse::FlintMetadata_SsdIdMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FlintMetadata_SsdIdMapEntry_DoNotUseDefaultTypeInternal {
  constexpr FlintMetadata_SsdIdMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlintMetadata_SsdIdMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FlintMetadata_SsdIdMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlintMetadata_SsdIdMapEntry_DoNotUseDefaultTypeInternal _FlintMetadata_SsdIdMapEntry_DoNotUse_default_instance_;
constexpr FlintMetadata::FlintMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ssd_id_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , ebof_port_(0)
  , nic_ports_num_(0){}
struct FlintMetadataDefaultTypeInternal {
  constexpr FlintMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlintMetadataDefaultTypeInternal() {}
  union {
    FlintMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlintMetadataDefaultTypeInternal _FlintMetadata_default_instance_;
constexpr GetFlintMetadataResponse::GetFlintMetadataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr)
  , err_code_(0){}
struct GetFlintMetadataResponseDefaultTypeInternal {
  constexpr GetFlintMetadataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetFlintMetadataResponseDefaultTypeInternal() {}
  union {
    GetFlintMetadataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetFlintMetadataResponseDefaultTypeInternal _GetFlintMetadataResponse_default_instance_;
constexpr CreateVolumeRequest_SsdPreferenceEntry_DoNotUse::CreateVolumeRequest_SsdPreferenceEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateVolumeRequest_SsdPreferenceEntry_DoNotUseDefaultTypeInternal {
  constexpr CreateVolumeRequest_SsdPreferenceEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateVolumeRequest_SsdPreferenceEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateVolumeRequest_SsdPreferenceEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateVolumeRequest_SsdPreferenceEntry_DoNotUseDefaultTypeInternal _CreateVolumeRequest_SsdPreferenceEntry_DoNotUse_default_instance_;
constexpr CreateVolumeRequest::CreateVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ssd_preference_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(uint64_t{0u})
  , rep_factor_(0u)
  , flags_(0u)
  , policy_(0u){}
struct CreateVolumeRequestDefaultTypeInternal {
  constexpr CreateVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateVolumeRequestDefaultTypeInternal() {}
  union {
    CreateVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateVolumeRequestDefaultTypeInternal _CreateVolumeRequest_default_instance_;
constexpr CreateVolumeResponse::CreateVolumeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , err_code_(0){}
struct CreateVolumeResponseDefaultTypeInternal {
  constexpr CreateVolumeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateVolumeResponseDefaultTypeInternal() {}
  union {
    CreateVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateVolumeResponseDefaultTypeInternal _CreateVolumeResponse_default_instance_;
constexpr OpenVolumeRequest::OpenVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OpenVolumeRequestDefaultTypeInternal {
  constexpr OpenVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenVolumeRequestDefaultTypeInternal() {}
  union {
    OpenVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenVolumeRequestDefaultTypeInternal _OpenVolumeRequest_default_instance_;
constexpr ExtentLocator::ExtentLocator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rep_role_(0u)
  , ssd_id_(0u)
  , pext_num_(0u){}
struct ExtentLocatorDefaultTypeInternal {
  constexpr ExtentLocatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExtentLocatorDefaultTypeInternal() {}
  union {
    ExtentLocator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExtentLocatorDefaultTypeInternal _ExtentLocator_default_instance_;
constexpr ExtentLocators::ExtentLocators(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : locators_(){}
struct ExtentLocatorsDefaultTypeInternal {
  constexpr ExtentLocatorsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExtentLocatorsDefaultTypeInternal() {}
  union {
    ExtentLocators _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExtentLocatorsDefaultTypeInternal _ExtentLocators_default_instance_;
constexpr OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse::OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUseDefaultTypeInternal {
  constexpr OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUseDefaultTypeInternal _OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse_default_instance_;
constexpr OpenVolumeResponse::OpenVolumeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extent_locator_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , err_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , err_code_(0)
  , rep_factor_(0u)
  , size_(uint64_t{0u})
  , flags_(0u){}
struct OpenVolumeResponseDefaultTypeInternal {
  constexpr OpenVolumeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenVolumeResponseDefaultTypeInternal() {}
  union {
    OpenVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenVolumeResponseDefaultTypeInternal _OpenVolumeResponse_default_instance_;
constexpr VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse::VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUseDefaultTypeInternal {
  constexpr VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUseDefaultTypeInternal() {}
  union {
    VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUseDefaultTypeInternal _VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse_default_instance_;
constexpr VolumeExtentFaultRequest::VolumeExtentFaultRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lexts_()
  , _lexts_cached_byte_size_(0)
  , ssd_preference_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , policy_(0u){}
struct VolumeExtentFaultRequestDefaultTypeInternal {
  constexpr VolumeExtentFaultRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeExtentFaultRequestDefaultTypeInternal() {}
  union {
    VolumeExtentFaultRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeExtentFaultRequestDefaultTypeInternal _VolumeExtentFaultRequest_default_instance_;
constexpr VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse::VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUseDefaultTypeInternal {
  constexpr VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUseDefaultTypeInternal _VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse_default_instance_;
constexpr VolumeExtentFaultResponse::VolumeExtentFaultResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extent_locator_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , err_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , err_code_(0){}
struct VolumeExtentFaultResponseDefaultTypeInternal {
  constexpr VolumeExtentFaultResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeExtentFaultResponseDefaultTypeInternal() {}
  union {
    VolumeExtentFaultResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeExtentFaultResponseDefaultTypeInternal _VolumeExtentFaultResponse_default_instance_;
constexpr DeleteVolumeRequest::DeleteVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteVolumeRequestDefaultTypeInternal {
  constexpr DeleteVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteVolumeRequestDefaultTypeInternal() {}
  union {
    DeleteVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteVolumeRequestDefaultTypeInternal _DeleteVolumeRequest_default_instance_;
constexpr DeleteVolumeResponse::DeleteVolumeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , err_code_(0){}
struct DeleteVolumeResponseDefaultTypeInternal {
  constexpr DeleteVolumeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteVolumeResponseDefaultTypeInternal() {}
  union {
    DeleteVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteVolumeResponseDefaultTypeInternal _DeleteVolumeResponse_default_instance_;
constexpr ListVolumeRequest::ListVolumeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , list_all_(false){}
struct ListVolumeRequestDefaultTypeInternal {
  constexpr ListVolumeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListVolumeRequestDefaultTypeInternal() {}
  union {
    ListVolumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListVolumeRequestDefaultTypeInternal _ListVolumeRequest_default_instance_;
constexpr VolumeAttrs::VolumeAttrs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(uint64_t{0u})
  , rep_factor_(0u)
  , flags_(0u){}
struct VolumeAttrsDefaultTypeInternal {
  constexpr VolumeAttrsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolumeAttrsDefaultTypeInternal() {}
  union {
    VolumeAttrs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolumeAttrsDefaultTypeInternal _VolumeAttrs_default_instance_;
constexpr ListVolumeResponse::ListVolumeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vol_attrs_()
  , err_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , err_code_(0){}
struct ListVolumeResponseDefaultTypeInternal {
  constexpr ListVolumeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListVolumeResponseDefaultTypeInternal() {}
  union {
    ListVolumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListVolumeResponseDefaultTypeInternal _ListVolumeResponse_default_instance_;
constexpr RegisterRequest::RegisterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : local_scheduler_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_id_(0)
  , local_scheduler_port_(0)
  , ebof_port_(0)
  , slo_level_(0){}
struct RegisterRequestDefaultTypeInternal {
  constexpr RegisterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterRequestDefaultTypeInternal() {}
  union {
    RegisterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
constexpr RegisterResponse::RegisterResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , err_code_(0)
  , client_id_(0){}
struct RegisterResponseDefaultTypeInternal {
  constexpr RegisterResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterResponseDefaultTypeInternal() {}
  union {
    RegisterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
constexpr PortView::PortView(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : read_size_dist_()
  , _read_size_dist_cached_byte_size_(0)
  , write_size_dist_()
  , _write_size_dist_cached_byte_size_(0)
  , port_id_(0)
  , read_bw_(0)
  , write_bw_(0)
  , read_iops_(0)
  , recency_counter_(uint64_t{0u})
  , write_iops_(0){}
struct PortViewDefaultTypeInternal {
  constexpr PortViewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortViewDefaultTypeInternal() {}
  union {
    PortView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortViewDefaultTypeInternal _PortView_default_instance_;
constexpr PipeView::PipeView(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pipe_id_(0)
  , read_bw_(0)
  , write_bw_(0)
  , read_iops_(0)
  , recency_counter_(uint64_t{0u})
  , write_iops_(0){}
struct PipeViewDefaultTypeInternal {
  constexpr PipeViewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PipeViewDefaultTypeInternal() {}
  union {
    PipeView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PipeViewDefaultTypeInternal _PipeView_default_instance_;
constexpr SsdView::SsdView(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ssd_id_(0)
  , read_bw_used_(0)
  , write_bw_used_(0)
  , read_bw_free_(0)
  , write_bw_free_(0)
  , read_iops_(0)
  , write_iops_(0)
  , frag_degree_(0)
  , recency_counter_(uint64_t{0u})
  , write_cost_(0){}
struct SsdViewDefaultTypeInternal {
  constexpr SsdViewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SsdViewDefaultTypeInternal() {}
  union {
    SsdView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SsdViewDefaultTypeInternal _SsdView_default_instance_;
constexpr PartialView_IoPortViewsEntry_DoNotUse::PartialView_IoPortViewsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PartialView_IoPortViewsEntry_DoNotUseDefaultTypeInternal {
  constexpr PartialView_IoPortViewsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PartialView_IoPortViewsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PartialView_IoPortViewsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PartialView_IoPortViewsEntry_DoNotUseDefaultTypeInternal _PartialView_IoPortViewsEntry_DoNotUse_default_instance_;
constexpr PartialView_IoPipeViewsEntry_DoNotUse::PartialView_IoPipeViewsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PartialView_IoPipeViewsEntry_DoNotUseDefaultTypeInternal {
  constexpr PartialView_IoPipeViewsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PartialView_IoPipeViewsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PartialView_IoPipeViewsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PartialView_IoPipeViewsEntry_DoNotUseDefaultTypeInternal _PartialView_IoPipeViewsEntry_DoNotUse_default_instance_;
constexpr PartialView_SsdViewsEntry_DoNotUse::PartialView_SsdViewsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PartialView_SsdViewsEntry_DoNotUseDefaultTypeInternal {
  constexpr PartialView_SsdViewsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PartialView_SsdViewsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PartialView_SsdViewsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PartialView_SsdViewsEntry_DoNotUseDefaultTypeInternal _PartialView_SsdViewsEntry_DoNotUse_default_instance_;
constexpr PartialView::PartialView(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : io_port_views_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , io_pipe_views_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , ssd_views_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , net_port_view_(nullptr)
  , net_pipe_view_(nullptr){}
struct PartialViewDefaultTypeInternal {
  constexpr PartialViewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PartialViewDefaultTypeInternal() {}
  union {
    PartialView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PartialViewDefaultTypeInternal _PartialView_default_instance_;
constexpr PullViewRequest::PullViewRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ebof_port_(0){}
struct PullViewRequestDefaultTypeInternal {
  constexpr PullViewRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PullViewRequestDefaultTypeInternal() {}
  union {
    PullViewRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PullViewRequestDefaultTypeInternal _PullViewRequest_default_instance_;
constexpr PullViewResponse::PullViewResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : partial_view_(nullptr)
  , err_code_(0){}
struct PullViewResponseDefaultTypeInternal {
  constexpr PullViewResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PullViewResponseDefaultTypeInternal() {}
  union {
    PullViewResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PullViewResponseDefaultTypeInternal _PullViewResponse_default_instance_;
constexpr PushViewRequest::PushViewRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : partial_view_(nullptr)
  , event_op_(0)
  , port_or_ssd_(0){}
struct PushViewRequestDefaultTypeInternal {
  constexpr PushViewRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PushViewRequestDefaultTypeInternal() {}
  union {
    PushViewRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PushViewRequestDefaultTypeInternal _PushViewRequest_default_instance_;
constexpr PushViewResponse::PushViewResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_code_(0){}
struct PushViewResponseDefaultTypeInternal {
  constexpr PushViewResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PushViewResponseDefaultTypeInternal() {}
  union {
    PushViewResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PushViewResponseDefaultTypeInternal _PushViewResponse_default_instance_;
constexpr IOCompletion::IOCompletion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ssd_id_(0)
  , io_type_(0u)
  , size_(uint64_t{0u})
  , lat_microsec_(0u)
  , client_id_(0){}
struct IOCompletionDefaultTypeInternal {
  constexpr IOCompletionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IOCompletionDefaultTypeInternal() {}
  union {
    IOCompletion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IOCompletionDefaultTypeInternal _IOCompletion_default_instance_;
constexpr ReportCmplRequest::ReportCmplRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : completions_()
  , client_id_(0)
  , ebof_port_(0)
  , in_sync_window_(false){}
struct ReportCmplRequestDefaultTypeInternal {
  constexpr ReportCmplRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReportCmplRequestDefaultTypeInternal() {}
  union {
    ReportCmplRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReportCmplRequestDefaultTypeInternal _ReportCmplRequest_default_instance_;
constexpr ViewRecency_IoPortViewRecencyEntry_DoNotUse::ViewRecency_IoPortViewRecencyEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ViewRecency_IoPortViewRecencyEntry_DoNotUseDefaultTypeInternal {
  constexpr ViewRecency_IoPortViewRecencyEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewRecency_IoPortViewRecencyEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ViewRecency_IoPortViewRecencyEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewRecency_IoPortViewRecencyEntry_DoNotUseDefaultTypeInternal _ViewRecency_IoPortViewRecencyEntry_DoNotUse_default_instance_;
constexpr ViewRecency_IoPipeViewRecencyEntry_DoNotUse::ViewRecency_IoPipeViewRecencyEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ViewRecency_IoPipeViewRecencyEntry_DoNotUseDefaultTypeInternal {
  constexpr ViewRecency_IoPipeViewRecencyEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewRecency_IoPipeViewRecencyEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ViewRecency_IoPipeViewRecencyEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewRecency_IoPipeViewRecencyEntry_DoNotUseDefaultTypeInternal _ViewRecency_IoPipeViewRecencyEntry_DoNotUse_default_instance_;
constexpr ViewRecency_SsdViewRecencyEntry_DoNotUse::ViewRecency_SsdViewRecencyEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ViewRecency_SsdViewRecencyEntry_DoNotUseDefaultTypeInternal {
  constexpr ViewRecency_SsdViewRecencyEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewRecency_SsdViewRecencyEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ViewRecency_SsdViewRecencyEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewRecency_SsdViewRecencyEntry_DoNotUseDefaultTypeInternal _ViewRecency_SsdViewRecencyEntry_DoNotUse_default_instance_;
constexpr ViewRecency::ViewRecency(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : io_port_view_recency_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , io_pipe_view_recency_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , ssd_view_recency_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , net_port_view_recency_(uint64_t{0u})
  , net_pipe_view_recency_(uint64_t{0u}){}
struct ViewRecencyDefaultTypeInternal {
  constexpr ViewRecencyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewRecencyDefaultTypeInternal() {}
  union {
    ViewRecency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewRecencyDefaultTypeInternal _ViewRecency_default_instance_;
constexpr ReportCmplResponse::ReportCmplResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : view_recency_(nullptr)
  , err_code_(0){}
struct ReportCmplResponseDefaultTypeInternal {
  constexpr ReportCmplResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReportCmplResponseDefaultTypeInternal() {}
  union {
    ReportCmplResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReportCmplResponseDefaultTypeInternal _ReportCmplResponse_default_instance_;
constexpr EventCallback::EventCallback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : op_(0)
  , threshold_(0)
  , port_or_ssd_(0)
  , io_type_(0)
  , cmp_op_(0){}
struct EventCallbackDefaultTypeInternal {
  constexpr EventCallbackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventCallbackDefaultTypeInternal() {}
  union {
    EventCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventCallbackDefaultTypeInternal _EventCallback_default_instance_;
constexpr RegisterEventCallbackRequest::RegisterEventCallbackRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : callbacks_()
  , client_id_(0){}
struct RegisterEventCallbackRequestDefaultTypeInternal {
  constexpr RegisterEventCallbackRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterEventCallbackRequestDefaultTypeInternal() {}
  union {
    RegisterEventCallbackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterEventCallbackRequestDefaultTypeInternal _RegisterEventCallbackRequest_default_instance_;
constexpr RegisterEventCallbackResponse::RegisterEventCallbackResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_code_(0){}
struct RegisterEventCallbackResponseDefaultTypeInternal {
  constexpr RegisterEventCallbackResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterEventCallbackResponseDefaultTypeInternal() {}
  union {
    RegisterEventCallbackResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterEventCallbackResponseDefaultTypeInternal _RegisterEventCallbackResponse_default_instance_;
constexpr BottleneckReportRequest::BottleneckReportRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : congested_ssds_()
  , _congested_ssds_cached_byte_size_(0){}
struct BottleneckReportRequestDefaultTypeInternal {
  constexpr BottleneckReportRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BottleneckReportRequestDefaultTypeInternal() {}
  union {
    BottleneckReportRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BottleneckReportRequestDefaultTypeInternal _BottleneckReportRequest_default_instance_;
constexpr BottleneckReportResponse::BottleneckReportResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_code_(0){}
struct BottleneckReportResponseDefaultTypeInternal {
  constexpr BottleneckReportResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BottleneckReportResponseDefaultTypeInternal() {}
  union {
    BottleneckReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BottleneckReportResponseDefaultTypeInternal _BottleneckReportResponse_default_instance_;
constexpr RequestIOSliceRequest::RequestIOSliceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(0)
  , ssd_id_(0)
  , last_epoch_(0){}
struct RequestIOSliceRequestDefaultTypeInternal {
  constexpr RequestIOSliceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestIOSliceRequestDefaultTypeInternal() {}
  union {
    RequestIOSliceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestIOSliceRequestDefaultTypeInternal _RequestIOSliceRequest_default_instance_;
constexpr RequestIOSliceResponse::RequestIOSliceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_code_(0)
  , slice_size_(0)
  , epoch_(0)
  , wait_time_(0){}
struct RequestIOSliceResponseDefaultTypeInternal {
  constexpr RequestIOSliceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestIOSliceResponseDefaultTypeInternal() {}
  union {
    RequestIOSliceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestIOSliceResponseDefaultTypeInternal _RequestIOSliceResponse_default_instance_;
}  // namespace FLINT_RPC_MESSAGE
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[48];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const uint32_t TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::GetFlintMetadataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::GetFlintMetadataRequest, hostname_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::FlintMetadata_SsdIdMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::FlintMetadata_SsdIdMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::FlintMetadata_SsdIdMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::FlintMetadata_SsdIdMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::FlintMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::FlintMetadata, ebof_port_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::FlintMetadata, ssd_id_map_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::FlintMetadata, nic_ports_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::GetFlintMetadataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::GetFlintMetadataResponse, err_code_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::GetFlintMetadataResponse, err_message_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::GetFlintMetadataResponse, metadata_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::CreateVolumeRequest_SsdPreferenceEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::CreateVolumeRequest_SsdPreferenceEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::CreateVolumeRequest_SsdPreferenceEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::CreateVolumeRequest_SsdPreferenceEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::CreateVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::CreateVolumeRequest, name_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::CreateVolumeRequest, size_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::CreateVolumeRequest, rep_factor_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::CreateVolumeRequest, flags_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::CreateVolumeRequest, ssd_preference_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::CreateVolumeRequest, policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::CreateVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::CreateVolumeResponse, err_code_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::CreateVolumeResponse, err_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::OpenVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::OpenVolumeRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ExtentLocator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ExtentLocator, rep_role_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ExtentLocator, ssd_id_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ExtentLocator, pext_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ExtentLocators, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ExtentLocators, locators_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::OpenVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::OpenVolumeResponse, err_code_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::OpenVolumeResponse, err_message_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::OpenVolumeResponse, size_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::OpenVolumeResponse, rep_factor_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::OpenVolumeResponse, flags_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::OpenVolumeResponse, extent_locator_map_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest, name_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest, lexts_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest, ssd_preference_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest, policy_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse, err_code_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse, err_message_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse, extent_locator_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::DeleteVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::DeleteVolumeRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::DeleteVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::DeleteVolumeResponse, err_code_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::DeleteVolumeResponse, err_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ListVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ListVolumeRequest, name_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ListVolumeRequest, list_all_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeAttrs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeAttrs, name_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeAttrs, size_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeAttrs, rep_factor_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::VolumeAttrs, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ListVolumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ListVolumeResponse, err_code_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ListVolumeResponse, err_message_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ListVolumeResponse, vol_attrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RegisterRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RegisterRequest, local_scheduler_ip_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RegisterRequest, local_scheduler_port_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RegisterRequest, ebof_port_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RegisterRequest, slo_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RegisterResponse, err_code_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RegisterResponse, err_msg_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RegisterResponse, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PortView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PortView, port_id_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PortView, read_bw_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PortView, write_bw_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PortView, read_iops_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PortView, write_iops_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PortView, read_size_dist_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PortView, write_size_dist_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PortView, recency_counter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PipeView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PipeView, pipe_id_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PipeView, read_bw_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PipeView, write_bw_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PipeView, read_iops_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PipeView, write_iops_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PipeView, recency_counter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::SsdView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::SsdView, ssd_id_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::SsdView, read_bw_used_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::SsdView, write_bw_used_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::SsdView, read_bw_free_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::SsdView, write_bw_free_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::SsdView, read_iops_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::SsdView, write_iops_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::SsdView, frag_degree_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::SsdView, write_cost_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::SsdView, recency_counter_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView_IoPortViewsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView_IoPortViewsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView_IoPortViewsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView_IoPortViewsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView_IoPipeViewsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView_IoPipeViewsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView_IoPipeViewsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView_IoPipeViewsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView_SsdViewsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView_SsdViewsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView_SsdViewsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView_SsdViewsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView, net_port_view_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView, net_pipe_view_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView, io_port_views_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView, io_pipe_views_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PartialView, ssd_views_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PullViewRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PullViewRequest, ebof_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PullViewResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PullViewResponse, err_code_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PullViewResponse, partial_view_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PushViewRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PushViewRequest, event_op_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PushViewRequest, port_or_ssd_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PushViewRequest, partial_view_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PushViewResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::PushViewResponse, err_code_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::IOCompletion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::IOCompletion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::IOCompletion, ssd_id_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::IOCompletion, io_type_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::IOCompletion, size_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::IOCompletion, lat_microsec_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::IOCompletion, client_id_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ReportCmplRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ReportCmplRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ReportCmplRequest, ebof_port_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ReportCmplRequest, completions_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ReportCmplRequest, in_sync_window_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency_IoPortViewRecencyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency_IoPortViewRecencyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency_IoPortViewRecencyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency_IoPortViewRecencyEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency_IoPipeViewRecencyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency_IoPipeViewRecencyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency_IoPipeViewRecencyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency_IoPipeViewRecencyEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency_SsdViewRecencyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency_SsdViewRecencyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency_SsdViewRecencyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency_SsdViewRecencyEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency, net_port_view_recency_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency, net_pipe_view_recency_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency, io_port_view_recency_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency, io_pipe_view_recency_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ViewRecency, ssd_view_recency_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ReportCmplResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ReportCmplResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ReportCmplResponse, err_code_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::ReportCmplResponse, view_recency_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::EventCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::EventCallback, op_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::EventCallback, threshold_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::EventCallback, port_or_ssd_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::EventCallback, io_type_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::EventCallback, cmp_op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest, callbacks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse, err_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::BottleneckReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::BottleneckReportRequest, congested_ssds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::BottleneckReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::BottleneckReportResponse, err_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RequestIOSliceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RequestIOSliceRequest, client_id_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RequestIOSliceRequest, ssd_id_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RequestIOSliceRequest, last_epoch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RequestIOSliceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RequestIOSliceResponse, err_code_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RequestIOSliceResponse, slice_size_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RequestIOSliceResponse, epoch_),
  PROTOBUF_FIELD_OFFSET(::FLINT_RPC_MESSAGE::RequestIOSliceResponse, wait_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::FLINT_RPC_MESSAGE::GetFlintMetadataRequest)},
  { 7, 15, -1, sizeof(::FLINT_RPC_MESSAGE::FlintMetadata_SsdIdMapEntry_DoNotUse)},
  { 17, -1, -1, sizeof(::FLINT_RPC_MESSAGE::FlintMetadata)},
  { 26, -1, -1, sizeof(::FLINT_RPC_MESSAGE::GetFlintMetadataResponse)},
  { 35, 43, -1, sizeof(::FLINT_RPC_MESSAGE::CreateVolumeRequest_SsdPreferenceEntry_DoNotUse)},
  { 45, -1, -1, sizeof(::FLINT_RPC_MESSAGE::CreateVolumeRequest)},
  { 57, -1, -1, sizeof(::FLINT_RPC_MESSAGE::CreateVolumeResponse)},
  { 65, -1, -1, sizeof(::FLINT_RPC_MESSAGE::OpenVolumeRequest)},
  { 72, -1, -1, sizeof(::FLINT_RPC_MESSAGE::ExtentLocator)},
  { 81, -1, -1, sizeof(::FLINT_RPC_MESSAGE::ExtentLocators)},
  { 88, 96, -1, sizeof(::FLINT_RPC_MESSAGE::OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse)},
  { 98, -1, -1, sizeof(::FLINT_RPC_MESSAGE::OpenVolumeResponse)},
  { 110, 118, -1, sizeof(::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse)},
  { 120, -1, -1, sizeof(::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest)},
  { 130, 138, -1, sizeof(::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse)},
  { 140, -1, -1, sizeof(::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse)},
  { 149, -1, -1, sizeof(::FLINT_RPC_MESSAGE::DeleteVolumeRequest)},
  { 156, -1, -1, sizeof(::FLINT_RPC_MESSAGE::DeleteVolumeResponse)},
  { 164, -1, -1, sizeof(::FLINT_RPC_MESSAGE::ListVolumeRequest)},
  { 172, -1, -1, sizeof(::FLINT_RPC_MESSAGE::VolumeAttrs)},
  { 182, -1, -1, sizeof(::FLINT_RPC_MESSAGE::ListVolumeResponse)},
  { 191, -1, -1, sizeof(::FLINT_RPC_MESSAGE::RegisterRequest)},
  { 202, -1, -1, sizeof(::FLINT_RPC_MESSAGE::RegisterResponse)},
  { 211, -1, -1, sizeof(::FLINT_RPC_MESSAGE::PortView)},
  { 225, -1, -1, sizeof(::FLINT_RPC_MESSAGE::PipeView)},
  { 237, -1, -1, sizeof(::FLINT_RPC_MESSAGE::SsdView)},
  { 253, 261, -1, sizeof(::FLINT_RPC_MESSAGE::PartialView_IoPortViewsEntry_DoNotUse)},
  { 263, 271, -1, sizeof(::FLINT_RPC_MESSAGE::PartialView_IoPipeViewsEntry_DoNotUse)},
  { 273, 281, -1, sizeof(::FLINT_RPC_MESSAGE::PartialView_SsdViewsEntry_DoNotUse)},
  { 283, -1, -1, sizeof(::FLINT_RPC_MESSAGE::PartialView)},
  { 294, -1, -1, sizeof(::FLINT_RPC_MESSAGE::PullViewRequest)},
  { 301, -1, -1, sizeof(::FLINT_RPC_MESSAGE::PullViewResponse)},
  { 309, -1, -1, sizeof(::FLINT_RPC_MESSAGE::PushViewRequest)},
  { 318, -1, -1, sizeof(::FLINT_RPC_MESSAGE::PushViewResponse)},
  { 325, 336, -1, sizeof(::FLINT_RPC_MESSAGE::IOCompletion)},
  { 341, -1, -1, sizeof(::FLINT_RPC_MESSAGE::ReportCmplRequest)},
  { 351, 359, -1, sizeof(::FLINT_RPC_MESSAGE::ViewRecency_IoPortViewRecencyEntry_DoNotUse)},
  { 361, 369, -1, sizeof(::FLINT_RPC_MESSAGE::ViewRecency_IoPipeViewRecencyEntry_DoNotUse)},
  { 371, 379, -1, sizeof(::FLINT_RPC_MESSAGE::ViewRecency_SsdViewRecencyEntry_DoNotUse)},
  { 381, -1, -1, sizeof(::FLINT_RPC_MESSAGE::ViewRecency)},
  { 392, 400, -1, sizeof(::FLINT_RPC_MESSAGE::ReportCmplResponse)},
  { 402, -1, -1, sizeof(::FLINT_RPC_MESSAGE::EventCallback)},
  { 413, -1, -1, sizeof(::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest)},
  { 421, -1, -1, sizeof(::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse)},
  { 428, -1, -1, sizeof(::FLINT_RPC_MESSAGE::BottleneckReportRequest)},
  { 435, -1, -1, sizeof(::FLINT_RPC_MESSAGE::BottleneckReportResponse)},
  { 442, -1, -1, sizeof(::FLINT_RPC_MESSAGE::RequestIOSliceRequest)},
  { 451, -1, -1, sizeof(::FLINT_RPC_MESSAGE::RequestIOSliceResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_GetFlintMetadataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_FlintMetadata_SsdIdMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_FlintMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_GetFlintMetadataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_CreateVolumeRequest_SsdPreferenceEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_CreateVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_CreateVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_OpenVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_ExtentLocator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_ExtentLocators_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_OpenVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_VolumeExtentFaultRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_VolumeExtentFaultResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_DeleteVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_DeleteVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_ListVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_VolumeAttrs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_ListVolumeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_RegisterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_RegisterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_PortView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_PipeView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_SsdView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_PartialView_IoPortViewsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_PartialView_IoPipeViewsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_PartialView_SsdViewsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_PartialView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_PullViewRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_PullViewResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_PushViewRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_PushViewResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_IOCompletion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_ReportCmplRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_ViewRecency_IoPortViewRecencyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_ViewRecency_IoPipeViewRecencyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_ViewRecency_SsdViewRecencyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_ViewRecency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_ReportCmplResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_EventCallback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_RegisterEventCallbackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_RegisterEventCallbackResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_BottleneckReportRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_BottleneckReportResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_RequestIOSliceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::FLINT_RPC_MESSAGE::_RequestIOSliceResponse_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\021FLINT_RPC_MESSAGE\"+\n\027Ge"
  "tFlintMetadataRequest\022\020\n\010hostname\030\001 \001(\t\""
  "\256\001\n\rFlintMetadata\022\021\n\tebof_port\030\001 \001(\005\022B\n\n"
  "ssd_id_map\030\002 \003(\0132..FLINT_RPC_MESSAGE.Fli"
  "ntMetadata.SsdIdMapEntry\022\025\n\rnic_ports_nu"
  "m\030\003 \001(\005\032/\n\rSsdIdMapEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\r:\0028\001\"u\n\030GetFlintMetadataResp"
  "onse\022\020\n\010err_code\030\001 \001(\005\022\023\n\013err_message\030\002 "
  "\001(\t\0222\n\010metadata\030\003 \001(\0132 .FLINT_RPC_MESSAG"
  "E.FlintMetadata\"\355\001\n\023CreateVolumeRequest\022"
  "\014\n\004name\030\001 \001(\t\022\014\n\004size\030\002 \001(\004\022\022\n\nrep_facto"
  "r\030\003 \001(\r\022\r\n\005flags\030\004 \001(\r\022Q\n\016ssd_preference"
  "\030\005 \003(\01329.FLINT_RPC_MESSAGE.CreateVolumeR"
  "equest.SsdPreferenceEntry\022\016\n\006policy\030\006 \001("
  "\r\0324\n\022SsdPreferenceEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\002:\0028\001\"=\n\024CreateVolumeResponse\022"
  "\020\n\010err_code\030\001 \001(\005\022\023\n\013err_message\030\002 \001(\t\"!"
  "\n\021OpenVolumeRequest\022\014\n\004name\030\001 \001(\t\"C\n\rExt"
  "entLocator\022\020\n\010rep_role\030\001 \001(\r\022\016\n\006ssd_id\030\002"
  " \001(\r\022\020\n\010pext_num\030\003 \001(\r\"D\n\016ExtentLocators"
  "\0222\n\010locators\030\001 \003(\0132 .FLINT_RPC_MESSAGE.E"
  "xtentLocator\"\241\002\n\022OpenVolumeResponse\022\020\n\010e"
  "rr_code\030\001 \001(\005\022\023\n\013err_message\030\002 \001(\t\022\014\n\004si"
  "ze\030\003 \001(\004\022\022\n\nrep_factor\030\004 \001(\r\022\r\n\005flags\030\005 "
  "\001(\r\022W\n\022extent_locator_map\030\006 \003(\0132;.FLINT_"
  "RPC_MESSAGE.OpenVolumeResponse.ExtentLoc"
  "atorMapEntry\032Z\n\025ExtentLocatorMapEntry\022\013\n"
  "\003key\030\001 \001(\r\0220\n\005value\030\002 \001(\0132!.FLINT_RPC_ME"
  "SSAGE.ExtentLocators:\0028\001\"\325\001\n\030VolumeExten"
  "tFaultRequest\022\014\n\004name\030\001 \001(\t\022\r\n\005lexts\030\002 \003"
  "(\004\022V\n\016ssd_preference\030\003 \003(\0132>.FLINT_RPC_M"
  "ESSAGE.VolumeExtentFaultRequest.SsdPrefe"
  "renceEntry\022\016\n\006policy\030\004 \001(\r\0324\n\022SsdPrefere"
  "nceEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001"
  "\"\376\001\n\031VolumeExtentFaultResponse\022\020\n\010err_co"
  "de\030\001 \001(\005\022\023\n\013err_message\030\002 \001(\t\022^\n\022extent_"
  "locator_map\030\003 \003(\0132B.FLINT_RPC_MESSAGE.Vo"
  "lumeExtentFaultResponse.ExtentLocatorMap"
  "Entry\032Z\n\025ExtentLocatorMapEntry\022\013\n\003key\030\001 "
  "\001(\r\0220\n\005value\030\002 \001(\0132!.FLINT_RPC_MESSAGE.E"
  "xtentLocators:\0028\001\"#\n\023DeleteVolumeRequest"
  "\022\014\n\004name\030\001 \001(\t\"=\n\024DeleteVolumeResponse\022\020"
  "\n\010err_code\030\001 \001(\005\022\023\n\013err_message\030\002 \001(\t\"3\n"
  "\021ListVolumeRequest\022\014\n\004name\030\001 \001(\t\022\020\n\010list"
  "_all\030\002 \001(\010\"L\n\013VolumeAttrs\022\014\n\004name\030\001 \001(\t\022"
  "\014\n\004size\030\002 \001(\004\022\022\n\nrep_factor\030\003 \001(\r\022\r\n\005fla"
  "gs\030\004 \001(\r\"n\n\022ListVolumeResponse\022\020\n\010err_co"
  "de\030\001 \001(\005\022\023\n\013err_message\030\002 \001(\t\0221\n\tvol_att"
  "rs\030\003 \003(\0132\036.FLINT_RPC_MESSAGE.VolumeAttrs"
  "\"\204\001\n\017RegisterRequest\022\021\n\tclient_id\030\001 \001(\005\022"
  "\032\n\022local_scheduler_ip\030\002 \001(\t\022\034\n\024local_sch"
  "eduler_port\030\003 \001(\005\022\021\n\tebof_port\030\004 \001(\005\022\021\n\t"
  "slo_level\030\005 \001(\005\"H\n\020RegisterResponse\022\020\n\010e"
  "rr_code\030\001 \001(\005\022\017\n\007err_msg\030\002 \001(\t\022\021\n\tclient"
  "_id\030\003 \001(\005\"\257\001\n\010PortView\022\017\n\007port_id\030\001 \001(\005\022"
  "\017\n\007read_bw\030\002 \001(\002\022\020\n\010write_bw\030\003 \001(\002\022\021\n\tre"
  "ad_iops\030\004 \001(\002\022\022\n\nwrite_iops\030\005 \001(\002\022\026\n\016rea"
  "d_size_dist\030\006 \003(\r\022\027\n\017write_size_dist\030\007 \003"
  "(\r\022\027\n\017recency_counter\030\010 \001(\004\"~\n\010PipeView\022"
  "\017\n\007pipe_id\030\001 \001(\005\022\017\n\007read_bw\030\002 \001(\002\022\020\n\010wri"
  "te_bw\030\003 \001(\002\022\021\n\tread_iops\030\004 \001(\002\022\022\n\nwrite_"
  "iops\030\005 \001(\002\022\027\n\017recency_counter\030\006 \001(\004\"\334\001\n\007"
  "SsdView\022\016\n\006ssd_id\030\001 \001(\005\022\024\n\014read_bw_used\030"
  "\002 \001(\002\022\025\n\rwrite_bw_used\030\003 \001(\002\022\024\n\014read_bw_"
  "free\030\004 \001(\002\022\025\n\rwrite_bw_free\030\005 \001(\002\022\021\n\trea"
  "d_iops\030\006 \001(\002\022\022\n\nwrite_iops\030\007 \001(\002\022\023\n\013frag"
  "_degree\030\010 \001(\002\022\022\n\nwrite_cost\030\t \001(\002\022\027\n\017rec"
  "ency_counter\030\n \001(\004\"\265\004\n\013PartialView\0222\n\rne"
  "t_port_view\030\001 \001(\0132\033.FLINT_RPC_MESSAGE.Po"
  "rtView\0222\n\rnet_pipe_view\030\002 \001(\0132\033.FLINT_RP"
  "C_MESSAGE.PipeView\022F\n\rio_port_views\030\003 \003("
  "\0132/.FLINT_RPC_MESSAGE.PartialView.IoPort"
  "ViewsEntry\022F\n\rio_pipe_views\030\004 \003(\0132/.FLIN"
  "T_RPC_MESSAGE.PartialView.IoPipeViewsEnt"
  "ry\022\?\n\tssd_views\030\005 \003(\0132,.FLINT_RPC_MESSAG"
  "E.PartialView.SsdViewsEntry\032O\n\020IoPortVie"
  "wsEntry\022\013\n\003key\030\001 \001(\005\022*\n\005value\030\002 \001(\0132\033.FL"
  "INT_RPC_MESSAGE.PortView:\0028\001\032O\n\020IoPipeVi"
  "ewsEntry\022\013\n\003key\030\001 \001(\005\022*\n\005value\030\002 \001(\0132\033.F"
  "LINT_RPC_MESSAGE.PipeView:\0028\001\032K\n\rSsdView"
  "sEntry\022\013\n\003key\030\001 \001(\005\022)\n\005value\030\002 \001(\0132\032.FLI"
  "NT_RPC_MESSAGE.SsdView:\0028\001\"$\n\017PullViewRe"
  "quest\022\021\n\tebof_port\030\001 \001(\005\"Z\n\020PullViewResp"
  "onse\022\020\n\010err_code\030\001 \001(\005\0224\n\014partial_view\030\002"
  " \001(\0132\036.FLINT_RPC_MESSAGE.PartialView\"n\n\017"
  "PushViewRequest\022\020\n\010event_op\030\001 \001(\005\022\023\n\013por"
  "t_or_ssd\030\002 \001(\005\0224\n\014partial_view\030\003 \001(\0132\036.F"
  "LINT_RPC_MESSAGE.PartialView\"$\n\020PushView"
  "Response\022\020\n\010err_code\030\001 \001(\005\"y\n\014IOCompleti"
  "on\022\016\n\006ssd_id\030\001 \001(\005\022\017\n\007io_type\030\002 \001(\r\022\014\n\004s"
  "ize\030\003 \001(\004\022\024\n\014lat_microsec\030\004 \001(\r\022\026\n\tclien"
  "t_id\030\005 \001(\005H\000\210\001\001B\014\n\n_client_id\"\207\001\n\021Report"
  "CmplRequest\022\021\n\tclient_id\030\001 \001(\005\022\021\n\tebof_p"
  "ort\030\002 \001(\005\0224\n\013completions\030\003 \003(\0132\037.FLINT_R"
  "PC_MESSAGE.IOCompletion\022\026\n\016in_sync_windo"
  "w\030\004 \001(\010\"\356\003\n\013ViewRecency\022\035\n\025net_port_view"
  "_recency\030\001 \001(\004\022\035\n\025net_pipe_view_recency\030"
  "\002 \001(\004\022S\n\024io_port_view_recency\030\003 \003(\01325.FL"
  "INT_RPC_MESSAGE.ViewRecency.IoPortViewRe"
  "cencyEntry\022S\n\024io_pipe_view_recency\030\004 \003(\013"
  "25.FLINT_RPC_MESSAGE.ViewRecency.IoPipeV"
  "iewRecencyEntry\022L\n\020ssd_view_recency\030\005 \003("
  "\01322.FLINT_RPC_MESSAGE.ViewRecency.SsdVie"
  "wRecencyEntry\0328\n\026IoPortViewRecencyEntry\022"
  "\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\004:\0028\001\0328\n\026IoPip"
  "eViewRecencyEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030"
  "\002 \001(\004:\0028\001\0325\n\023SsdViewRecencyEntry\022\013\n\003key\030"
  "\001 \001(\005\022\r\n\005value\030\002 \001(\004:\0028\001\"r\n\022ReportCmplRe"
  "sponse\022\020\n\010err_code\030\001 \001(\005\0229\n\014view_recency"
  "\030\002 \001(\0132\036.FLINT_RPC_MESSAGE.ViewRecencyH\000"
  "\210\001\001B\017\n\r_view_recency\"d\n\rEventCallback\022\n\n"
  "\002op\030\001 \001(\005\022\021\n\tthreshold\030\002 \001(\002\022\023\n\013port_or_"
  "ssd\030\003 \001(\005\022\017\n\007io_type\030\004 \001(\005\022\016\n\006cmp_op\030\005 \001"
  "(\005\"f\n\034RegisterEventCallbackRequest\022\021\n\tcl"
  "ient_id\030\001 \001(\005\0223\n\tcallbacks\030\002 \003(\0132 .FLINT"
  "_RPC_MESSAGE.EventCallback\"1\n\035RegisterEv"
  "entCallbackResponse\022\020\n\010err_code\030\001 \001(\005\"1\n"
  "\027BottleneckReportRequest\022\026\n\016congested_ss"
  "ds\030\001 \003(\005\",\n\030BottleneckReportResponse\022\020\n\010"
  "err_code\030\001 \001(\005\"N\n\025RequestIOSliceRequest\022"
  "\021\n\tclient_id\030\001 \001(\005\022\016\n\006ssd_id\030\002 \001(\005\022\022\n\nla"
  "st_epoch\030\003 \001(\005\"`\n\026RequestIOSliceResponse"
  "\022\020\n\010err_code\030\001 \001(\005\022\022\n\nslice_size\030\002 \001(\005\022\r"
  "\n\005epoch\030\003 \001(\005\022\021\n\twait_time\030\004 \001(\005b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, 4960, descriptor_table_protodef_message_2eproto, "message.proto", 
  &descriptor_table_message_2eproto_once, nullptr, 0, 48,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace FLINT_RPC_MESSAGE {

// ===================================================================

class GetFlintMetadataRequest::_Internal {
 public:
};

GetFlintMetadataRequest::GetFlintMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.GetFlintMetadataRequest)
}
GetFlintMetadataRequest::GetFlintMetadataRequest(const GetFlintMetadataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hostname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.GetFlintMetadataRequest)
}

inline void GetFlintMetadataRequest::SharedCtor() {
hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFlintMetadataRequest::~GetFlintMetadataRequest() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.GetFlintMetadataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetFlintMetadataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFlintMetadataRequest::ArenaDtor(void* object) {
  GetFlintMetadataRequest* _this = reinterpret_cast< GetFlintMetadataRequest* >(object);
  (void)_this;
}
void GetFlintMetadataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFlintMetadataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFlintMetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.GetFlintMetadataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlintMetadataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLINT_RPC_MESSAGE.GetFlintMetadataRequest.hostname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFlintMetadataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.GetFlintMetadataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLINT_RPC_MESSAGE.GetFlintMetadataRequest.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.GetFlintMetadataRequest)
  return target;
}

size_t GetFlintMetadataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.GetFlintMetadataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlintMetadataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetFlintMetadataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlintMetadataRequest::GetClassData() const { return &_class_data_; }

void GetFlintMetadataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetFlintMetadataRequest *>(to)->MergeFrom(
      static_cast<const GetFlintMetadataRequest &>(from));
}


void GetFlintMetadataRequest::MergeFrom(const GetFlintMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.GetFlintMetadataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hostname().empty()) {
    _internal_set_hostname(from._internal_hostname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFlintMetadataRequest::CopyFrom(const GetFlintMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.GetFlintMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlintMetadataRequest::IsInitialized() const {
  return true;
}

void GetFlintMetadataRequest::InternalSwap(GetFlintMetadataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hostname_, lhs_arena,
      &other->hostname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlintMetadataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// ===================================================================

FlintMetadata_SsdIdMapEntry_DoNotUse::FlintMetadata_SsdIdMapEntry_DoNotUse() {}
FlintMetadata_SsdIdMapEntry_DoNotUse::FlintMetadata_SsdIdMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FlintMetadata_SsdIdMapEntry_DoNotUse::MergeFrom(const FlintMetadata_SsdIdMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FlintMetadata_SsdIdMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[1]);
}

// ===================================================================

class FlintMetadata::_Internal {
 public:
};

FlintMetadata::FlintMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ssd_id_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.FlintMetadata)
}
FlintMetadata::FlintMetadata(const FlintMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssd_id_map_.MergeFrom(from.ssd_id_map_);
  ::memcpy(&ebof_port_, &from.ebof_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&nic_ports_num_) -
    reinterpret_cast<char*>(&ebof_port_)) + sizeof(nic_ports_num_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.FlintMetadata)
}

inline void FlintMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ebof_port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nic_ports_num_) -
    reinterpret_cast<char*>(&ebof_port_)) + sizeof(nic_ports_num_));
}

FlintMetadata::~FlintMetadata() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.FlintMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FlintMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FlintMetadata::ArenaDtor(void* object) {
  FlintMetadata* _this = reinterpret_cast< FlintMetadata* >(object);
  (void)_this;
  _this->ssd_id_map_. ~MapField();
}
inline void FlintMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &FlintMetadata::ArenaDtor);
  }
}
void FlintMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlintMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.FlintMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssd_id_map_.Clear();
  ::memset(&ebof_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nic_ports_num_) -
      reinterpret_cast<char*>(&ebof_port_)) + sizeof(nic_ports_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlintMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ebof_port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ebof_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, uint32> ssd_id_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ssd_id_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 nic_ports_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          nic_ports_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlintMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.FlintMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ebof_port = 1;
  if (this->_internal_ebof_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ebof_port(), target);
  }

  // map<string, uint32> ssd_id_map = 2;
  if (!this->_internal_ssd_id_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "FLINT_RPC_MESSAGE.FlintMetadata.SsdIdMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ssd_id_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ssd_id_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::const_iterator
          it = this->_internal_ssd_id_map().begin();
          it != this->_internal_ssd_id_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FlintMetadata_SsdIdMapEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::const_iterator
          it = this->_internal_ssd_id_map().begin();
          it != this->_internal_ssd_id_map().end(); ++it) {
        target = FlintMetadata_SsdIdMapEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 nic_ports_num = 3;
  if (this->_internal_nic_ports_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_nic_ports_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.FlintMetadata)
  return target;
}

size_t FlintMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.FlintMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, uint32> ssd_id_map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ssd_id_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::const_iterator
      it = this->_internal_ssd_id_map().begin();
      it != this->_internal_ssd_id_map().end(); ++it) {
    total_size += FlintMetadata_SsdIdMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 ebof_port = 1;
  if (this->_internal_ebof_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ebof_port());
  }

  // int32 nic_ports_num = 3;
  if (this->_internal_nic_ports_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nic_ports_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlintMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FlintMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlintMetadata::GetClassData() const { return &_class_data_; }

void FlintMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FlintMetadata *>(to)->MergeFrom(
      static_cast<const FlintMetadata &>(from));
}


void FlintMetadata::MergeFrom(const FlintMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.FlintMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ssd_id_map_.MergeFrom(from.ssd_id_map_);
  if (from._internal_ebof_port() != 0) {
    _internal_set_ebof_port(from._internal_ebof_port());
  }
  if (from._internal_nic_ports_num() != 0) {
    _internal_set_nic_ports_num(from._internal_nic_ports_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlintMetadata::CopyFrom(const FlintMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.FlintMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlintMetadata::IsInitialized() const {
  return true;
}

void FlintMetadata::InternalSwap(FlintMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ssd_id_map_.InternalSwap(&other->ssd_id_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlintMetadata, nic_ports_num_)
      + sizeof(FlintMetadata::nic_ports_num_)
      - PROTOBUF_FIELD_OFFSET(FlintMetadata, ebof_port_)>(
          reinterpret_cast<char*>(&ebof_port_),
          reinterpret_cast<char*>(&other->ebof_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlintMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[2]);
}

// ===================================================================

class GetFlintMetadataResponse::_Internal {
 public:
  static const ::FLINT_RPC_MESSAGE::FlintMetadata& metadata(const GetFlintMetadataResponse* msg);
};

const ::FLINT_RPC_MESSAGE::FlintMetadata&
GetFlintMetadataResponse::_Internal::metadata(const GetFlintMetadataResponse* msg) {
  return *msg->metadata_;
}
GetFlintMetadataResponse::GetFlintMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.GetFlintMetadataResponse)
}
GetFlintMetadataResponse::GetFlintMetadataResponse(const GetFlintMetadataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_message().empty()) {
    err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::FLINT_RPC_MESSAGE::FlintMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  err_code_ = from.err_code_;
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.GetFlintMetadataResponse)
}

inline void GetFlintMetadataResponse::SharedCtor() {
err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(err_code_));
}

GetFlintMetadataResponse::~GetFlintMetadataResponse() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.GetFlintMetadataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetFlintMetadataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void GetFlintMetadataResponse::ArenaDtor(void* object) {
  GetFlintMetadataResponse* _this = reinterpret_cast< GetFlintMetadataResponse* >(object);
  (void)_this;
}
void GetFlintMetadataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFlintMetadataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetFlintMetadataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.GetFlintMetadataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  err_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlintMetadataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_err_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLINT_RPC_MESSAGE.GetFlintMetadataResponse.err_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FLINT_RPC_MESSAGE.FlintMetadata metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFlintMetadataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.GetFlintMetadataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_code(), target);
  }

  // string err_message = 2;
  if (!this->_internal_err_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_message().data(), static_cast<int>(this->_internal_err_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLINT_RPC_MESSAGE.GetFlintMetadataResponse.err_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_err_message(), target);
  }

  // .FLINT_RPC_MESSAGE.FlintMetadata metadata = 3;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.GetFlintMetadataResponse)
  return target;
}

size_t GetFlintMetadataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.GetFlintMetadataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_message = 2;
  if (!this->_internal_err_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_message());
  }

  // .FLINT_RPC_MESSAGE.FlintMetadata metadata = 3;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlintMetadataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetFlintMetadataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlintMetadataResponse::GetClassData() const { return &_class_data_; }

void GetFlintMetadataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetFlintMetadataResponse *>(to)->MergeFrom(
      static_cast<const GetFlintMetadataResponse &>(from));
}


void GetFlintMetadataResponse::MergeFrom(const GetFlintMetadataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.GetFlintMetadataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_message().empty()) {
    _internal_set_err_message(from._internal_err_message());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::FLINT_RPC_MESSAGE::FlintMetadata::MergeFrom(from._internal_metadata());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFlintMetadataResponse::CopyFrom(const GetFlintMetadataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.GetFlintMetadataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlintMetadataResponse::IsInitialized() const {
  return true;
}

void GetFlintMetadataResponse::InternalSwap(GetFlintMetadataResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_message_, lhs_arena,
      &other->err_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFlintMetadataResponse, err_code_)
      + sizeof(GetFlintMetadataResponse::err_code_)
      - PROTOBUF_FIELD_OFFSET(GetFlintMetadataResponse, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlintMetadataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[3]);
}

// ===================================================================

CreateVolumeRequest_SsdPreferenceEntry_DoNotUse::CreateVolumeRequest_SsdPreferenceEntry_DoNotUse() {}
CreateVolumeRequest_SsdPreferenceEntry_DoNotUse::CreateVolumeRequest_SsdPreferenceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateVolumeRequest_SsdPreferenceEntry_DoNotUse::MergeFrom(const CreateVolumeRequest_SsdPreferenceEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateVolumeRequest_SsdPreferenceEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[4]);
}

// ===================================================================

class CreateVolumeRequest::_Internal {
 public:
};

CreateVolumeRequest::CreateVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ssd_preference_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.CreateVolumeRequest)
}
CreateVolumeRequest::CreateVolumeRequest(const CreateVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssd_preference_.MergeFrom(from.ssd_preference_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&policy_) -
    reinterpret_cast<char*>(&size_)) + sizeof(policy_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.CreateVolumeRequest)
}

inline void CreateVolumeRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&policy_) -
    reinterpret_cast<char*>(&size_)) + sizeof(policy_));
}

CreateVolumeRequest::~CreateVolumeRequest() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.CreateVolumeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateVolumeRequest::ArenaDtor(void* object) {
  CreateVolumeRequest* _this = reinterpret_cast< CreateVolumeRequest* >(object);
  (void)_this;
  _this->ssd_preference_. ~MapField();
}
inline void CreateVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &CreateVolumeRequest::ArenaDtor);
  }
}
void CreateVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.CreateVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssd_preference_.Clear();
  name_.ClearToEmpty();
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&policy_) -
      reinterpret_cast<char*>(&size_)) + sizeof(policy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLINT_RPC_MESSAGE.CreateVolumeRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rep_factor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          rep_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, float> ssd_preference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ssd_preference_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 policy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          policy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.CreateVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLINT_RPC_MESSAGE.CreateVolumeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size(), target);
  }

  // uint32 rep_factor = 3;
  if (this->_internal_rep_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rep_factor(), target);
  }

  // uint32 flags = 4;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_flags(), target);
  }

  // map<string, float> ssd_preference = 5;
  if (!this->_internal_ssd_preference().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "FLINT_RPC_MESSAGE.CreateVolumeRequest.SsdPreferenceEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ssd_preference().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ssd_preference().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_ssd_preference().begin();
          it != this->_internal_ssd_preference().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CreateVolumeRequest_SsdPreferenceEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_ssd_preference().begin();
          it != this->_internal_ssd_preference().end(); ++it) {
        target = CreateVolumeRequest_SsdPreferenceEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // uint32 policy = 6;
  if (this->_internal_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_policy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.CreateVolumeRequest)
  return target;
}

size_t CreateVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.CreateVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> ssd_preference = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ssd_preference_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_ssd_preference().begin();
      it != this->_internal_ssd_preference().end(); ++it) {
    total_size += CreateVolumeRequest_SsdPreferenceEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // uint32 rep_factor = 3;
  if (this->_internal_rep_factor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rep_factor());
  }

  // uint32 flags = 4;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  // uint32 policy = 6;
  if (this->_internal_policy() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_policy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateVolumeRequest::GetClassData() const { return &_class_data_; }

void CreateVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateVolumeRequest *>(to)->MergeFrom(
      static_cast<const CreateVolumeRequest &>(from));
}


void CreateVolumeRequest::MergeFrom(const CreateVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.CreateVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ssd_preference_.MergeFrom(from.ssd_preference_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_rep_factor() != 0) {
    _internal_set_rep_factor(from._internal_rep_factor());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_policy() != 0) {
    _internal_set_policy(from._internal_policy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateVolumeRequest::CopyFrom(const CreateVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.CreateVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateVolumeRequest::IsInitialized() const {
  return true;
}

void CreateVolumeRequest::InternalSwap(CreateVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ssd_preference_.InternalSwap(&other->ssd_preference_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateVolumeRequest, policy_)
      + sizeof(CreateVolumeRequest::policy_)
      - PROTOBUF_FIELD_OFFSET(CreateVolumeRequest, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateVolumeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[5]);
}

// ===================================================================

class CreateVolumeResponse::_Internal {
 public:
};

CreateVolumeResponse::CreateVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.CreateVolumeResponse)
}
CreateVolumeResponse::CreateVolumeResponse(const CreateVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_message().empty()) {
    err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_message(), 
      GetArenaForAllocation());
  }
  err_code_ = from.err_code_;
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.CreateVolumeResponse)
}

inline void CreateVolumeResponse::SharedCtor() {
err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
err_code_ = 0;
}

CreateVolumeResponse::~CreateVolumeResponse() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.CreateVolumeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateVolumeResponse::ArenaDtor(void* object) {
  CreateVolumeResponse* _this = reinterpret_cast< CreateVolumeResponse* >(object);
  (void)_this;
}
void CreateVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.CreateVolumeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_message_.ClearToEmpty();
  err_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateVolumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_err_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLINT_RPC_MESSAGE.CreateVolumeResponse.err_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateVolumeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.CreateVolumeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_code(), target);
  }

  // string err_message = 2;
  if (!this->_internal_err_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_message().data(), static_cast<int>(this->_internal_err_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLINT_RPC_MESSAGE.CreateVolumeResponse.err_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_err_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.CreateVolumeResponse)
  return target;
}

size_t CreateVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.CreateVolumeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_message = 2;
  if (!this->_internal_err_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_message());
  }

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateVolumeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateVolumeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateVolumeResponse::GetClassData() const { return &_class_data_; }

void CreateVolumeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateVolumeResponse *>(to)->MergeFrom(
      static_cast<const CreateVolumeResponse &>(from));
}


void CreateVolumeResponse::MergeFrom(const CreateVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.CreateVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_message().empty()) {
    _internal_set_err_message(from._internal_err_message());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateVolumeResponse::CopyFrom(const CreateVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.CreateVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateVolumeResponse::IsInitialized() const {
  return true;
}

void CreateVolumeResponse::InternalSwap(CreateVolumeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_message_, lhs_arena,
      &other->err_message_, rhs_arena
  );
  swap(err_code_, other->err_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateVolumeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[6]);
}

// ===================================================================

class OpenVolumeRequest::_Internal {
 public:
};

OpenVolumeRequest::OpenVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.OpenVolumeRequest)
}
OpenVolumeRequest::OpenVolumeRequest(const OpenVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.OpenVolumeRequest)
}

inline void OpenVolumeRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpenVolumeRequest::~OpenVolumeRequest() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.OpenVolumeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpenVolumeRequest::ArenaDtor(void* object) {
  OpenVolumeRequest* _this = reinterpret_cast< OpenVolumeRequest* >(object);
  (void)_this;
}
void OpenVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.OpenVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLINT_RPC_MESSAGE.OpenVolumeRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.OpenVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLINT_RPC_MESSAGE.OpenVolumeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.OpenVolumeRequest)
  return target;
}

size_t OpenVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.OpenVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenVolumeRequest::GetClassData() const { return &_class_data_; }

void OpenVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenVolumeRequest *>(to)->MergeFrom(
      static_cast<const OpenVolumeRequest &>(from));
}


void OpenVolumeRequest::MergeFrom(const OpenVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.OpenVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenVolumeRequest::CopyFrom(const OpenVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.OpenVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenVolumeRequest::IsInitialized() const {
  return true;
}

void OpenVolumeRequest::InternalSwap(OpenVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenVolumeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[7]);
}

// ===================================================================

class ExtentLocator::_Internal {
 public:
};

ExtentLocator::ExtentLocator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.ExtentLocator)
}
ExtentLocator::ExtentLocator(const ExtentLocator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rep_role_, &from.rep_role_,
    static_cast<size_t>(reinterpret_cast<char*>(&pext_num_) -
    reinterpret_cast<char*>(&rep_role_)) + sizeof(pext_num_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.ExtentLocator)
}

inline void ExtentLocator::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rep_role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pext_num_) -
    reinterpret_cast<char*>(&rep_role_)) + sizeof(pext_num_));
}

ExtentLocator::~ExtentLocator() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.ExtentLocator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExtentLocator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExtentLocator::ArenaDtor(void* object) {
  ExtentLocator* _this = reinterpret_cast< ExtentLocator* >(object);
  (void)_this;
}
void ExtentLocator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtentLocator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtentLocator::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.ExtentLocator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rep_role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pext_num_) -
      reinterpret_cast<char*>(&rep_role_)) + sizeof(pext_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtentLocator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rep_role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          rep_role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ssd_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ssd_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pext_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pext_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtentLocator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.ExtentLocator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rep_role = 1;
  if (this->_internal_rep_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rep_role(), target);
  }

  // uint32 ssd_id = 2;
  if (this->_internal_ssd_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ssd_id(), target);
  }

  // uint32 pext_num = 3;
  if (this->_internal_pext_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pext_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.ExtentLocator)
  return target;
}

size_t ExtentLocator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.ExtentLocator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 rep_role = 1;
  if (this->_internal_rep_role() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rep_role());
  }

  // uint32 ssd_id = 2;
  if (this->_internal_ssd_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ssd_id());
  }

  // uint32 pext_num = 3;
  if (this->_internal_pext_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pext_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtentLocator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExtentLocator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtentLocator::GetClassData() const { return &_class_data_; }

void ExtentLocator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExtentLocator *>(to)->MergeFrom(
      static_cast<const ExtentLocator &>(from));
}


void ExtentLocator::MergeFrom(const ExtentLocator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.ExtentLocator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rep_role() != 0) {
    _internal_set_rep_role(from._internal_rep_role());
  }
  if (from._internal_ssd_id() != 0) {
    _internal_set_ssd_id(from._internal_ssd_id());
  }
  if (from._internal_pext_num() != 0) {
    _internal_set_pext_num(from._internal_pext_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtentLocator::CopyFrom(const ExtentLocator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.ExtentLocator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtentLocator::IsInitialized() const {
  return true;
}

void ExtentLocator::InternalSwap(ExtentLocator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtentLocator, pext_num_)
      + sizeof(ExtentLocator::pext_num_)
      - PROTOBUF_FIELD_OFFSET(ExtentLocator, rep_role_)>(
          reinterpret_cast<char*>(&rep_role_),
          reinterpret_cast<char*>(&other->rep_role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtentLocator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[8]);
}

// ===================================================================

class ExtentLocators::_Internal {
 public:
};

ExtentLocators::ExtentLocators(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  locators_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.ExtentLocators)
}
ExtentLocators::ExtentLocators(const ExtentLocators& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      locators_(from.locators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.ExtentLocators)
}

inline void ExtentLocators::SharedCtor() {
}

ExtentLocators::~ExtentLocators() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.ExtentLocators)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExtentLocators::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExtentLocators::ArenaDtor(void* object) {
  ExtentLocators* _this = reinterpret_cast< ExtentLocators* >(object);
  (void)_this;
}
void ExtentLocators::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtentLocators::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtentLocators::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.ExtentLocators)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locators_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtentLocators::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .FLINT_RPC_MESSAGE.ExtentLocator locators = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtentLocators::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.ExtentLocators)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .FLINT_RPC_MESSAGE.ExtentLocator locators = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_locators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_locators(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.ExtentLocators)
  return target;
}

size_t ExtentLocators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.ExtentLocators)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FLINT_RPC_MESSAGE.ExtentLocator locators = 1;
  total_size += 1UL * this->_internal_locators_size();
  for (const auto& msg : this->locators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtentLocators::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExtentLocators::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtentLocators::GetClassData() const { return &_class_data_; }

void ExtentLocators::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExtentLocators *>(to)->MergeFrom(
      static_cast<const ExtentLocators &>(from));
}


void ExtentLocators::MergeFrom(const ExtentLocators& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.ExtentLocators)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  locators_.MergeFrom(from.locators_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtentLocators::CopyFrom(const ExtentLocators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.ExtentLocators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtentLocators::IsInitialized() const {
  return true;
}

void ExtentLocators::InternalSwap(ExtentLocators* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  locators_.InternalSwap(&other->locators_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtentLocators::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[9]);
}

// ===================================================================

OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse::OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse() {}
OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse::OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse::MergeFrom(const OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[10]);
}

// ===================================================================

class OpenVolumeResponse::_Internal {
 public:
};

OpenVolumeResponse::OpenVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extent_locator_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.OpenVolumeResponse)
}
OpenVolumeResponse::OpenVolumeResponse(const OpenVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extent_locator_map_.MergeFrom(from.extent_locator_map_);
  err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_message().empty()) {
    err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&err_code_, &from.err_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&err_code_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.OpenVolumeResponse)
}

inline void OpenVolumeResponse::SharedCtor() {
err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&err_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&err_code_)) + sizeof(flags_));
}

OpenVolumeResponse::~OpenVolumeResponse() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.OpenVolumeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpenVolumeResponse::ArenaDtor(void* object) {
  OpenVolumeResponse* _this = reinterpret_cast< OpenVolumeResponse* >(object);
  (void)_this;
  _this->extent_locator_map_. ~MapField();
}
inline void OpenVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &OpenVolumeResponse::ArenaDtor);
  }
}
void OpenVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.OpenVolumeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extent_locator_map_.Clear();
  err_message_.ClearToEmpty();
  ::memset(&err_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&err_code_)) + sizeof(flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenVolumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_err_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLINT_RPC_MESSAGE.OpenVolumeResponse.err_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rep_factor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          rep_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .FLINT_RPC_MESSAGE.ExtentLocators> extent_locator_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&extent_locator_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenVolumeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.OpenVolumeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_code(), target);
  }

  // string err_message = 2;
  if (!this->_internal_err_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_message().data(), static_cast<int>(this->_internal_err_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLINT_RPC_MESSAGE.OpenVolumeResponse.err_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_err_message(), target);
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  // uint32 rep_factor = 4;
  if (this->_internal_rep_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rep_factor(), target);
  }

  // uint32 flags = 5;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flags(), target);
  }

  // map<uint32, .FLINT_RPC_MESSAGE.ExtentLocators> extent_locator_map = 6;
  if (!this->_internal_extent_locator_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_extent_locator_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_extent_locator_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >::const_iterator
          it = this->_internal_extent_locator_map().begin();
          it != this->_internal_extent_locator_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >::const_iterator
          it = this->_internal_extent_locator_map().begin();
          it != this->_internal_extent_locator_map().end(); ++it) {
        target = OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.OpenVolumeResponse)
  return target;
}

size_t OpenVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.OpenVolumeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .FLINT_RPC_MESSAGE.ExtentLocators> extent_locator_map = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extent_locator_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >::const_iterator
      it = this->_internal_extent_locator_map().begin();
      it != this->_internal_extent_locator_map().end(); ++it) {
    total_size += OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string err_message = 2;
  if (!this->_internal_err_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_message());
  }

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  // uint32 rep_factor = 4;
  if (this->_internal_rep_factor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rep_factor());
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // uint32 flags = 5;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenVolumeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenVolumeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenVolumeResponse::GetClassData() const { return &_class_data_; }

void OpenVolumeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenVolumeResponse *>(to)->MergeFrom(
      static_cast<const OpenVolumeResponse &>(from));
}


void OpenVolumeResponse::MergeFrom(const OpenVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.OpenVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extent_locator_map_.MergeFrom(from.extent_locator_map_);
  if (!from._internal_err_message().empty()) {
    _internal_set_err_message(from._internal_err_message());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  if (from._internal_rep_factor() != 0) {
    _internal_set_rep_factor(from._internal_rep_factor());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenVolumeResponse::CopyFrom(const OpenVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.OpenVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenVolumeResponse::IsInitialized() const {
  return true;
}

void OpenVolumeResponse::InternalSwap(OpenVolumeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extent_locator_map_.InternalSwap(&other->extent_locator_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_message_, lhs_arena,
      &other->err_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenVolumeResponse, flags_)
      + sizeof(OpenVolumeResponse::flags_)
      - PROTOBUF_FIELD_OFFSET(OpenVolumeResponse, err_code_)>(
          reinterpret_cast<char*>(&err_code_),
          reinterpret_cast<char*>(&other->err_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenVolumeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[11]);
}

// ===================================================================

VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse::VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse() {}
VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse::VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse::MergeFrom(const VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[12]);
}

// ===================================================================

class VolumeExtentFaultRequest::_Internal {
 public:
};

VolumeExtentFaultRequest::VolumeExtentFaultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lexts_(arena),
  ssd_preference_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest)
}
VolumeExtentFaultRequest::VolumeExtentFaultRequest(const VolumeExtentFaultRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lexts_(from.lexts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssd_preference_.MergeFrom(from.ssd_preference_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  policy_ = from.policy_;
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest)
}

inline void VolumeExtentFaultRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
policy_ = 0u;
}

VolumeExtentFaultRequest::~VolumeExtentFaultRequest() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VolumeExtentFaultRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VolumeExtentFaultRequest::ArenaDtor(void* object) {
  VolumeExtentFaultRequest* _this = reinterpret_cast< VolumeExtentFaultRequest* >(object);
  (void)_this;
  _this->ssd_preference_. ~MapField();
}
inline void VolumeExtentFaultRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &VolumeExtentFaultRequest::ArenaDtor);
  }
}
void VolumeExtentFaultRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeExtentFaultRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lexts_.Clear();
  ssd_preference_.Clear();
  name_.ClearToEmpty();
  policy_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolumeExtentFaultRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 lexts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_lexts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_lexts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, float> ssd_preference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ssd_preference_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          policy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VolumeExtentFaultRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated uint64 lexts = 2;
  {
    int byte_size = _lexts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_lexts(), byte_size, target);
    }
  }

  // map<string, float> ssd_preference = 3;
  if (!this->_internal_ssd_preference().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "FLINT_RPC_MESSAGE.VolumeExtentFaultRequest.SsdPreferenceEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ssd_preference().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ssd_preference().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_ssd_preference().begin();
          it != this->_internal_ssd_preference().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_ssd_preference().begin();
          it != this->_internal_ssd_preference().end(); ++it) {
        target = VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // uint32 policy = 4;
  if (this->_internal_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_policy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest)
  return target;
}

size_t VolumeExtentFaultRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 lexts = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->lexts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lexts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, float> ssd_preference = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ssd_preference_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_ssd_preference().begin();
      it != this->_internal_ssd_preference().end(); ++it) {
    total_size += VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 policy = 4;
  if (this->_internal_policy() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_policy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VolumeExtentFaultRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VolumeExtentFaultRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VolumeExtentFaultRequest::GetClassData() const { return &_class_data_; }

void VolumeExtentFaultRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VolumeExtentFaultRequest *>(to)->MergeFrom(
      static_cast<const VolumeExtentFaultRequest &>(from));
}


void VolumeExtentFaultRequest::MergeFrom(const VolumeExtentFaultRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  lexts_.MergeFrom(from.lexts_);
  ssd_preference_.MergeFrom(from.ssd_preference_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_policy() != 0) {
    _internal_set_policy(from._internal_policy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VolumeExtentFaultRequest::CopyFrom(const VolumeExtentFaultRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.VolumeExtentFaultRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeExtentFaultRequest::IsInitialized() const {
  return true;
}

void VolumeExtentFaultRequest::InternalSwap(VolumeExtentFaultRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  lexts_.InternalSwap(&other->lexts_);
  ssd_preference_.InternalSwap(&other->ssd_preference_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(policy_, other->policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VolumeExtentFaultRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[13]);
}

// ===================================================================

VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse::VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse() {}
VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse::VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse::MergeFrom(const VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[14]);
}

// ===================================================================

class VolumeExtentFaultResponse::_Internal {
 public:
};

VolumeExtentFaultResponse::VolumeExtentFaultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extent_locator_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse)
}
VolumeExtentFaultResponse::VolumeExtentFaultResponse(const VolumeExtentFaultResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extent_locator_map_.MergeFrom(from.extent_locator_map_);
  err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_message().empty()) {
    err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_message(), 
      GetArenaForAllocation());
  }
  err_code_ = from.err_code_;
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse)
}

inline void VolumeExtentFaultResponse::SharedCtor() {
err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
err_code_ = 0;
}

VolumeExtentFaultResponse::~VolumeExtentFaultResponse() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VolumeExtentFaultResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VolumeExtentFaultResponse::ArenaDtor(void* object) {
  VolumeExtentFaultResponse* _this = reinterpret_cast< VolumeExtentFaultResponse* >(object);
  (void)_this;
  _this->extent_locator_map_. ~MapField();
}
inline void VolumeExtentFaultResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &VolumeExtentFaultResponse::ArenaDtor);
  }
}
void VolumeExtentFaultResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeExtentFaultResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extent_locator_map_.Clear();
  err_message_.ClearToEmpty();
  err_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolumeExtentFaultResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_err_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLINT_RPC_MESSAGE.VolumeExtentFaultResponse.err_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .FLINT_RPC_MESSAGE.ExtentLocators> extent_locator_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&extent_locator_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VolumeExtentFaultResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_code(), target);
  }

  // string err_message = 2;
  if (!this->_internal_err_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_message().data(), static_cast<int>(this->_internal_err_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLINT_RPC_MESSAGE.VolumeExtentFaultResponse.err_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_err_message(), target);
  }

  // map<uint32, .FLINT_RPC_MESSAGE.ExtentLocators> extent_locator_map = 3;
  if (!this->_internal_extent_locator_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_extent_locator_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_extent_locator_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >::const_iterator
          it = this->_internal_extent_locator_map().begin();
          it != this->_internal_extent_locator_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >::const_iterator
          it = this->_internal_extent_locator_map().begin();
          it != this->_internal_extent_locator_map().end(); ++it) {
        target = VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse)
  return target;
}

size_t VolumeExtentFaultResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .FLINT_RPC_MESSAGE.ExtentLocators> extent_locator_map = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extent_locator_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::FLINT_RPC_MESSAGE::ExtentLocators >::const_iterator
      it = this->_internal_extent_locator_map().begin();
      it != this->_internal_extent_locator_map().end(); ++it) {
    total_size += VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string err_message = 2;
  if (!this->_internal_err_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_message());
  }

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VolumeExtentFaultResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VolumeExtentFaultResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VolumeExtentFaultResponse::GetClassData() const { return &_class_data_; }

void VolumeExtentFaultResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VolumeExtentFaultResponse *>(to)->MergeFrom(
      static_cast<const VolumeExtentFaultResponse &>(from));
}


void VolumeExtentFaultResponse::MergeFrom(const VolumeExtentFaultResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extent_locator_map_.MergeFrom(from.extent_locator_map_);
  if (!from._internal_err_message().empty()) {
    _internal_set_err_message(from._internal_err_message());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VolumeExtentFaultResponse::CopyFrom(const VolumeExtentFaultResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.VolumeExtentFaultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeExtentFaultResponse::IsInitialized() const {
  return true;
}

void VolumeExtentFaultResponse::InternalSwap(VolumeExtentFaultResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extent_locator_map_.InternalSwap(&other->extent_locator_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_message_, lhs_arena,
      &other->err_message_, rhs_arena
  );
  swap(err_code_, other->err_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VolumeExtentFaultResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[15]);
}

// ===================================================================

class DeleteVolumeRequest::_Internal {
 public:
};

DeleteVolumeRequest::DeleteVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.DeleteVolumeRequest)
}
DeleteVolumeRequest::DeleteVolumeRequest(const DeleteVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.DeleteVolumeRequest)
}

inline void DeleteVolumeRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteVolumeRequest::~DeleteVolumeRequest() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.DeleteVolumeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteVolumeRequest::ArenaDtor(void* object) {
  DeleteVolumeRequest* _this = reinterpret_cast< DeleteVolumeRequest* >(object);
  (void)_this;
}
void DeleteVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.DeleteVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLINT_RPC_MESSAGE.DeleteVolumeRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.DeleteVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLINT_RPC_MESSAGE.DeleteVolumeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.DeleteVolumeRequest)
  return target;
}

size_t DeleteVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.DeleteVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteVolumeRequest::GetClassData() const { return &_class_data_; }

void DeleteVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteVolumeRequest *>(to)->MergeFrom(
      static_cast<const DeleteVolumeRequest &>(from));
}


void DeleteVolumeRequest::MergeFrom(const DeleteVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.DeleteVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteVolumeRequest::CopyFrom(const DeleteVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.DeleteVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVolumeRequest::IsInitialized() const {
  return true;
}

void DeleteVolumeRequest::InternalSwap(DeleteVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVolumeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[16]);
}

// ===================================================================

class DeleteVolumeResponse::_Internal {
 public:
};

DeleteVolumeResponse::DeleteVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.DeleteVolumeResponse)
}
DeleteVolumeResponse::DeleteVolumeResponse(const DeleteVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_message().empty()) {
    err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_message(), 
      GetArenaForAllocation());
  }
  err_code_ = from.err_code_;
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.DeleteVolumeResponse)
}

inline void DeleteVolumeResponse::SharedCtor() {
err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
err_code_ = 0;
}

DeleteVolumeResponse::~DeleteVolumeResponse() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.DeleteVolumeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteVolumeResponse::ArenaDtor(void* object) {
  DeleteVolumeResponse* _this = reinterpret_cast< DeleteVolumeResponse* >(object);
  (void)_this;
}
void DeleteVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.DeleteVolumeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_message_.ClearToEmpty();
  err_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteVolumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_err_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLINT_RPC_MESSAGE.DeleteVolumeResponse.err_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteVolumeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.DeleteVolumeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_code(), target);
  }

  // string err_message = 2;
  if (!this->_internal_err_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_message().data(), static_cast<int>(this->_internal_err_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLINT_RPC_MESSAGE.DeleteVolumeResponse.err_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_err_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.DeleteVolumeResponse)
  return target;
}

size_t DeleteVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.DeleteVolumeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_message = 2;
  if (!this->_internal_err_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_message());
  }

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteVolumeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteVolumeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteVolumeResponse::GetClassData() const { return &_class_data_; }

void DeleteVolumeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteVolumeResponse *>(to)->MergeFrom(
      static_cast<const DeleteVolumeResponse &>(from));
}


void DeleteVolumeResponse::MergeFrom(const DeleteVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.DeleteVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_message().empty()) {
    _internal_set_err_message(from._internal_err_message());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteVolumeResponse::CopyFrom(const DeleteVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.DeleteVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteVolumeResponse::IsInitialized() const {
  return true;
}

void DeleteVolumeResponse::InternalSwap(DeleteVolumeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_message_, lhs_arena,
      &other->err_message_, rhs_arena
  );
  swap(err_code_, other->err_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteVolumeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[17]);
}

// ===================================================================

class ListVolumeRequest::_Internal {
 public:
};

ListVolumeRequest::ListVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.ListVolumeRequest)
}
ListVolumeRequest::ListVolumeRequest(const ListVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  list_all_ = from.list_all_;
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.ListVolumeRequest)
}

inline void ListVolumeRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
list_all_ = false;
}

ListVolumeRequest::~ListVolumeRequest() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.ListVolumeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListVolumeRequest::ArenaDtor(void* object) {
  ListVolumeRequest* _this = reinterpret_cast< ListVolumeRequest* >(object);
  (void)_this;
}
void ListVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.ListVolumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  list_all_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLINT_RPC_MESSAGE.ListVolumeRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool list_all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          list_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListVolumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.ListVolumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLINT_RPC_MESSAGE.ListVolumeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool list_all = 2;
  if (this->_internal_list_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_list_all(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.ListVolumeRequest)
  return target;
}

size_t ListVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.ListVolumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool list_all = 2;
  if (this->_internal_list_all() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListVolumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListVolumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListVolumeRequest::GetClassData() const { return &_class_data_; }

void ListVolumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListVolumeRequest *>(to)->MergeFrom(
      static_cast<const ListVolumeRequest &>(from));
}


void ListVolumeRequest::MergeFrom(const ListVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.ListVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_list_all() != 0) {
    _internal_set_list_all(from._internal_list_all());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListVolumeRequest::CopyFrom(const ListVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.ListVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVolumeRequest::IsInitialized() const {
  return true;
}

void ListVolumeRequest::InternalSwap(ListVolumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(list_all_, other->list_all_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVolumeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[18]);
}

// ===================================================================

class VolumeAttrs::_Internal {
 public:
};

VolumeAttrs::VolumeAttrs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.VolumeAttrs)
}
VolumeAttrs::VolumeAttrs(const VolumeAttrs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&size_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.VolumeAttrs)
}

inline void VolumeAttrs::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&size_)) + sizeof(flags_));
}

VolumeAttrs::~VolumeAttrs() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.VolumeAttrs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VolumeAttrs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VolumeAttrs::ArenaDtor(void* object) {
  VolumeAttrs* _this = reinterpret_cast< VolumeAttrs* >(object);
  (void)_this;
}
void VolumeAttrs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolumeAttrs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolumeAttrs::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.VolumeAttrs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&size_)) + sizeof(flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolumeAttrs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLINT_RPC_MESSAGE.VolumeAttrs.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rep_factor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          rep_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VolumeAttrs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.VolumeAttrs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLINT_RPC_MESSAGE.VolumeAttrs.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size(), target);
  }

  // uint32 rep_factor = 3;
  if (this->_internal_rep_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rep_factor(), target);
  }

  // uint32 flags = 4;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.VolumeAttrs)
  return target;
}

size_t VolumeAttrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.VolumeAttrs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // uint32 rep_factor = 3;
  if (this->_internal_rep_factor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rep_factor());
  }

  // uint32 flags = 4;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VolumeAttrs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VolumeAttrs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VolumeAttrs::GetClassData() const { return &_class_data_; }

void VolumeAttrs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VolumeAttrs *>(to)->MergeFrom(
      static_cast<const VolumeAttrs &>(from));
}


void VolumeAttrs::MergeFrom(const VolumeAttrs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.VolumeAttrs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_rep_factor() != 0) {
    _internal_set_rep_factor(from._internal_rep_factor());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VolumeAttrs::CopyFrom(const VolumeAttrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.VolumeAttrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeAttrs::IsInitialized() const {
  return true;
}

void VolumeAttrs::InternalSwap(VolumeAttrs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VolumeAttrs, flags_)
      + sizeof(VolumeAttrs::flags_)
      - PROTOBUF_FIELD_OFFSET(VolumeAttrs, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VolumeAttrs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[19]);
}

// ===================================================================

class ListVolumeResponse::_Internal {
 public:
};

ListVolumeResponse::ListVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vol_attrs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.ListVolumeResponse)
}
ListVolumeResponse::ListVolumeResponse(const ListVolumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vol_attrs_(from.vol_attrs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_message().empty()) {
    err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_message(), 
      GetArenaForAllocation());
  }
  err_code_ = from.err_code_;
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.ListVolumeResponse)
}

inline void ListVolumeResponse::SharedCtor() {
err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
err_code_ = 0;
}

ListVolumeResponse::~ListVolumeResponse() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.ListVolumeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListVolumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListVolumeResponse::ArenaDtor(void* object) {
  ListVolumeResponse* _this = reinterpret_cast< ListVolumeResponse* >(object);
  (void)_this;
}
void ListVolumeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListVolumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListVolumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.ListVolumeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vol_attrs_.Clear();
  err_message_.ClearToEmpty();
  err_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListVolumeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_err_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLINT_RPC_MESSAGE.ListVolumeResponse.err_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .FLINT_RPC_MESSAGE.VolumeAttrs vol_attrs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vol_attrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListVolumeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.ListVolumeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_code(), target);
  }

  // string err_message = 2;
  if (!this->_internal_err_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_message().data(), static_cast<int>(this->_internal_err_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLINT_RPC_MESSAGE.ListVolumeResponse.err_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_err_message(), target);
  }

  // repeated .FLINT_RPC_MESSAGE.VolumeAttrs vol_attrs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vol_attrs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_vol_attrs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.ListVolumeResponse)
  return target;
}

size_t ListVolumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.ListVolumeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FLINT_RPC_MESSAGE.VolumeAttrs vol_attrs = 3;
  total_size += 1UL * this->_internal_vol_attrs_size();
  for (const auto& msg : this->vol_attrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string err_message = 2;
  if (!this->_internal_err_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_message());
  }

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListVolumeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListVolumeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListVolumeResponse::GetClassData() const { return &_class_data_; }

void ListVolumeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListVolumeResponse *>(to)->MergeFrom(
      static_cast<const ListVolumeResponse &>(from));
}


void ListVolumeResponse::MergeFrom(const ListVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.ListVolumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vol_attrs_.MergeFrom(from.vol_attrs_);
  if (!from._internal_err_message().empty()) {
    _internal_set_err_message(from._internal_err_message());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListVolumeResponse::CopyFrom(const ListVolumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.ListVolumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVolumeResponse::IsInitialized() const {
  return true;
}

void ListVolumeResponse::InternalSwap(ListVolumeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vol_attrs_.InternalSwap(&other->vol_attrs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_message_, lhs_arena,
      &other->err_message_, rhs_arena
  );
  swap(err_code_, other->err_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVolumeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[20]);
}

// ===================================================================

class RegisterRequest::_Internal {
 public:
};

RegisterRequest::RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.RegisterRequest)
}
RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  local_scheduler_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    local_scheduler_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_local_scheduler_ip().empty()) {
    local_scheduler_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_local_scheduler_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&slo_level_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(slo_level_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.RegisterRequest)
}

inline void RegisterRequest::SharedCtor() {
local_scheduler_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  local_scheduler_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slo_level_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(slo_level_));
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.RegisterRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  local_scheduler_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterRequest::ArenaDtor(void* object) {
  RegisterRequest* _this = reinterpret_cast< RegisterRequest* >(object);
  (void)_this;
}
void RegisterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.RegisterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  local_scheduler_ip_.ClearToEmpty();
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slo_level_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(slo_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string local_scheduler_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_local_scheduler_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLINT_RPC_MESSAGE.RegisterRequest.local_scheduler_ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 local_scheduler_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          local_scheduler_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ebof_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ebof_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slo_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          slo_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.RegisterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_client_id(), target);
  }

  // string local_scheduler_ip = 2;
  if (!this->_internal_local_scheduler_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_scheduler_ip().data(), static_cast<int>(this->_internal_local_scheduler_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLINT_RPC_MESSAGE.RegisterRequest.local_scheduler_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_local_scheduler_ip(), target);
  }

  // int32 local_scheduler_port = 3;
  if (this->_internal_local_scheduler_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_local_scheduler_port(), target);
  }

  // int32 ebof_port = 4;
  if (this->_internal_ebof_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ebof_port(), target);
  }

  // int32 slo_level = 5;
  if (this->_internal_slo_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_slo_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.RegisterRequest)
  return target;
}

size_t RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.RegisterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string local_scheduler_ip = 2;
  if (!this->_internal_local_scheduler_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_scheduler_ip());
  }

  // int32 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_client_id());
  }

  // int32 local_scheduler_port = 3;
  if (this->_internal_local_scheduler_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_local_scheduler_port());
  }

  // int32 ebof_port = 4;
  if (this->_internal_ebof_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ebof_port());
  }

  // int32 slo_level = 5;
  if (this->_internal_slo_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slo_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterRequest::GetClassData() const { return &_class_data_; }

void RegisterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterRequest *>(to)->MergeFrom(
      static_cast<const RegisterRequest &>(from));
}


void RegisterRequest::MergeFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_local_scheduler_ip().empty()) {
    _internal_set_local_scheduler_ip(from._internal_local_scheduler_ip());
  }
  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_local_scheduler_port() != 0) {
    _internal_set_local_scheduler_port(from._internal_local_scheduler_port());
  }
  if (from._internal_ebof_port() != 0) {
    _internal_set_ebof_port(from._internal_ebof_port());
  }
  if (from._internal_slo_level() != 0) {
    _internal_set_slo_level(from._internal_slo_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  return true;
}

void RegisterRequest::InternalSwap(RegisterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &local_scheduler_ip_, lhs_arena,
      &other->local_scheduler_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterRequest, slo_level_)
      + sizeof(RegisterRequest::slo_level_)
      - PROTOBUF_FIELD_OFFSET(RegisterRequest, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[21]);
}

// ===================================================================

class RegisterResponse::_Internal {
 public:
};

RegisterResponse::RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.RegisterResponse)
}
RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_msg().empty()) {
    err_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&err_code_, &from.err_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_id_) -
    reinterpret_cast<char*>(&err_code_)) + sizeof(client_id_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.RegisterResponse)
}

inline void RegisterResponse::SharedCtor() {
err_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&err_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_id_) -
    reinterpret_cast<char*>(&err_code_)) + sizeof(client_id_));
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.RegisterResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterResponse::ArenaDtor(void* object) {
  RegisterResponse* _this = reinterpret_cast< RegisterResponse* >(object);
  (void)_this;
}
void RegisterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.RegisterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_msg_.ClearToEmpty();
  ::memset(&err_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_id_) -
      reinterpret_cast<char*>(&err_code_)) + sizeof(client_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_err_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "FLINT_RPC_MESSAGE.RegisterResponse.err_msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 client_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.RegisterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_code(), target);
  }

  // string err_msg = 2;
  if (!this->_internal_err_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_msg().data(), static_cast<int>(this->_internal_err_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FLINT_RPC_MESSAGE.RegisterResponse.err_msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_err_msg(), target);
  }

  // int32 client_id = 3;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.RegisterResponse)
  return target;
}

size_t RegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.RegisterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_msg = 2;
  if (!this->_internal_err_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_msg());
  }

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  // int32 client_id = 3;
  if (this->_internal_client_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterResponse::GetClassData() const { return &_class_data_; }

void RegisterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterResponse *>(to)->MergeFrom(
      static_cast<const RegisterResponse &>(from));
}


void RegisterResponse::MergeFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_msg().empty()) {
    _internal_set_err_msg(from._internal_err_msg());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {
  return true;
}

void RegisterResponse::InternalSwap(RegisterResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_msg_, lhs_arena,
      &other->err_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterResponse, client_id_)
      + sizeof(RegisterResponse::client_id_)
      - PROTOBUF_FIELD_OFFSET(RegisterResponse, err_code_)>(
          reinterpret_cast<char*>(&err_code_),
          reinterpret_cast<char*>(&other->err_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[22]);
}

// ===================================================================

class PortView::_Internal {
 public:
};

PortView::PortView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  read_size_dist_(arena),
  write_size_dist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.PortView)
}
PortView::PortView(const PortView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      read_size_dist_(from.read_size_dist_),
      write_size_dist_(from.write_size_dist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_id_, &from.port_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&write_iops_) -
    reinterpret_cast<char*>(&port_id_)) + sizeof(write_iops_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.PortView)
}

inline void PortView::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&write_iops_) -
    reinterpret_cast<char*>(&port_id_)) + sizeof(write_iops_));
}

PortView::~PortView() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.PortView)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PortView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PortView::ArenaDtor(void* object) {
  PortView* _this = reinterpret_cast< PortView* >(object);
  (void)_this;
}
void PortView::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortView::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.PortView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  read_size_dist_.Clear();
  write_size_dist_.Clear();
  ::memset(&port_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_iops_) -
      reinterpret_cast<char*>(&port_id_)) + sizeof(write_iops_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 port_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          port_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float read_bw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          read_bw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float write_bw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          write_bw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float read_iops = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          read_iops_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float write_iops = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          write_iops_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 read_size_dist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_read_size_dist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_read_size_dist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 write_size_dist = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_write_size_dist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_write_size_dist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 recency_counter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          recency_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.PortView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port_id = 1;
  if (this->_internal_port_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_port_id(), target);
  }

  // float read_bw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_bw = this->_internal_read_bw();
  uint32_t raw_read_bw;
  memcpy(&raw_read_bw, &tmp_read_bw, sizeof(tmp_read_bw));
  if (raw_read_bw != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_read_bw(), target);
  }

  // float write_bw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_bw = this->_internal_write_bw();
  uint32_t raw_write_bw;
  memcpy(&raw_write_bw, &tmp_write_bw, sizeof(tmp_write_bw));
  if (raw_write_bw != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_write_bw(), target);
  }

  // float read_iops = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_iops = this->_internal_read_iops();
  uint32_t raw_read_iops;
  memcpy(&raw_read_iops, &tmp_read_iops, sizeof(tmp_read_iops));
  if (raw_read_iops != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_read_iops(), target);
  }

  // float write_iops = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_iops = this->_internal_write_iops();
  uint32_t raw_write_iops;
  memcpy(&raw_write_iops, &tmp_write_iops, sizeof(tmp_write_iops));
  if (raw_write_iops != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_write_iops(), target);
  }

  // repeated uint32 read_size_dist = 6;
  {
    int byte_size = _read_size_dist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_read_size_dist(), byte_size, target);
    }
  }

  // repeated uint32 write_size_dist = 7;
  {
    int byte_size = _write_size_dist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_write_size_dist(), byte_size, target);
    }
  }

  // uint64 recency_counter = 8;
  if (this->_internal_recency_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_recency_counter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.PortView)
  return target;
}

size_t PortView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.PortView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 read_size_dist = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->read_size_dist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _read_size_dist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 write_size_dist = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->write_size_dist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _write_size_dist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 port_id = 1;
  if (this->_internal_port_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port_id());
  }

  // float read_bw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_bw = this->_internal_read_bw();
  uint32_t raw_read_bw;
  memcpy(&raw_read_bw, &tmp_read_bw, sizeof(tmp_read_bw));
  if (raw_read_bw != 0) {
    total_size += 1 + 4;
  }

  // float write_bw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_bw = this->_internal_write_bw();
  uint32_t raw_write_bw;
  memcpy(&raw_write_bw, &tmp_write_bw, sizeof(tmp_write_bw));
  if (raw_write_bw != 0) {
    total_size += 1 + 4;
  }

  // float read_iops = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_iops = this->_internal_read_iops();
  uint32_t raw_read_iops;
  memcpy(&raw_read_iops, &tmp_read_iops, sizeof(tmp_read_iops));
  if (raw_read_iops != 0) {
    total_size += 1 + 4;
  }

  // uint64 recency_counter = 8;
  if (this->_internal_recency_counter() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_recency_counter());
  }

  // float write_iops = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_iops = this->_internal_write_iops();
  uint32_t raw_write_iops;
  memcpy(&raw_write_iops, &tmp_write_iops, sizeof(tmp_write_iops));
  if (raw_write_iops != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PortView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortView::GetClassData() const { return &_class_data_; }

void PortView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PortView *>(to)->MergeFrom(
      static_cast<const PortView &>(from));
}


void PortView::MergeFrom(const PortView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.PortView)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  read_size_dist_.MergeFrom(from.read_size_dist_);
  write_size_dist_.MergeFrom(from.write_size_dist_);
  if (from._internal_port_id() != 0) {
    _internal_set_port_id(from._internal_port_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_bw = from._internal_read_bw();
  uint32_t raw_read_bw;
  memcpy(&raw_read_bw, &tmp_read_bw, sizeof(tmp_read_bw));
  if (raw_read_bw != 0) {
    _internal_set_read_bw(from._internal_read_bw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_bw = from._internal_write_bw();
  uint32_t raw_write_bw;
  memcpy(&raw_write_bw, &tmp_write_bw, sizeof(tmp_write_bw));
  if (raw_write_bw != 0) {
    _internal_set_write_bw(from._internal_write_bw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_iops = from._internal_read_iops();
  uint32_t raw_read_iops;
  memcpy(&raw_read_iops, &tmp_read_iops, sizeof(tmp_read_iops));
  if (raw_read_iops != 0) {
    _internal_set_read_iops(from._internal_read_iops());
  }
  if (from._internal_recency_counter() != 0) {
    _internal_set_recency_counter(from._internal_recency_counter());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_iops = from._internal_write_iops();
  uint32_t raw_write_iops;
  memcpy(&raw_write_iops, &tmp_write_iops, sizeof(tmp_write_iops));
  if (raw_write_iops != 0) {
    _internal_set_write_iops(from._internal_write_iops());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortView::CopyFrom(const PortView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.PortView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortView::IsInitialized() const {
  return true;
}

void PortView::InternalSwap(PortView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  read_size_dist_.InternalSwap(&other->read_size_dist_);
  write_size_dist_.InternalSwap(&other->write_size_dist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PortView, write_iops_)
      + sizeof(PortView::write_iops_)
      - PROTOBUF_FIELD_OFFSET(PortView, port_id_)>(
          reinterpret_cast<char*>(&port_id_),
          reinterpret_cast<char*>(&other->port_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PortView::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[23]);
}

// ===================================================================

class PipeView::_Internal {
 public:
};

PipeView::PipeView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.PipeView)
}
PipeView::PipeView(const PipeView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pipe_id_, &from.pipe_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&write_iops_) -
    reinterpret_cast<char*>(&pipe_id_)) + sizeof(write_iops_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.PipeView)
}

inline void PipeView::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pipe_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&write_iops_) -
    reinterpret_cast<char*>(&pipe_id_)) + sizeof(write_iops_));
}

PipeView::~PipeView() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.PipeView)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PipeView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PipeView::ArenaDtor(void* object) {
  PipeView* _this = reinterpret_cast< PipeView* >(object);
  (void)_this;
}
void PipeView::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PipeView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PipeView::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.PipeView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pipe_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_iops_) -
      reinterpret_cast<char*>(&pipe_id_)) + sizeof(write_iops_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PipeView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pipe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pipe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float read_bw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          read_bw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float write_bw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          write_bw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float read_iops = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          read_iops_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float write_iops = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          write_iops_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 recency_counter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          recency_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PipeView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.PipeView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pipe_id = 1;
  if (this->_internal_pipe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pipe_id(), target);
  }

  // float read_bw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_bw = this->_internal_read_bw();
  uint32_t raw_read_bw;
  memcpy(&raw_read_bw, &tmp_read_bw, sizeof(tmp_read_bw));
  if (raw_read_bw != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_read_bw(), target);
  }

  // float write_bw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_bw = this->_internal_write_bw();
  uint32_t raw_write_bw;
  memcpy(&raw_write_bw, &tmp_write_bw, sizeof(tmp_write_bw));
  if (raw_write_bw != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_write_bw(), target);
  }

  // float read_iops = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_iops = this->_internal_read_iops();
  uint32_t raw_read_iops;
  memcpy(&raw_read_iops, &tmp_read_iops, sizeof(tmp_read_iops));
  if (raw_read_iops != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_read_iops(), target);
  }

  // float write_iops = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_iops = this->_internal_write_iops();
  uint32_t raw_write_iops;
  memcpy(&raw_write_iops, &tmp_write_iops, sizeof(tmp_write_iops));
  if (raw_write_iops != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_write_iops(), target);
  }

  // uint64 recency_counter = 6;
  if (this->_internal_recency_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_recency_counter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.PipeView)
  return target;
}

size_t PipeView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.PipeView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pipe_id = 1;
  if (this->_internal_pipe_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pipe_id());
  }

  // float read_bw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_bw = this->_internal_read_bw();
  uint32_t raw_read_bw;
  memcpy(&raw_read_bw, &tmp_read_bw, sizeof(tmp_read_bw));
  if (raw_read_bw != 0) {
    total_size += 1 + 4;
  }

  // float write_bw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_bw = this->_internal_write_bw();
  uint32_t raw_write_bw;
  memcpy(&raw_write_bw, &tmp_write_bw, sizeof(tmp_write_bw));
  if (raw_write_bw != 0) {
    total_size += 1 + 4;
  }

  // float read_iops = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_iops = this->_internal_read_iops();
  uint32_t raw_read_iops;
  memcpy(&raw_read_iops, &tmp_read_iops, sizeof(tmp_read_iops));
  if (raw_read_iops != 0) {
    total_size += 1 + 4;
  }

  // uint64 recency_counter = 6;
  if (this->_internal_recency_counter() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_recency_counter());
  }

  // float write_iops = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_iops = this->_internal_write_iops();
  uint32_t raw_write_iops;
  memcpy(&raw_write_iops, &tmp_write_iops, sizeof(tmp_write_iops));
  if (raw_write_iops != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PipeView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PipeView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PipeView::GetClassData() const { return &_class_data_; }

void PipeView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PipeView *>(to)->MergeFrom(
      static_cast<const PipeView &>(from));
}


void PipeView::MergeFrom(const PipeView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.PipeView)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pipe_id() != 0) {
    _internal_set_pipe_id(from._internal_pipe_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_bw = from._internal_read_bw();
  uint32_t raw_read_bw;
  memcpy(&raw_read_bw, &tmp_read_bw, sizeof(tmp_read_bw));
  if (raw_read_bw != 0) {
    _internal_set_read_bw(from._internal_read_bw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_bw = from._internal_write_bw();
  uint32_t raw_write_bw;
  memcpy(&raw_write_bw, &tmp_write_bw, sizeof(tmp_write_bw));
  if (raw_write_bw != 0) {
    _internal_set_write_bw(from._internal_write_bw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_iops = from._internal_read_iops();
  uint32_t raw_read_iops;
  memcpy(&raw_read_iops, &tmp_read_iops, sizeof(tmp_read_iops));
  if (raw_read_iops != 0) {
    _internal_set_read_iops(from._internal_read_iops());
  }
  if (from._internal_recency_counter() != 0) {
    _internal_set_recency_counter(from._internal_recency_counter());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_iops = from._internal_write_iops();
  uint32_t raw_write_iops;
  memcpy(&raw_write_iops, &tmp_write_iops, sizeof(tmp_write_iops));
  if (raw_write_iops != 0) {
    _internal_set_write_iops(from._internal_write_iops());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PipeView::CopyFrom(const PipeView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.PipeView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PipeView::IsInitialized() const {
  return true;
}

void PipeView::InternalSwap(PipeView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PipeView, write_iops_)
      + sizeof(PipeView::write_iops_)
      - PROTOBUF_FIELD_OFFSET(PipeView, pipe_id_)>(
          reinterpret_cast<char*>(&pipe_id_),
          reinterpret_cast<char*>(&other->pipe_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PipeView::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[24]);
}

// ===================================================================

class SsdView::_Internal {
 public:
};

SsdView::SsdView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.SsdView)
}
SsdView::SsdView(const SsdView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ssd_id_, &from.ssd_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&write_cost_) -
    reinterpret_cast<char*>(&ssd_id_)) + sizeof(write_cost_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.SsdView)
}

inline void SsdView::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ssd_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&write_cost_) -
    reinterpret_cast<char*>(&ssd_id_)) + sizeof(write_cost_));
}

SsdView::~SsdView() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.SsdView)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SsdView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SsdView::ArenaDtor(void* object) {
  SsdView* _this = reinterpret_cast< SsdView* >(object);
  (void)_this;
}
void SsdView::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SsdView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SsdView::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.SsdView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ssd_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_cost_) -
      reinterpret_cast<char*>(&ssd_id_)) + sizeof(write_cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SsdView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ssd_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ssd_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float read_bw_used = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          read_bw_used_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float write_bw_used = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          write_bw_used_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float read_bw_free = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          read_bw_free_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float write_bw_free = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          write_bw_free_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float read_iops = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          read_iops_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float write_iops = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          write_iops_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float frag_degree = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          frag_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float write_cost = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          write_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 recency_counter = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          recency_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SsdView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.SsdView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ssd_id = 1;
  if (this->_internal_ssd_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ssd_id(), target);
  }

  // float read_bw_used = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_bw_used = this->_internal_read_bw_used();
  uint32_t raw_read_bw_used;
  memcpy(&raw_read_bw_used, &tmp_read_bw_used, sizeof(tmp_read_bw_used));
  if (raw_read_bw_used != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_read_bw_used(), target);
  }

  // float write_bw_used = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_bw_used = this->_internal_write_bw_used();
  uint32_t raw_write_bw_used;
  memcpy(&raw_write_bw_used, &tmp_write_bw_used, sizeof(tmp_write_bw_used));
  if (raw_write_bw_used != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_write_bw_used(), target);
  }

  // float read_bw_free = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_bw_free = this->_internal_read_bw_free();
  uint32_t raw_read_bw_free;
  memcpy(&raw_read_bw_free, &tmp_read_bw_free, sizeof(tmp_read_bw_free));
  if (raw_read_bw_free != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_read_bw_free(), target);
  }

  // float write_bw_free = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_bw_free = this->_internal_write_bw_free();
  uint32_t raw_write_bw_free;
  memcpy(&raw_write_bw_free, &tmp_write_bw_free, sizeof(tmp_write_bw_free));
  if (raw_write_bw_free != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_write_bw_free(), target);
  }

  // float read_iops = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_iops = this->_internal_read_iops();
  uint32_t raw_read_iops;
  memcpy(&raw_read_iops, &tmp_read_iops, sizeof(tmp_read_iops));
  if (raw_read_iops != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_read_iops(), target);
  }

  // float write_iops = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_iops = this->_internal_write_iops();
  uint32_t raw_write_iops;
  memcpy(&raw_write_iops, &tmp_write_iops, sizeof(tmp_write_iops));
  if (raw_write_iops != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_write_iops(), target);
  }

  // float frag_degree = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frag_degree = this->_internal_frag_degree();
  uint32_t raw_frag_degree;
  memcpy(&raw_frag_degree, &tmp_frag_degree, sizeof(tmp_frag_degree));
  if (raw_frag_degree != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_frag_degree(), target);
  }

  // float write_cost = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_cost = this->_internal_write_cost();
  uint32_t raw_write_cost;
  memcpy(&raw_write_cost, &tmp_write_cost, sizeof(tmp_write_cost));
  if (raw_write_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_write_cost(), target);
  }

  // uint64 recency_counter = 10;
  if (this->_internal_recency_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_recency_counter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.SsdView)
  return target;
}

size_t SsdView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.SsdView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ssd_id = 1;
  if (this->_internal_ssd_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ssd_id());
  }

  // float read_bw_used = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_bw_used = this->_internal_read_bw_used();
  uint32_t raw_read_bw_used;
  memcpy(&raw_read_bw_used, &tmp_read_bw_used, sizeof(tmp_read_bw_used));
  if (raw_read_bw_used != 0) {
    total_size += 1 + 4;
  }

  // float write_bw_used = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_bw_used = this->_internal_write_bw_used();
  uint32_t raw_write_bw_used;
  memcpy(&raw_write_bw_used, &tmp_write_bw_used, sizeof(tmp_write_bw_used));
  if (raw_write_bw_used != 0) {
    total_size += 1 + 4;
  }

  // float read_bw_free = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_bw_free = this->_internal_read_bw_free();
  uint32_t raw_read_bw_free;
  memcpy(&raw_read_bw_free, &tmp_read_bw_free, sizeof(tmp_read_bw_free));
  if (raw_read_bw_free != 0) {
    total_size += 1 + 4;
  }

  // float write_bw_free = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_bw_free = this->_internal_write_bw_free();
  uint32_t raw_write_bw_free;
  memcpy(&raw_write_bw_free, &tmp_write_bw_free, sizeof(tmp_write_bw_free));
  if (raw_write_bw_free != 0) {
    total_size += 1 + 4;
  }

  // float read_iops = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_iops = this->_internal_read_iops();
  uint32_t raw_read_iops;
  memcpy(&raw_read_iops, &tmp_read_iops, sizeof(tmp_read_iops));
  if (raw_read_iops != 0) {
    total_size += 1 + 4;
  }

  // float write_iops = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_iops = this->_internal_write_iops();
  uint32_t raw_write_iops;
  memcpy(&raw_write_iops, &tmp_write_iops, sizeof(tmp_write_iops));
  if (raw_write_iops != 0) {
    total_size += 1 + 4;
  }

  // float frag_degree = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frag_degree = this->_internal_frag_degree();
  uint32_t raw_frag_degree;
  memcpy(&raw_frag_degree, &tmp_frag_degree, sizeof(tmp_frag_degree));
  if (raw_frag_degree != 0) {
    total_size += 1 + 4;
  }

  // uint64 recency_counter = 10;
  if (this->_internal_recency_counter() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_recency_counter());
  }

  // float write_cost = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_cost = this->_internal_write_cost();
  uint32_t raw_write_cost;
  memcpy(&raw_write_cost, &tmp_write_cost, sizeof(tmp_write_cost));
  if (raw_write_cost != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SsdView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SsdView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SsdView::GetClassData() const { return &_class_data_; }

void SsdView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SsdView *>(to)->MergeFrom(
      static_cast<const SsdView &>(from));
}


void SsdView::MergeFrom(const SsdView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.SsdView)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ssd_id() != 0) {
    _internal_set_ssd_id(from._internal_ssd_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_bw_used = from._internal_read_bw_used();
  uint32_t raw_read_bw_used;
  memcpy(&raw_read_bw_used, &tmp_read_bw_used, sizeof(tmp_read_bw_used));
  if (raw_read_bw_used != 0) {
    _internal_set_read_bw_used(from._internal_read_bw_used());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_bw_used = from._internal_write_bw_used();
  uint32_t raw_write_bw_used;
  memcpy(&raw_write_bw_used, &tmp_write_bw_used, sizeof(tmp_write_bw_used));
  if (raw_write_bw_used != 0) {
    _internal_set_write_bw_used(from._internal_write_bw_used());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_bw_free = from._internal_read_bw_free();
  uint32_t raw_read_bw_free;
  memcpy(&raw_read_bw_free, &tmp_read_bw_free, sizeof(tmp_read_bw_free));
  if (raw_read_bw_free != 0) {
    _internal_set_read_bw_free(from._internal_read_bw_free());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_bw_free = from._internal_write_bw_free();
  uint32_t raw_write_bw_free;
  memcpy(&raw_write_bw_free, &tmp_write_bw_free, sizeof(tmp_write_bw_free));
  if (raw_write_bw_free != 0) {
    _internal_set_write_bw_free(from._internal_write_bw_free());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_read_iops = from._internal_read_iops();
  uint32_t raw_read_iops;
  memcpy(&raw_read_iops, &tmp_read_iops, sizeof(tmp_read_iops));
  if (raw_read_iops != 0) {
    _internal_set_read_iops(from._internal_read_iops());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_iops = from._internal_write_iops();
  uint32_t raw_write_iops;
  memcpy(&raw_write_iops, &tmp_write_iops, sizeof(tmp_write_iops));
  if (raw_write_iops != 0) {
    _internal_set_write_iops(from._internal_write_iops());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_frag_degree = from._internal_frag_degree();
  uint32_t raw_frag_degree;
  memcpy(&raw_frag_degree, &tmp_frag_degree, sizeof(tmp_frag_degree));
  if (raw_frag_degree != 0) {
    _internal_set_frag_degree(from._internal_frag_degree());
  }
  if (from._internal_recency_counter() != 0) {
    _internal_set_recency_counter(from._internal_recency_counter());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_write_cost = from._internal_write_cost();
  uint32_t raw_write_cost;
  memcpy(&raw_write_cost, &tmp_write_cost, sizeof(tmp_write_cost));
  if (raw_write_cost != 0) {
    _internal_set_write_cost(from._internal_write_cost());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SsdView::CopyFrom(const SsdView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.SsdView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SsdView::IsInitialized() const {
  return true;
}

void SsdView::InternalSwap(SsdView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SsdView, write_cost_)
      + sizeof(SsdView::write_cost_)
      - PROTOBUF_FIELD_OFFSET(SsdView, ssd_id_)>(
          reinterpret_cast<char*>(&ssd_id_),
          reinterpret_cast<char*>(&other->ssd_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SsdView::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[25]);
}

// ===================================================================

PartialView_IoPortViewsEntry_DoNotUse::PartialView_IoPortViewsEntry_DoNotUse() {}
PartialView_IoPortViewsEntry_DoNotUse::PartialView_IoPortViewsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PartialView_IoPortViewsEntry_DoNotUse::MergeFrom(const PartialView_IoPortViewsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PartialView_IoPortViewsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[26]);
}

// ===================================================================

PartialView_IoPipeViewsEntry_DoNotUse::PartialView_IoPipeViewsEntry_DoNotUse() {}
PartialView_IoPipeViewsEntry_DoNotUse::PartialView_IoPipeViewsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PartialView_IoPipeViewsEntry_DoNotUse::MergeFrom(const PartialView_IoPipeViewsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PartialView_IoPipeViewsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[27]);
}

// ===================================================================

PartialView_SsdViewsEntry_DoNotUse::PartialView_SsdViewsEntry_DoNotUse() {}
PartialView_SsdViewsEntry_DoNotUse::PartialView_SsdViewsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PartialView_SsdViewsEntry_DoNotUse::MergeFrom(const PartialView_SsdViewsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PartialView_SsdViewsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[28]);
}

// ===================================================================

class PartialView::_Internal {
 public:
  static const ::FLINT_RPC_MESSAGE::PortView& net_port_view(const PartialView* msg);
  static const ::FLINT_RPC_MESSAGE::PipeView& net_pipe_view(const PartialView* msg);
};

const ::FLINT_RPC_MESSAGE::PortView&
PartialView::_Internal::net_port_view(const PartialView* msg) {
  return *msg->net_port_view_;
}
const ::FLINT_RPC_MESSAGE::PipeView&
PartialView::_Internal::net_pipe_view(const PartialView* msg) {
  return *msg->net_pipe_view_;
}
PartialView::PartialView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  io_port_views_(arena),
  io_pipe_views_(arena),
  ssd_views_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.PartialView)
}
PartialView::PartialView(const PartialView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  io_port_views_.MergeFrom(from.io_port_views_);
  io_pipe_views_.MergeFrom(from.io_pipe_views_);
  ssd_views_.MergeFrom(from.ssd_views_);
  if (from._internal_has_net_port_view()) {
    net_port_view_ = new ::FLINT_RPC_MESSAGE::PortView(*from.net_port_view_);
  } else {
    net_port_view_ = nullptr;
  }
  if (from._internal_has_net_pipe_view()) {
    net_pipe_view_ = new ::FLINT_RPC_MESSAGE::PipeView(*from.net_pipe_view_);
  } else {
    net_pipe_view_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.PartialView)
}

inline void PartialView::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&net_port_view_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&net_pipe_view_) -
    reinterpret_cast<char*>(&net_port_view_)) + sizeof(net_pipe_view_));
}

PartialView::~PartialView() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.PartialView)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PartialView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete net_port_view_;
  if (this != internal_default_instance()) delete net_pipe_view_;
}

void PartialView::ArenaDtor(void* object) {
  PartialView* _this = reinterpret_cast< PartialView* >(object);
  (void)_this;
  _this->io_port_views_. ~MapField();
  _this->io_pipe_views_. ~MapField();
  _this->ssd_views_. ~MapField();
}
inline void PartialView::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &PartialView::ArenaDtor);
  }
}
void PartialView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PartialView::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.PartialView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  io_port_views_.Clear();
  io_pipe_views_.Clear();
  ssd_views_.Clear();
  if (GetArenaForAllocation() == nullptr && net_port_view_ != nullptr) {
    delete net_port_view_;
  }
  net_port_view_ = nullptr;
  if (GetArenaForAllocation() == nullptr && net_pipe_view_ != nullptr) {
    delete net_pipe_view_;
  }
  net_pipe_view_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartialView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .FLINT_RPC_MESSAGE.PortView net_port_view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_net_port_view(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FLINT_RPC_MESSAGE.PipeView net_pipe_view = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_net_pipe_view(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .FLINT_RPC_MESSAGE.PortView> io_port_views = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&io_port_views_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .FLINT_RPC_MESSAGE.PipeView> io_pipe_views = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&io_pipe_views_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .FLINT_RPC_MESSAGE.SsdView> ssd_views = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ssd_views_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartialView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.PartialView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .FLINT_RPC_MESSAGE.PortView net_port_view = 1;
  if (this->_internal_has_net_port_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::net_port_view(this), target, stream);
  }

  // .FLINT_RPC_MESSAGE.PipeView net_pipe_view = 2;
  if (this->_internal_has_net_pipe_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::net_pipe_view(this), target, stream);
  }

  // map<int32, .FLINT_RPC_MESSAGE.PortView> io_port_views = 3;
  if (!this->_internal_io_port_views().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PortView >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_io_port_views().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_io_port_views().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PortView >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PortView >::const_iterator
          it = this->_internal_io_port_views().begin();
          it != this->_internal_io_port_views().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PartialView_IoPortViewsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PortView >::const_iterator
          it = this->_internal_io_port_views().begin();
          it != this->_internal_io_port_views().end(); ++it) {
        target = PartialView_IoPortViewsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .FLINT_RPC_MESSAGE.PipeView> io_pipe_views = 4;
  if (!this->_internal_io_pipe_views().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PipeView >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_io_pipe_views().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_io_pipe_views().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PipeView >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PipeView >::const_iterator
          it = this->_internal_io_pipe_views().begin();
          it != this->_internal_io_pipe_views().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PartialView_IoPipeViewsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PipeView >::const_iterator
          it = this->_internal_io_pipe_views().begin();
          it != this->_internal_io_pipe_views().end(); ++it) {
        target = PartialView_IoPipeViewsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, .FLINT_RPC_MESSAGE.SsdView> ssd_views = 5;
  if (!this->_internal_ssd_views().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::SsdView >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ssd_views().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ssd_views().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::SsdView >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::SsdView >::const_iterator
          it = this->_internal_ssd_views().begin();
          it != this->_internal_ssd_views().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PartialView_SsdViewsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::SsdView >::const_iterator
          it = this->_internal_ssd_views().begin();
          it != this->_internal_ssd_views().end(); ++it) {
        target = PartialView_SsdViewsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.PartialView)
  return target;
}

size_t PartialView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.PartialView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .FLINT_RPC_MESSAGE.PortView> io_port_views = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_io_port_views_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PortView >::const_iterator
      it = this->_internal_io_port_views().begin();
      it != this->_internal_io_port_views().end(); ++it) {
    total_size += PartialView_IoPortViewsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .FLINT_RPC_MESSAGE.PipeView> io_pipe_views = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_io_pipe_views_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::PipeView >::const_iterator
      it = this->_internal_io_pipe_views().begin();
      it != this->_internal_io_pipe_views().end(); ++it) {
    total_size += PartialView_IoPipeViewsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .FLINT_RPC_MESSAGE.SsdView> ssd_views = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ssd_views_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::FLINT_RPC_MESSAGE::SsdView >::const_iterator
      it = this->_internal_ssd_views().begin();
      it != this->_internal_ssd_views().end(); ++it) {
    total_size += PartialView_SsdViewsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .FLINT_RPC_MESSAGE.PortView net_port_view = 1;
  if (this->_internal_has_net_port_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_port_view_);
  }

  // .FLINT_RPC_MESSAGE.PipeView net_pipe_view = 2;
  if (this->_internal_has_net_pipe_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *net_pipe_view_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartialView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PartialView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartialView::GetClassData() const { return &_class_data_; }

void PartialView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PartialView *>(to)->MergeFrom(
      static_cast<const PartialView &>(from));
}


void PartialView::MergeFrom(const PartialView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.PartialView)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  io_port_views_.MergeFrom(from.io_port_views_);
  io_pipe_views_.MergeFrom(from.io_pipe_views_);
  ssd_views_.MergeFrom(from.ssd_views_);
  if (from._internal_has_net_port_view()) {
    _internal_mutable_net_port_view()->::FLINT_RPC_MESSAGE::PortView::MergeFrom(from._internal_net_port_view());
  }
  if (from._internal_has_net_pipe_view()) {
    _internal_mutable_net_pipe_view()->::FLINT_RPC_MESSAGE::PipeView::MergeFrom(from._internal_net_pipe_view());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartialView::CopyFrom(const PartialView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.PartialView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialView::IsInitialized() const {
  return true;
}

void PartialView::InternalSwap(PartialView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  io_port_views_.InternalSwap(&other->io_port_views_);
  io_pipe_views_.InternalSwap(&other->io_pipe_views_);
  ssd_views_.InternalSwap(&other->ssd_views_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartialView, net_pipe_view_)
      + sizeof(PartialView::net_pipe_view_)
      - PROTOBUF_FIELD_OFFSET(PartialView, net_port_view_)>(
          reinterpret_cast<char*>(&net_port_view_),
          reinterpret_cast<char*>(&other->net_port_view_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartialView::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[29]);
}

// ===================================================================

class PullViewRequest::_Internal {
 public:
};

PullViewRequest::PullViewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.PullViewRequest)
}
PullViewRequest::PullViewRequest(const PullViewRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ebof_port_ = from.ebof_port_;
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.PullViewRequest)
}

inline void PullViewRequest::SharedCtor() {
ebof_port_ = 0;
}

PullViewRequest::~PullViewRequest() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.PullViewRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PullViewRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PullViewRequest::ArenaDtor(void* object) {
  PullViewRequest* _this = reinterpret_cast< PullViewRequest* >(object);
  (void)_this;
}
void PullViewRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PullViewRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PullViewRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.PullViewRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ebof_port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PullViewRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ebof_port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ebof_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PullViewRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.PullViewRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ebof_port = 1;
  if (this->_internal_ebof_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ebof_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.PullViewRequest)
  return target;
}

size_t PullViewRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.PullViewRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ebof_port = 1;
  if (this->_internal_ebof_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ebof_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PullViewRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PullViewRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PullViewRequest::GetClassData() const { return &_class_data_; }

void PullViewRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PullViewRequest *>(to)->MergeFrom(
      static_cast<const PullViewRequest &>(from));
}


void PullViewRequest::MergeFrom(const PullViewRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.PullViewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ebof_port() != 0) {
    _internal_set_ebof_port(from._internal_ebof_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PullViewRequest::CopyFrom(const PullViewRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.PullViewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullViewRequest::IsInitialized() const {
  return true;
}

void PullViewRequest::InternalSwap(PullViewRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ebof_port_, other->ebof_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PullViewRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[30]);
}

// ===================================================================

class PullViewResponse::_Internal {
 public:
  static const ::FLINT_RPC_MESSAGE::PartialView& partial_view(const PullViewResponse* msg);
};

const ::FLINT_RPC_MESSAGE::PartialView&
PullViewResponse::_Internal::partial_view(const PullViewResponse* msg) {
  return *msg->partial_view_;
}
PullViewResponse::PullViewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.PullViewResponse)
}
PullViewResponse::PullViewResponse(const PullViewResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_partial_view()) {
    partial_view_ = new ::FLINT_RPC_MESSAGE::PartialView(*from.partial_view_);
  } else {
    partial_view_ = nullptr;
  }
  err_code_ = from.err_code_;
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.PullViewResponse)
}

inline void PullViewResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&partial_view_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&partial_view_)) + sizeof(err_code_));
}

PullViewResponse::~PullViewResponse() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.PullViewResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PullViewResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete partial_view_;
}

void PullViewResponse::ArenaDtor(void* object) {
  PullViewResponse* _this = reinterpret_cast< PullViewResponse* >(object);
  (void)_this;
}
void PullViewResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PullViewResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PullViewResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.PullViewResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && partial_view_ != nullptr) {
    delete partial_view_;
  }
  partial_view_ = nullptr;
  err_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PullViewResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FLINT_RPC_MESSAGE.PartialView partial_view = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_partial_view(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PullViewResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.PullViewResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_code(), target);
  }

  // .FLINT_RPC_MESSAGE.PartialView partial_view = 2;
  if (this->_internal_has_partial_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::partial_view(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.PullViewResponse)
  return target;
}

size_t PullViewResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.PullViewResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FLINT_RPC_MESSAGE.PartialView partial_view = 2;
  if (this->_internal_has_partial_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *partial_view_);
  }

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PullViewResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PullViewResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PullViewResponse::GetClassData() const { return &_class_data_; }

void PullViewResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PullViewResponse *>(to)->MergeFrom(
      static_cast<const PullViewResponse &>(from));
}


void PullViewResponse::MergeFrom(const PullViewResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.PullViewResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_partial_view()) {
    _internal_mutable_partial_view()->::FLINT_RPC_MESSAGE::PartialView::MergeFrom(from._internal_partial_view());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PullViewResponse::CopyFrom(const PullViewResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.PullViewResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullViewResponse::IsInitialized() const {
  return true;
}

void PullViewResponse::InternalSwap(PullViewResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PullViewResponse, err_code_)
      + sizeof(PullViewResponse::err_code_)
      - PROTOBUF_FIELD_OFFSET(PullViewResponse, partial_view_)>(
          reinterpret_cast<char*>(&partial_view_),
          reinterpret_cast<char*>(&other->partial_view_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PullViewResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[31]);
}

// ===================================================================

class PushViewRequest::_Internal {
 public:
  static const ::FLINT_RPC_MESSAGE::PartialView& partial_view(const PushViewRequest* msg);
};

const ::FLINT_RPC_MESSAGE::PartialView&
PushViewRequest::_Internal::partial_view(const PushViewRequest* msg) {
  return *msg->partial_view_;
}
PushViewRequest::PushViewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.PushViewRequest)
}
PushViewRequest::PushViewRequest(const PushViewRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_partial_view()) {
    partial_view_ = new ::FLINT_RPC_MESSAGE::PartialView(*from.partial_view_);
  } else {
    partial_view_ = nullptr;
  }
  ::memcpy(&event_op_, &from.event_op_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_or_ssd_) -
    reinterpret_cast<char*>(&event_op_)) + sizeof(port_or_ssd_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.PushViewRequest)
}

inline void PushViewRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&partial_view_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_or_ssd_) -
    reinterpret_cast<char*>(&partial_view_)) + sizeof(port_or_ssd_));
}

PushViewRequest::~PushViewRequest() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.PushViewRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PushViewRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete partial_view_;
}

void PushViewRequest::ArenaDtor(void* object) {
  PushViewRequest* _this = reinterpret_cast< PushViewRequest* >(object);
  (void)_this;
}
void PushViewRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushViewRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PushViewRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.PushViewRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && partial_view_ != nullptr) {
    delete partial_view_;
  }
  partial_view_ = nullptr;
  ::memset(&event_op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_or_ssd_) -
      reinterpret_cast<char*>(&event_op_)) + sizeof(port_or_ssd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushViewRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 event_op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          event_op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port_or_ssd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          port_or_ssd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .FLINT_RPC_MESSAGE.PartialView partial_view = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_partial_view(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PushViewRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.PushViewRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 event_op = 1;
  if (this->_internal_event_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_op(), target);
  }

  // int32 port_or_ssd = 2;
  if (this->_internal_port_or_ssd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port_or_ssd(), target);
  }

  // .FLINT_RPC_MESSAGE.PartialView partial_view = 3;
  if (this->_internal_has_partial_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::partial_view(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.PushViewRequest)
  return target;
}

size_t PushViewRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.PushViewRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FLINT_RPC_MESSAGE.PartialView partial_view = 3;
  if (this->_internal_has_partial_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *partial_view_);
  }

  // int32 event_op = 1;
  if (this->_internal_event_op() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_event_op());
  }

  // int32 port_or_ssd = 2;
  if (this->_internal_port_or_ssd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port_or_ssd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushViewRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PushViewRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushViewRequest::GetClassData() const { return &_class_data_; }

void PushViewRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PushViewRequest *>(to)->MergeFrom(
      static_cast<const PushViewRequest &>(from));
}


void PushViewRequest::MergeFrom(const PushViewRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.PushViewRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_partial_view()) {
    _internal_mutable_partial_view()->::FLINT_RPC_MESSAGE::PartialView::MergeFrom(from._internal_partial_view());
  }
  if (from._internal_event_op() != 0) {
    _internal_set_event_op(from._internal_event_op());
  }
  if (from._internal_port_or_ssd() != 0) {
    _internal_set_port_or_ssd(from._internal_port_or_ssd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushViewRequest::CopyFrom(const PushViewRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.PushViewRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushViewRequest::IsInitialized() const {
  return true;
}

void PushViewRequest::InternalSwap(PushViewRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PushViewRequest, port_or_ssd_)
      + sizeof(PushViewRequest::port_or_ssd_)
      - PROTOBUF_FIELD_OFFSET(PushViewRequest, partial_view_)>(
          reinterpret_cast<char*>(&partial_view_),
          reinterpret_cast<char*>(&other->partial_view_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PushViewRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[32]);
}

// ===================================================================

class PushViewResponse::_Internal {
 public:
};

PushViewResponse::PushViewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.PushViewResponse)
}
PushViewResponse::PushViewResponse(const PushViewResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_code_ = from.err_code_;
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.PushViewResponse)
}

inline void PushViewResponse::SharedCtor() {
err_code_ = 0;
}

PushViewResponse::~PushViewResponse() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.PushViewResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PushViewResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PushViewResponse::ArenaDtor(void* object) {
  PushViewResponse* _this = reinterpret_cast< PushViewResponse* >(object);
  (void)_this;
}
void PushViewResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushViewResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PushViewResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.PushViewResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushViewResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PushViewResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.PushViewResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.PushViewResponse)
  return target;
}

size_t PushViewResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.PushViewResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushViewResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PushViewResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushViewResponse::GetClassData() const { return &_class_data_; }

void PushViewResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PushViewResponse *>(to)->MergeFrom(
      static_cast<const PushViewResponse &>(from));
}


void PushViewResponse::MergeFrom(const PushViewResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.PushViewResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushViewResponse::CopyFrom(const PushViewResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.PushViewResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushViewResponse::IsInitialized() const {
  return true;
}

void PushViewResponse::InternalSwap(PushViewResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(err_code_, other->err_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushViewResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[33]);
}

// ===================================================================

class IOCompletion::_Internal {
 public:
  using HasBits = decltype(std::declval<IOCompletion>()._has_bits_);
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IOCompletion::IOCompletion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.IOCompletion)
}
IOCompletion::IOCompletion(const IOCompletion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ssd_id_, &from.ssd_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_id_) -
    reinterpret_cast<char*>(&ssd_id_)) + sizeof(client_id_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.IOCompletion)
}

inline void IOCompletion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ssd_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_id_) -
    reinterpret_cast<char*>(&ssd_id_)) + sizeof(client_id_));
}

IOCompletion::~IOCompletion() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.IOCompletion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IOCompletion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IOCompletion::ArenaDtor(void* object) {
  IOCompletion* _this = reinterpret_cast< IOCompletion* >(object);
  (void)_this;
}
void IOCompletion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IOCompletion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IOCompletion::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.IOCompletion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ssd_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_microsec_) -
      reinterpret_cast<char*>(&ssd_id_)) + sizeof(lat_microsec_));
  client_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IOCompletion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ssd_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ssd_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 io_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          io_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lat_microsec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          lat_microsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 client_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IOCompletion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.IOCompletion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ssd_id = 1;
  if (this->_internal_ssd_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ssd_id(), target);
  }

  // uint32 io_type = 2;
  if (this->_internal_io_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_io_type(), target);
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  // uint32 lat_microsec = 4;
  if (this->_internal_lat_microsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_lat_microsec(), target);
  }

  // optional int32 client_id = 5;
  if (_internal_has_client_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.IOCompletion)
  return target;
}

size_t IOCompletion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.IOCompletion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ssd_id = 1;
  if (this->_internal_ssd_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ssd_id());
  }

  // uint32 io_type = 2;
  if (this->_internal_io_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_io_type());
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // uint32 lat_microsec = 4;
  if (this->_internal_lat_microsec() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_lat_microsec());
  }

  // optional int32 client_id = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IOCompletion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IOCompletion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IOCompletion::GetClassData() const { return &_class_data_; }

void IOCompletion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IOCompletion *>(to)->MergeFrom(
      static_cast<const IOCompletion &>(from));
}


void IOCompletion::MergeFrom(const IOCompletion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.IOCompletion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ssd_id() != 0) {
    _internal_set_ssd_id(from._internal_ssd_id());
  }
  if (from._internal_io_type() != 0) {
    _internal_set_io_type(from._internal_io_type());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_lat_microsec() != 0) {
    _internal_set_lat_microsec(from._internal_lat_microsec());
  }
  if (from._internal_has_client_id()) {
    _internal_set_client_id(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IOCompletion::CopyFrom(const IOCompletion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.IOCompletion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOCompletion::IsInitialized() const {
  return true;
}

void IOCompletion::InternalSwap(IOCompletion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IOCompletion, client_id_)
      + sizeof(IOCompletion::client_id_)
      - PROTOBUF_FIELD_OFFSET(IOCompletion, ssd_id_)>(
          reinterpret_cast<char*>(&ssd_id_),
          reinterpret_cast<char*>(&other->ssd_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IOCompletion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[34]);
}

// ===================================================================

class ReportCmplRequest::_Internal {
 public:
};

ReportCmplRequest::ReportCmplRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  completions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.ReportCmplRequest)
}
ReportCmplRequest::ReportCmplRequest(const ReportCmplRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      completions_(from.completions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_sync_window_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(in_sync_window_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.ReportCmplRequest)
}

inline void ReportCmplRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&in_sync_window_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(in_sync_window_));
}

ReportCmplRequest::~ReportCmplRequest() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.ReportCmplRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReportCmplRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReportCmplRequest::ArenaDtor(void* object) {
  ReportCmplRequest* _this = reinterpret_cast< ReportCmplRequest* >(object);
  (void)_this;
}
void ReportCmplRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportCmplRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReportCmplRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.ReportCmplRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  completions_.Clear();
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_sync_window_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(in_sync_window_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportCmplRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ebof_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ebof_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .FLINT_RPC_MESSAGE.IOCompletion completions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_completions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool in_sync_window = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          in_sync_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportCmplRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.ReportCmplRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_client_id(), target);
  }

  // int32 ebof_port = 2;
  if (this->_internal_ebof_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ebof_port(), target);
  }

  // repeated .FLINT_RPC_MESSAGE.IOCompletion completions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_completions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_completions(i), target, stream);
  }

  // bool in_sync_window = 4;
  if (this->_internal_in_sync_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_in_sync_window(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.ReportCmplRequest)
  return target;
}

size_t ReportCmplRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.ReportCmplRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FLINT_RPC_MESSAGE.IOCompletion completions = 3;
  total_size += 1UL * this->_internal_completions_size();
  for (const auto& msg : this->completions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_client_id());
  }

  // int32 ebof_port = 2;
  if (this->_internal_ebof_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ebof_port());
  }

  // bool in_sync_window = 4;
  if (this->_internal_in_sync_window() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportCmplRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReportCmplRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportCmplRequest::GetClassData() const { return &_class_data_; }

void ReportCmplRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReportCmplRequest *>(to)->MergeFrom(
      static_cast<const ReportCmplRequest &>(from));
}


void ReportCmplRequest::MergeFrom(const ReportCmplRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.ReportCmplRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  completions_.MergeFrom(from.completions_);
  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_ebof_port() != 0) {
    _internal_set_ebof_port(from._internal_ebof_port());
  }
  if (from._internal_in_sync_window() != 0) {
    _internal_set_in_sync_window(from._internal_in_sync_window());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportCmplRequest::CopyFrom(const ReportCmplRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.ReportCmplRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportCmplRequest::IsInitialized() const {
  return true;
}

void ReportCmplRequest::InternalSwap(ReportCmplRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  completions_.InternalSwap(&other->completions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportCmplRequest, in_sync_window_)
      + sizeof(ReportCmplRequest::in_sync_window_)
      - PROTOBUF_FIELD_OFFSET(ReportCmplRequest, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportCmplRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[35]);
}

// ===================================================================

ViewRecency_IoPortViewRecencyEntry_DoNotUse::ViewRecency_IoPortViewRecencyEntry_DoNotUse() {}
ViewRecency_IoPortViewRecencyEntry_DoNotUse::ViewRecency_IoPortViewRecencyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ViewRecency_IoPortViewRecencyEntry_DoNotUse::MergeFrom(const ViewRecency_IoPortViewRecencyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ViewRecency_IoPortViewRecencyEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[36]);
}

// ===================================================================

ViewRecency_IoPipeViewRecencyEntry_DoNotUse::ViewRecency_IoPipeViewRecencyEntry_DoNotUse() {}
ViewRecency_IoPipeViewRecencyEntry_DoNotUse::ViewRecency_IoPipeViewRecencyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ViewRecency_IoPipeViewRecencyEntry_DoNotUse::MergeFrom(const ViewRecency_IoPipeViewRecencyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ViewRecency_IoPipeViewRecencyEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[37]);
}

// ===================================================================

ViewRecency_SsdViewRecencyEntry_DoNotUse::ViewRecency_SsdViewRecencyEntry_DoNotUse() {}
ViewRecency_SsdViewRecencyEntry_DoNotUse::ViewRecency_SsdViewRecencyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ViewRecency_SsdViewRecencyEntry_DoNotUse::MergeFrom(const ViewRecency_SsdViewRecencyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ViewRecency_SsdViewRecencyEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[38]);
}

// ===================================================================

class ViewRecency::_Internal {
 public:
};

ViewRecency::ViewRecency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  io_port_view_recency_(arena),
  io_pipe_view_recency_(arena),
  ssd_view_recency_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.ViewRecency)
}
ViewRecency::ViewRecency(const ViewRecency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  io_port_view_recency_.MergeFrom(from.io_port_view_recency_);
  io_pipe_view_recency_.MergeFrom(from.io_pipe_view_recency_);
  ssd_view_recency_.MergeFrom(from.ssd_view_recency_);
  ::memcpy(&net_port_view_recency_, &from.net_port_view_recency_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_pipe_view_recency_) -
    reinterpret_cast<char*>(&net_port_view_recency_)) + sizeof(net_pipe_view_recency_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.ViewRecency)
}

inline void ViewRecency::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&net_port_view_recency_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&net_pipe_view_recency_) -
    reinterpret_cast<char*>(&net_port_view_recency_)) + sizeof(net_pipe_view_recency_));
}

ViewRecency::~ViewRecency() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.ViewRecency)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ViewRecency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ViewRecency::ArenaDtor(void* object) {
  ViewRecency* _this = reinterpret_cast< ViewRecency* >(object);
  (void)_this;
  _this->io_port_view_recency_. ~MapField();
  _this->io_pipe_view_recency_. ~MapField();
  _this->ssd_view_recency_. ~MapField();
}
inline void ViewRecency::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ViewRecency::ArenaDtor);
  }
}
void ViewRecency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewRecency::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.ViewRecency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  io_port_view_recency_.Clear();
  io_pipe_view_recency_.Clear();
  ssd_view_recency_.Clear();
  ::memset(&net_port_view_recency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&net_pipe_view_recency_) -
      reinterpret_cast<char*>(&net_port_view_recency_)) + sizeof(net_pipe_view_recency_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewRecency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 net_port_view_recency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          net_port_view_recency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 net_pipe_view_recency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          net_pipe_view_recency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, uint64> io_port_view_recency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&io_port_view_recency_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, uint64> io_pipe_view_recency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&io_pipe_view_recency_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, uint64> ssd_view_recency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ssd_view_recency_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ViewRecency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.ViewRecency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 net_port_view_recency = 1;
  if (this->_internal_net_port_view_recency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_net_port_view_recency(), target);
  }

  // uint64 net_pipe_view_recency = 2;
  if (this->_internal_net_pipe_view_recency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_net_pipe_view_recency(), target);
  }

  // map<int32, uint64> io_port_view_recency = 3;
  if (!this->_internal_io_port_view_recency().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_io_port_view_recency().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_io_port_view_recency().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::const_iterator
          it = this->_internal_io_port_view_recency().begin();
          it != this->_internal_io_port_view_recency().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ViewRecency_IoPortViewRecencyEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::const_iterator
          it = this->_internal_io_port_view_recency().begin();
          it != this->_internal_io_port_view_recency().end(); ++it) {
        target = ViewRecency_IoPortViewRecencyEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, uint64> io_pipe_view_recency = 4;
  if (!this->_internal_io_pipe_view_recency().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_io_pipe_view_recency().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_io_pipe_view_recency().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::const_iterator
          it = this->_internal_io_pipe_view_recency().begin();
          it != this->_internal_io_pipe_view_recency().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ViewRecency_IoPipeViewRecencyEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::const_iterator
          it = this->_internal_io_pipe_view_recency().begin();
          it != this->_internal_io_pipe_view_recency().end(); ++it) {
        target = ViewRecency_IoPipeViewRecencyEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  // map<int32, uint64> ssd_view_recency = 5;
  if (!this->_internal_ssd_view_recency().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ssd_view_recency().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ssd_view_recency().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::const_iterator
          it = this->_internal_ssd_view_recency().begin();
          it != this->_internal_ssd_view_recency().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ViewRecency_SsdViewRecencyEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::const_iterator
          it = this->_internal_ssd_view_recency().begin();
          it != this->_internal_ssd_view_recency().end(); ++it) {
        target = ViewRecency_SsdViewRecencyEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.ViewRecency)
  return target;
}

size_t ViewRecency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.ViewRecency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, uint64> io_port_view_recency = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_io_port_view_recency_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::const_iterator
      it = this->_internal_io_port_view_recency().begin();
      it != this->_internal_io_port_view_recency().end(); ++it) {
    total_size += ViewRecency_IoPortViewRecencyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, uint64> io_pipe_view_recency = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_io_pipe_view_recency_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::const_iterator
      it = this->_internal_io_pipe_view_recency().begin();
      it != this->_internal_io_pipe_view_recency().end(); ++it) {
    total_size += ViewRecency_IoPipeViewRecencyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, uint64> ssd_view_recency = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ssd_view_recency_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint64_t >::const_iterator
      it = this->_internal_ssd_view_recency().begin();
      it != this->_internal_ssd_view_recency().end(); ++it) {
    total_size += ViewRecency_SsdViewRecencyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 net_port_view_recency = 1;
  if (this->_internal_net_port_view_recency() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_net_port_view_recency());
  }

  // uint64 net_pipe_view_recency = 2;
  if (this->_internal_net_pipe_view_recency() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_net_pipe_view_recency());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewRecency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ViewRecency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewRecency::GetClassData() const { return &_class_data_; }

void ViewRecency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ViewRecency *>(to)->MergeFrom(
      static_cast<const ViewRecency &>(from));
}


void ViewRecency::MergeFrom(const ViewRecency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.ViewRecency)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  io_port_view_recency_.MergeFrom(from.io_port_view_recency_);
  io_pipe_view_recency_.MergeFrom(from.io_pipe_view_recency_);
  ssd_view_recency_.MergeFrom(from.ssd_view_recency_);
  if (from._internal_net_port_view_recency() != 0) {
    _internal_set_net_port_view_recency(from._internal_net_port_view_recency());
  }
  if (from._internal_net_pipe_view_recency() != 0) {
    _internal_set_net_pipe_view_recency(from._internal_net_pipe_view_recency());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewRecency::CopyFrom(const ViewRecency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.ViewRecency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewRecency::IsInitialized() const {
  return true;
}

void ViewRecency::InternalSwap(ViewRecency* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  io_port_view_recency_.InternalSwap(&other->io_port_view_recency_);
  io_pipe_view_recency_.InternalSwap(&other->io_pipe_view_recency_);
  ssd_view_recency_.InternalSwap(&other->ssd_view_recency_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewRecency, net_pipe_view_recency_)
      + sizeof(ViewRecency::net_pipe_view_recency_)
      - PROTOBUF_FIELD_OFFSET(ViewRecency, net_port_view_recency_)>(
          reinterpret_cast<char*>(&net_port_view_recency_),
          reinterpret_cast<char*>(&other->net_port_view_recency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewRecency::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[39]);
}

// ===================================================================

class ReportCmplResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportCmplResponse>()._has_bits_);
  static const ::FLINT_RPC_MESSAGE::ViewRecency& view_recency(const ReportCmplResponse* msg);
  static void set_has_view_recency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::FLINT_RPC_MESSAGE::ViewRecency&
ReportCmplResponse::_Internal::view_recency(const ReportCmplResponse* msg) {
  return *msg->view_recency_;
}
ReportCmplResponse::ReportCmplResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.ReportCmplResponse)
}
ReportCmplResponse::ReportCmplResponse(const ReportCmplResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_view_recency()) {
    view_recency_ = new ::FLINT_RPC_MESSAGE::ViewRecency(*from.view_recency_);
  } else {
    view_recency_ = nullptr;
  }
  err_code_ = from.err_code_;
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.ReportCmplResponse)
}

inline void ReportCmplResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&view_recency_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_code_) -
    reinterpret_cast<char*>(&view_recency_)) + sizeof(err_code_));
}

ReportCmplResponse::~ReportCmplResponse() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.ReportCmplResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReportCmplResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete view_recency_;
}

void ReportCmplResponse::ArenaDtor(void* object) {
  ReportCmplResponse* _this = reinterpret_cast< ReportCmplResponse* >(object);
  (void)_this;
}
void ReportCmplResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportCmplResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReportCmplResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.ReportCmplResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(view_recency_ != nullptr);
    view_recency_->Clear();
  }
  err_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportCmplResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .FLINT_RPC_MESSAGE.ViewRecency view_recency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_recency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportCmplResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.ReportCmplResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_code(), target);
  }

  // optional .FLINT_RPC_MESSAGE.ViewRecency view_recency = 2;
  if (_internal_has_view_recency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::view_recency(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.ReportCmplResponse)
  return target;
}

size_t ReportCmplResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.ReportCmplResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .FLINT_RPC_MESSAGE.ViewRecency view_recency = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *view_recency_);
  }

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportCmplResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReportCmplResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportCmplResponse::GetClassData() const { return &_class_data_; }

void ReportCmplResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReportCmplResponse *>(to)->MergeFrom(
      static_cast<const ReportCmplResponse &>(from));
}


void ReportCmplResponse::MergeFrom(const ReportCmplResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.ReportCmplResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_view_recency()) {
    _internal_mutable_view_recency()->::FLINT_RPC_MESSAGE::ViewRecency::MergeFrom(from._internal_view_recency());
  }
  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportCmplResponse::CopyFrom(const ReportCmplResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.ReportCmplResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportCmplResponse::IsInitialized() const {
  return true;
}

void ReportCmplResponse::InternalSwap(ReportCmplResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportCmplResponse, err_code_)
      + sizeof(ReportCmplResponse::err_code_)
      - PROTOBUF_FIELD_OFFSET(ReportCmplResponse, view_recency_)>(
          reinterpret_cast<char*>(&view_recency_),
          reinterpret_cast<char*>(&other->view_recency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportCmplResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[40]);
}

// ===================================================================

class EventCallback::_Internal {
 public:
};

EventCallback::EventCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.EventCallback)
}
EventCallback::EventCallback(const EventCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmp_op_) -
    reinterpret_cast<char*>(&op_)) + sizeof(cmp_op_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.EventCallback)
}

inline void EventCallback::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&op_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cmp_op_) -
    reinterpret_cast<char*>(&op_)) + sizeof(cmp_op_));
}

EventCallback::~EventCallback() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.EventCallback)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EventCallback::ArenaDtor(void* object) {
  EventCallback* _this = reinterpret_cast< EventCallback* >(object);
  (void)_this;
}
void EventCallback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventCallback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.EventCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmp_op_) -
      reinterpret_cast<char*>(&op_)) + sizeof(cmp_op_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventCallback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 port_or_ssd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          port_or_ssd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 io_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          io_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cmp_op = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          cmp_op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.EventCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 op = 1;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_op(), target);
  }

  // float threshold = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_threshold = this->_internal_threshold();
  uint32_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_threshold(), target);
  }

  // int32 port_or_ssd = 3;
  if (this->_internal_port_or_ssd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port_or_ssd(), target);
  }

  // int32 io_type = 4;
  if (this->_internal_io_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_io_type(), target);
  }

  // int32 cmp_op = 5;
  if (this->_internal_cmp_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_cmp_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.EventCallback)
  return target;
}

size_t EventCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.EventCallback)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 op = 1;
  if (this->_internal_op() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_op());
  }

  // float threshold = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_threshold = this->_internal_threshold();
  uint32_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    total_size += 1 + 4;
  }

  // int32 port_or_ssd = 3;
  if (this->_internal_port_or_ssd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port_or_ssd());
  }

  // int32 io_type = 4;
  if (this->_internal_io_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_io_type());
  }

  // int32 cmp_op = 5;
  if (this->_internal_cmp_op() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cmp_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EventCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventCallback::GetClassData() const { return &_class_data_; }

void EventCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EventCallback *>(to)->MergeFrom(
      static_cast<const EventCallback &>(from));
}


void EventCallback::MergeFrom(const EventCallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.EventCallback)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_op() != 0) {
    _internal_set_op(from._internal_op());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_threshold = from._internal_threshold();
  uint32_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
  if (from._internal_port_or_ssd() != 0) {
    _internal_set_port_or_ssd(from._internal_port_or_ssd());
  }
  if (from._internal_io_type() != 0) {
    _internal_set_io_type(from._internal_io_type());
  }
  if (from._internal_cmp_op() != 0) {
    _internal_set_cmp_op(from._internal_cmp_op());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventCallback::CopyFrom(const EventCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.EventCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventCallback::IsInitialized() const {
  return true;
}

void EventCallback::InternalSwap(EventCallback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventCallback, cmp_op_)
      + sizeof(EventCallback::cmp_op_)
      - PROTOBUF_FIELD_OFFSET(EventCallback, op_)>(
          reinterpret_cast<char*>(&op_),
          reinterpret_cast<char*>(&other->op_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventCallback::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[41]);
}

// ===================================================================

class RegisterEventCallbackRequest::_Internal {
 public:
};

RegisterEventCallbackRequest::RegisterEventCallbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  callbacks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest)
}
RegisterEventCallbackRequest::RegisterEventCallbackRequest(const RegisterEventCallbackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      callbacks_(from.callbacks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_ = from.client_id_;
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest)
}

inline void RegisterEventCallbackRequest::SharedCtor() {
client_id_ = 0;
}

RegisterEventCallbackRequest::~RegisterEventCallbackRequest() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterEventCallbackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegisterEventCallbackRequest::ArenaDtor(void* object) {
  RegisterEventCallbackRequest* _this = reinterpret_cast< RegisterEventCallbackRequest* >(object);
  (void)_this;
}
void RegisterEventCallbackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterEventCallbackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterEventCallbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callbacks_.Clear();
  client_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterEventCallbackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .FLINT_RPC_MESSAGE.EventCallback callbacks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_callbacks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterEventCallbackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_client_id(), target);
  }

  // repeated .FLINT_RPC_MESSAGE.EventCallback callbacks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_callbacks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_callbacks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest)
  return target;
}

size_t RegisterEventCallbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .FLINT_RPC_MESSAGE.EventCallback callbacks = 2;
  total_size += 1UL * this->_internal_callbacks_size();
  for (const auto& msg : this->callbacks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterEventCallbackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterEventCallbackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterEventCallbackRequest::GetClassData() const { return &_class_data_; }

void RegisterEventCallbackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterEventCallbackRequest *>(to)->MergeFrom(
      static_cast<const RegisterEventCallbackRequest &>(from));
}


void RegisterEventCallbackRequest::MergeFrom(const RegisterEventCallbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  callbacks_.MergeFrom(from.callbacks_);
  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterEventCallbackRequest::CopyFrom(const RegisterEventCallbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.RegisterEventCallbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterEventCallbackRequest::IsInitialized() const {
  return true;
}

void RegisterEventCallbackRequest::InternalSwap(RegisterEventCallbackRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  callbacks_.InternalSwap(&other->callbacks_);
  swap(client_id_, other->client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterEventCallbackRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[42]);
}

// ===================================================================

class RegisterEventCallbackResponse::_Internal {
 public:
};

RegisterEventCallbackResponse::RegisterEventCallbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.RegisterEventCallbackResponse)
}
RegisterEventCallbackResponse::RegisterEventCallbackResponse(const RegisterEventCallbackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_code_ = from.err_code_;
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.RegisterEventCallbackResponse)
}

inline void RegisterEventCallbackResponse::SharedCtor() {
err_code_ = 0;
}

RegisterEventCallbackResponse::~RegisterEventCallbackResponse() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.RegisterEventCallbackResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisterEventCallbackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegisterEventCallbackResponse::ArenaDtor(void* object) {
  RegisterEventCallbackResponse* _this = reinterpret_cast< RegisterEventCallbackResponse* >(object);
  (void)_this;
}
void RegisterEventCallbackResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterEventCallbackResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterEventCallbackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.RegisterEventCallbackResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterEventCallbackResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterEventCallbackResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.RegisterEventCallbackResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.RegisterEventCallbackResponse)
  return target;
}

size_t RegisterEventCallbackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.RegisterEventCallbackResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterEventCallbackResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisterEventCallbackResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterEventCallbackResponse::GetClassData() const { return &_class_data_; }

void RegisterEventCallbackResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisterEventCallbackResponse *>(to)->MergeFrom(
      static_cast<const RegisterEventCallbackResponse &>(from));
}


void RegisterEventCallbackResponse::MergeFrom(const RegisterEventCallbackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.RegisterEventCallbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterEventCallbackResponse::CopyFrom(const RegisterEventCallbackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.RegisterEventCallbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterEventCallbackResponse::IsInitialized() const {
  return true;
}

void RegisterEventCallbackResponse::InternalSwap(RegisterEventCallbackResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(err_code_, other->err_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterEventCallbackResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[43]);
}

// ===================================================================

class BottleneckReportRequest::_Internal {
 public:
};

BottleneckReportRequest::BottleneckReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  congested_ssds_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.BottleneckReportRequest)
}
BottleneckReportRequest::BottleneckReportRequest(const BottleneckReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      congested_ssds_(from.congested_ssds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.BottleneckReportRequest)
}

inline void BottleneckReportRequest::SharedCtor() {
}

BottleneckReportRequest::~BottleneckReportRequest() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.BottleneckReportRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BottleneckReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BottleneckReportRequest::ArenaDtor(void* object) {
  BottleneckReportRequest* _this = reinterpret_cast< BottleneckReportRequest* >(object);
  (void)_this;
}
void BottleneckReportRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BottleneckReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BottleneckReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.BottleneckReportRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  congested_ssds_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BottleneckReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 congested_ssds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_congested_ssds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_congested_ssds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BottleneckReportRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.BottleneckReportRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 congested_ssds = 1;
  {
    int byte_size = _congested_ssds_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_congested_ssds(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.BottleneckReportRequest)
  return target;
}

size_t BottleneckReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.BottleneckReportRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 congested_ssds = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->congested_ssds_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _congested_ssds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BottleneckReportRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BottleneckReportRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BottleneckReportRequest::GetClassData() const { return &_class_data_; }

void BottleneckReportRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BottleneckReportRequest *>(to)->MergeFrom(
      static_cast<const BottleneckReportRequest &>(from));
}


void BottleneckReportRequest::MergeFrom(const BottleneckReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.BottleneckReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  congested_ssds_.MergeFrom(from.congested_ssds_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BottleneckReportRequest::CopyFrom(const BottleneckReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.BottleneckReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BottleneckReportRequest::IsInitialized() const {
  return true;
}

void BottleneckReportRequest::InternalSwap(BottleneckReportRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  congested_ssds_.InternalSwap(&other->congested_ssds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BottleneckReportRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[44]);
}

// ===================================================================

class BottleneckReportResponse::_Internal {
 public:
};

BottleneckReportResponse::BottleneckReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.BottleneckReportResponse)
}
BottleneckReportResponse::BottleneckReportResponse(const BottleneckReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_code_ = from.err_code_;
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.BottleneckReportResponse)
}

inline void BottleneckReportResponse::SharedCtor() {
err_code_ = 0;
}

BottleneckReportResponse::~BottleneckReportResponse() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.BottleneckReportResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BottleneckReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BottleneckReportResponse::ArenaDtor(void* object) {
  BottleneckReportResponse* _this = reinterpret_cast< BottleneckReportResponse* >(object);
  (void)_this;
}
void BottleneckReportResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BottleneckReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BottleneckReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.BottleneckReportResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BottleneckReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BottleneckReportResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.BottleneckReportResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.BottleneckReportResponse)
  return target;
}

size_t BottleneckReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.BottleneckReportResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BottleneckReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BottleneckReportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BottleneckReportResponse::GetClassData() const { return &_class_data_; }

void BottleneckReportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BottleneckReportResponse *>(to)->MergeFrom(
      static_cast<const BottleneckReportResponse &>(from));
}


void BottleneckReportResponse::MergeFrom(const BottleneckReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.BottleneckReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BottleneckReportResponse::CopyFrom(const BottleneckReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.BottleneckReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BottleneckReportResponse::IsInitialized() const {
  return true;
}

void BottleneckReportResponse::InternalSwap(BottleneckReportResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(err_code_, other->err_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BottleneckReportResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[45]);
}

// ===================================================================

class RequestIOSliceRequest::_Internal {
 public:
};

RequestIOSliceRequest::RequestIOSliceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.RequestIOSliceRequest)
}
RequestIOSliceRequest::RequestIOSliceRequest(const RequestIOSliceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_epoch_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(last_epoch_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.RequestIOSliceRequest)
}

inline void RequestIOSliceRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_epoch_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(last_epoch_));
}

RequestIOSliceRequest::~RequestIOSliceRequest() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.RequestIOSliceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestIOSliceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestIOSliceRequest::ArenaDtor(void* object) {
  RequestIOSliceRequest* _this = reinterpret_cast< RequestIOSliceRequest* >(object);
  (void)_this;
}
void RequestIOSliceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestIOSliceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestIOSliceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.RequestIOSliceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_epoch_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(last_epoch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestIOSliceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ssd_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ssd_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 last_epoch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          last_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestIOSliceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.RequestIOSliceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_client_id(), target);
  }

  // int32 ssd_id = 2;
  if (this->_internal_ssd_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ssd_id(), target);
  }

  // int32 last_epoch = 3;
  if (this->_internal_last_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_last_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.RequestIOSliceRequest)
  return target;
}

size_t RequestIOSliceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.RequestIOSliceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_client_id());
  }

  // int32 ssd_id = 2;
  if (this->_internal_ssd_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ssd_id());
  }

  // int32 last_epoch = 3;
  if (this->_internal_last_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_last_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestIOSliceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestIOSliceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestIOSliceRequest::GetClassData() const { return &_class_data_; }

void RequestIOSliceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestIOSliceRequest *>(to)->MergeFrom(
      static_cast<const RequestIOSliceRequest &>(from));
}


void RequestIOSliceRequest::MergeFrom(const RequestIOSliceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.RequestIOSliceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_ssd_id() != 0) {
    _internal_set_ssd_id(from._internal_ssd_id());
  }
  if (from._internal_last_epoch() != 0) {
    _internal_set_last_epoch(from._internal_last_epoch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestIOSliceRequest::CopyFrom(const RequestIOSliceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.RequestIOSliceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestIOSliceRequest::IsInitialized() const {
  return true;
}

void RequestIOSliceRequest::InternalSwap(RequestIOSliceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestIOSliceRequest, last_epoch_)
      + sizeof(RequestIOSliceRequest::last_epoch_)
      - PROTOBUF_FIELD_OFFSET(RequestIOSliceRequest, client_id_)>(
          reinterpret_cast<char*>(&client_id_),
          reinterpret_cast<char*>(&other->client_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestIOSliceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[46]);
}

// ===================================================================

class RequestIOSliceResponse::_Internal {
 public:
};

RequestIOSliceResponse::RequestIOSliceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:FLINT_RPC_MESSAGE.RequestIOSliceResponse)
}
RequestIOSliceResponse::RequestIOSliceResponse(const RequestIOSliceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&err_code_, &from.err_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&wait_time_) -
    reinterpret_cast<char*>(&err_code_)) + sizeof(wait_time_));
  // @@protoc_insertion_point(copy_constructor:FLINT_RPC_MESSAGE.RequestIOSliceResponse)
}

inline void RequestIOSliceResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&err_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wait_time_) -
    reinterpret_cast<char*>(&err_code_)) + sizeof(wait_time_));
}

RequestIOSliceResponse::~RequestIOSliceResponse() {
  // @@protoc_insertion_point(destructor:FLINT_RPC_MESSAGE.RequestIOSliceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestIOSliceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestIOSliceResponse::ArenaDtor(void* object) {
  RequestIOSliceResponse* _this = reinterpret_cast< RequestIOSliceResponse* >(object);
  (void)_this;
}
void RequestIOSliceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestIOSliceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestIOSliceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FLINT_RPC_MESSAGE.RequestIOSliceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&err_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_time_) -
      reinterpret_cast<char*>(&err_code_)) + sizeof(wait_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestIOSliceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slice_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          slice_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 epoch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 wait_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestIOSliceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FLINT_RPC_MESSAGE.RequestIOSliceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err_code(), target);
  }

  // int32 slice_size = 2;
  if (this->_internal_slice_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slice_size(), target);
  }

  // int32 epoch = 3;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_epoch(), target);
  }

  // int32 wait_time = 4;
  if (this->_internal_wait_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_wait_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FLINT_RPC_MESSAGE.RequestIOSliceResponse)
  return target;
}

size_t RequestIOSliceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FLINT_RPC_MESSAGE.RequestIOSliceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 err_code = 1;
  if (this->_internal_err_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_code());
  }

  // int32 slice_size = 2;
  if (this->_internal_slice_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slice_size());
  }

  // int32 epoch = 3;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_epoch());
  }

  // int32 wait_time = 4;
  if (this->_internal_wait_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_wait_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestIOSliceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestIOSliceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestIOSliceResponse::GetClassData() const { return &_class_data_; }

void RequestIOSliceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestIOSliceResponse *>(to)->MergeFrom(
      static_cast<const RequestIOSliceResponse &>(from));
}


void RequestIOSliceResponse::MergeFrom(const RequestIOSliceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FLINT_RPC_MESSAGE.RequestIOSliceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_err_code() != 0) {
    _internal_set_err_code(from._internal_err_code());
  }
  if (from._internal_slice_size() != 0) {
    _internal_set_slice_size(from._internal_slice_size());
  }
  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_wait_time() != 0) {
    _internal_set_wait_time(from._internal_wait_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestIOSliceResponse::CopyFrom(const RequestIOSliceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FLINT_RPC_MESSAGE.RequestIOSliceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestIOSliceResponse::IsInitialized() const {
  return true;
}

void RequestIOSliceResponse::InternalSwap(RequestIOSliceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestIOSliceResponse, wait_time_)
      + sizeof(RequestIOSliceResponse::wait_time_)
      - PROTOBUF_FIELD_OFFSET(RequestIOSliceResponse, err_code_)>(
          reinterpret_cast<char*>(&err_code_),
          reinterpret_cast<char*>(&other->err_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestIOSliceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[47]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace FLINT_RPC_MESSAGE
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::FlintMetadata_SsdIdMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::FlintMetadata_SsdIdMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::FlintMetadata_SsdIdMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::FlintMetadata* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::FlintMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::FlintMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::CreateVolumeRequest_SsdPreferenceEntry_DoNotUse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::CreateVolumeRequest_SsdPreferenceEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::CreateVolumeRequest_SsdPreferenceEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::CreateVolumeRequest* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::CreateVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::CreateVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::CreateVolumeResponse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::CreateVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::CreateVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::OpenVolumeRequest* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::OpenVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::OpenVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::ExtentLocator* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::ExtentLocator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::ExtentLocator >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::ExtentLocators* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::ExtentLocators >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::ExtentLocators >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::OpenVolumeResponse_ExtentLocatorMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::OpenVolumeResponse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::OpenVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::OpenVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest_SsdPreferenceEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse_ExtentLocatorMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::DeleteVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::DeleteVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::ListVolumeRequest* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::ListVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::ListVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::VolumeAttrs* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::VolumeAttrs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::VolumeAttrs >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::ListVolumeResponse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::ListVolumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::ListVolumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::RegisterRequest* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::RegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::RegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::RegisterResponse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::RegisterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::RegisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::PortView* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::PortView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::PortView >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::PipeView* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::PipeView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::PipeView >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::SsdView* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::SsdView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::SsdView >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::PartialView_IoPortViewsEntry_DoNotUse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::PartialView_IoPortViewsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::PartialView_IoPortViewsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::PartialView_IoPipeViewsEntry_DoNotUse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::PartialView_IoPipeViewsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::PartialView_IoPipeViewsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::PartialView_SsdViewsEntry_DoNotUse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::PartialView_SsdViewsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::PartialView_SsdViewsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::PartialView* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::PartialView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::PartialView >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::PullViewRequest* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::PullViewRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::PullViewRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::PullViewResponse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::PullViewResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::PullViewResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::PushViewRequest* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::PushViewRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::PushViewRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::PushViewResponse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::PushViewResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::PushViewResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::IOCompletion* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::IOCompletion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::IOCompletion >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::ReportCmplRequest* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::ReportCmplRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::ReportCmplRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::ViewRecency_IoPortViewRecencyEntry_DoNotUse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::ViewRecency_IoPortViewRecencyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::ViewRecency_IoPortViewRecencyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::ViewRecency_IoPipeViewRecencyEntry_DoNotUse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::ViewRecency_IoPipeViewRecencyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::ViewRecency_IoPipeViewRecencyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::ViewRecency_SsdViewRecencyEntry_DoNotUse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::ViewRecency_SsdViewRecencyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::ViewRecency_SsdViewRecencyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::ViewRecency* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::ViewRecency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::ViewRecency >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::ReportCmplResponse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::ReportCmplResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::ReportCmplResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::EventCallback* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::EventCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::EventCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::BottleneckReportRequest* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::BottleneckReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::BottleneckReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::BottleneckReportResponse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::BottleneckReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::BottleneckReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::RequestIOSliceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::RequestIOSliceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* Arena::CreateMaybeMessage< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
