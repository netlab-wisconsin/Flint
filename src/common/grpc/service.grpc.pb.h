// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto
#ifndef GRPC_service_2eproto__INCLUDED
#define GRPC_service_2eproto__INCLUDED

#include "service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace FLINT_RPC_SERVICE {

class VolumeService final {
 public:
  static constexpr char const* service_full_name() {
    return "FLINT_RPC_SERVICE.VolumeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetFlintMetadata(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest& request, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>> AsyncGetFlintMetadata(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>>(AsyncGetFlintMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>> PrepareAsyncGetFlintMetadata(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>>(PrepareAsyncGetFlintMetadataRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest& request, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::CreateVolumeResponse>> AsyncCreateVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::CreateVolumeResponse>>(AsyncCreateVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::CreateVolumeResponse>> PrepareAsyncCreateVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::CreateVolumeResponse>>(PrepareAsyncCreateVolumeRaw(context, request, cq));
    }
    virtual ::grpc::Status OpenVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest& request, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::OpenVolumeResponse>> AsyncOpenVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::OpenVolumeResponse>>(AsyncOpenVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::OpenVolumeResponse>> PrepareAsyncOpenVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::OpenVolumeResponse>>(PrepareAsyncOpenVolumeRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest& request, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>> AsyncDeleteVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>>(AsyncDeleteVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>> PrepareAsyncDeleteVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>>(PrepareAsyncDeleteVolumeRaw(context, request, cq));
    }
    virtual ::grpc::Status ListVolumes(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest& request, ::FLINT_RPC_MESSAGE::ListVolumeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::ListVolumeResponse>> AsyncListVolumes(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::ListVolumeResponse>>(AsyncListVolumesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::ListVolumeResponse>> PrepareAsyncListVolumes(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::ListVolumeResponse>>(PrepareAsyncListVolumesRaw(context, request, cq));
    }
    virtual ::grpc::Status VolumeExtentFault(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest& request, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>> AsyncVolumeExtentFault(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>>(AsyncVolumeExtentFaultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>> PrepareAsyncVolumeExtentFault(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>>(PrepareAsyncVolumeExtentFaultRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetFlintMetadata(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* request, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFlintMetadata(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* request, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* request, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* request, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OpenVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* request, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OpenVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* request, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* request, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* request, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListVolumes(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* request, ::FLINT_RPC_MESSAGE::ListVolumeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListVolumes(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* request, ::FLINT_RPC_MESSAGE::ListVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void VolumeExtentFault(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* request, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VolumeExtentFault(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* request, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>* AsyncGetFlintMetadataRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>* PrepareAsyncGetFlintMetadataRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::CreateVolumeResponse>* AsyncCreateVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::CreateVolumeResponse>* PrepareAsyncCreateVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::OpenVolumeResponse>* AsyncOpenVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::OpenVolumeResponse>* PrepareAsyncOpenVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>* AsyncDeleteVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>* PrepareAsyncDeleteVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::ListVolumeResponse>* AsyncListVolumesRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::ListVolumeResponse>* PrepareAsyncListVolumesRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>* AsyncVolumeExtentFaultRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>* PrepareAsyncVolumeExtentFaultRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetFlintMetadata(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest& request, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>> AsyncGetFlintMetadata(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>>(AsyncGetFlintMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>> PrepareAsyncGetFlintMetadata(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>>(PrepareAsyncGetFlintMetadataRaw(context, request, cq));
    }
    ::grpc::Status CreateVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest& request, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::CreateVolumeResponse>> AsyncCreateVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::CreateVolumeResponse>>(AsyncCreateVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::CreateVolumeResponse>> PrepareAsyncCreateVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::CreateVolumeResponse>>(PrepareAsyncCreateVolumeRaw(context, request, cq));
    }
    ::grpc::Status OpenVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest& request, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::OpenVolumeResponse>> AsyncOpenVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::OpenVolumeResponse>>(AsyncOpenVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::OpenVolumeResponse>> PrepareAsyncOpenVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::OpenVolumeResponse>>(PrepareAsyncOpenVolumeRaw(context, request, cq));
    }
    ::grpc::Status DeleteVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest& request, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>> AsyncDeleteVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>>(AsyncDeleteVolumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>> PrepareAsyncDeleteVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>>(PrepareAsyncDeleteVolumeRaw(context, request, cq));
    }
    ::grpc::Status ListVolumes(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest& request, ::FLINT_RPC_MESSAGE::ListVolumeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ListVolumeResponse>> AsyncListVolumes(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ListVolumeResponse>>(AsyncListVolumesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ListVolumeResponse>> PrepareAsyncListVolumes(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ListVolumeResponse>>(PrepareAsyncListVolumesRaw(context, request, cq));
    }
    ::grpc::Status VolumeExtentFault(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest& request, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>> AsyncVolumeExtentFault(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>>(AsyncVolumeExtentFaultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>> PrepareAsyncVolumeExtentFault(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>>(PrepareAsyncVolumeExtentFaultRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetFlintMetadata(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* request, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFlintMetadata(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* request, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* request, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* request, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OpenVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* request, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* response, std::function<void(::grpc::Status)>) override;
      void OpenVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* request, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* request, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteVolume(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* request, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListVolumes(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* request, ::FLINT_RPC_MESSAGE::ListVolumeResponse* response, std::function<void(::grpc::Status)>) override;
      void ListVolumes(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* request, ::FLINT_RPC_MESSAGE::ListVolumeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VolumeExtentFault(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* request, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* response, std::function<void(::grpc::Status)>) override;
      void VolumeExtentFault(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* request, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>* AsyncGetFlintMetadataRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>* PrepareAsyncGetFlintMetadataRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::CreateVolumeResponse>* AsyncCreateVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::CreateVolumeResponse>* PrepareAsyncCreateVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::OpenVolumeResponse>* AsyncOpenVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::OpenVolumeResponse>* PrepareAsyncOpenVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>* AsyncDeleteVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>* PrepareAsyncDeleteVolumeRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ListVolumeResponse>* AsyncListVolumesRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ListVolumeResponse>* PrepareAsyncListVolumesRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>* AsyncVolumeExtentFaultRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>* PrepareAsyncVolumeExtentFaultRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetFlintMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateVolume_;
    const ::grpc::internal::RpcMethod rpcmethod_OpenVolume_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteVolume_;
    const ::grpc::internal::RpcMethod rpcmethod_ListVolumes_;
    const ::grpc::internal::RpcMethod rpcmethod_VolumeExtentFault_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetFlintMetadata(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* request, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* response);
    virtual ::grpc::Status CreateVolume(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* request, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* response);
    virtual ::grpc::Status OpenVolume(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* request, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* response);
    virtual ::grpc::Status DeleteVolume(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* request, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* response);
    virtual ::grpc::Status ListVolumes(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* request, ::FLINT_RPC_MESSAGE::ListVolumeResponse* response);
    virtual ::grpc::Status VolumeExtentFault(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* request, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFlintMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFlintMetadata() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetFlintMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlintMetadata(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* /*request*/, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFlintMetadata(::grpc::ServerContext* context, ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* request, ::grpc::ServerAsyncResponseWriter< ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateVolume() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVolume(::grpc::ServerContext* context, ::FLINT_RPC_MESSAGE::CreateVolumeRequest* request, ::grpc::ServerAsyncResponseWriter< ::FLINT_RPC_MESSAGE::CreateVolumeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenVolume() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_OpenVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenVolume(::grpc::ServerContext* context, ::FLINT_RPC_MESSAGE::OpenVolumeRequest* request, ::grpc::ServerAsyncResponseWriter< ::FLINT_RPC_MESSAGE::OpenVolumeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteVolume() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVolume(::grpc::ServerContext* context, ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* request, ::grpc::ServerAsyncResponseWriter< ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListVolumes() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVolumes(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::ListVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListVolumes(::grpc::ServerContext* context, ::FLINT_RPC_MESSAGE::ListVolumeRequest* request, ::grpc::ServerAsyncResponseWriter< ::FLINT_RPC_MESSAGE::ListVolumeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeExtentFault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VolumeExtentFault() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_VolumeExtentFault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeExtentFault(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* /*request*/, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeExtentFault(::grpc::ServerContext* context, ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* request, ::grpc::ServerAsyncResponseWriter< ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetFlintMetadata<WithAsyncMethod_CreateVolume<WithAsyncMethod_OpenVolume<WithAsyncMethod_DeleteVolume<WithAsyncMethod_ListVolumes<WithAsyncMethod_VolumeExtentFault<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetFlintMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFlintMetadata() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* request, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* response) { return this->GetFlintMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_GetFlintMetadata(
        ::grpc::MessageAllocator< ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFlintMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlintMetadata(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* /*request*/, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFlintMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* /*request*/, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateVolume() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::CreateVolumeRequest, ::FLINT_RPC_MESSAGE::CreateVolumeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* request, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* response) { return this->CreateVolume(context, request, response); }));}
    void SetMessageAllocatorFor_CreateVolume(
        ::grpc::MessageAllocator< ::FLINT_RPC_MESSAGE::CreateVolumeRequest, ::FLINT_RPC_MESSAGE::CreateVolumeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::CreateVolumeRequest, ::FLINT_RPC_MESSAGE::CreateVolumeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OpenVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OpenVolume() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::OpenVolumeRequest, ::FLINT_RPC_MESSAGE::OpenVolumeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* request, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* response) { return this->OpenVolume(context, request, response); }));}
    void SetMessageAllocatorFor_OpenVolume(
        ::grpc::MessageAllocator< ::FLINT_RPC_MESSAGE::OpenVolumeRequest, ::FLINT_RPC_MESSAGE::OpenVolumeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::OpenVolumeRequest, ::FLINT_RPC_MESSAGE::OpenVolumeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OpenVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OpenVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteVolume() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::DeleteVolumeRequest, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* request, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* response) { return this->DeleteVolume(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteVolume(
        ::grpc::MessageAllocator< ::FLINT_RPC_MESSAGE::DeleteVolumeRequest, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::DeleteVolumeRequest, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListVolumes() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::ListVolumeRequest, ::FLINT_RPC_MESSAGE::ListVolumeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* request, ::FLINT_RPC_MESSAGE::ListVolumeResponse* response) { return this->ListVolumes(context, request, response); }));}
    void SetMessageAllocatorFor_ListVolumes(
        ::grpc::MessageAllocator< ::FLINT_RPC_MESSAGE::ListVolumeRequest, ::FLINT_RPC_MESSAGE::ListVolumeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::ListVolumeRequest, ::FLINT_RPC_MESSAGE::ListVolumeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVolumes(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::ListVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListVolumes(
      ::grpc::CallbackServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::ListVolumeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VolumeExtentFault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VolumeExtentFault() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* request, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* response) { return this->VolumeExtentFault(context, request, response); }));}
    void SetMessageAllocatorFor_VolumeExtentFault(
        ::grpc::MessageAllocator< ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VolumeExtentFault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeExtentFault(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* /*request*/, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VolumeExtentFault(
      ::grpc::CallbackServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* /*request*/, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetFlintMetadata<WithCallbackMethod_CreateVolume<WithCallbackMethod_OpenVolume<WithCallbackMethod_DeleteVolume<WithCallbackMethod_ListVolumes<WithCallbackMethod_VolumeExtentFault<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetFlintMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFlintMetadata() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetFlintMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlintMetadata(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* /*request*/, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateVolume() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OpenVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenVolume() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_OpenVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteVolume() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListVolumes() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVolumes(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::ListVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeExtentFault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VolumeExtentFault() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_VolumeExtentFault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeExtentFault(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* /*request*/, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFlintMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFlintMetadata() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetFlintMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlintMetadata(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* /*request*/, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFlintMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateVolume() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVolume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenVolume() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_OpenVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenVolume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteVolume() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteVolume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListVolumes() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ListVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVolumes(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::ListVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListVolumes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VolumeExtentFault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VolumeExtentFault() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_VolumeExtentFault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeExtentFault(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* /*request*/, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeExtentFault(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFlintMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFlintMetadata() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFlintMetadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFlintMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFlintMetadata(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* /*request*/, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFlintMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateVolume() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateVolume(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OpenVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OpenVolume() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OpenVolume(context, request, response); }));
    }
    ~WithRawCallbackMethod_OpenVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OpenVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteVolume() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteVolume(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteVolume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListVolumes() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListVolumes(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVolumes(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::ListVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListVolumes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VolumeExtentFault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VolumeExtentFault() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VolumeExtentFault(context, request, response); }));
    }
    ~WithRawCallbackMethod_VolumeExtentFault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeExtentFault(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* /*request*/, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VolumeExtentFault(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFlintMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFlintMetadata() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>* streamer) {
                       return this->StreamedGetFlintMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFlintMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFlintMetadata(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest* /*request*/, ::FLINT_RPC_MESSAGE::GetFlintMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFlintMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FLINT_RPC_MESSAGE::GetFlintMetadataRequest,::FLINT_RPC_MESSAGE::GetFlintMetadataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateVolume() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FLINT_RPC_MESSAGE::CreateVolumeRequest, ::FLINT_RPC_MESSAGE::CreateVolumeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FLINT_RPC_MESSAGE::CreateVolumeRequest, ::FLINT_RPC_MESSAGE::CreateVolumeResponse>* streamer) {
                       return this->StreamedCreateVolume(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::CreateVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::CreateVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateVolume(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FLINT_RPC_MESSAGE::CreateVolumeRequest,::FLINT_RPC_MESSAGE::CreateVolumeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OpenVolume() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FLINT_RPC_MESSAGE::OpenVolumeRequest, ::FLINT_RPC_MESSAGE::OpenVolumeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FLINT_RPC_MESSAGE::OpenVolumeRequest, ::FLINT_RPC_MESSAGE::OpenVolumeResponse>* streamer) {
                       return this->StreamedOpenVolume(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OpenVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::OpenVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::OpenVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenVolume(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FLINT_RPC_MESSAGE::OpenVolumeRequest,::FLINT_RPC_MESSAGE::OpenVolumeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteVolume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteVolume() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FLINT_RPC_MESSAGE::DeleteVolumeRequest, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FLINT_RPC_MESSAGE::DeleteVolumeRequest, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse>* streamer) {
                       return this->StreamedDeleteVolume(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteVolume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteVolume(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::DeleteVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::DeleteVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteVolume(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FLINT_RPC_MESSAGE::DeleteVolumeRequest,::FLINT_RPC_MESSAGE::DeleteVolumeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListVolumes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListVolumes() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FLINT_RPC_MESSAGE::ListVolumeRequest, ::FLINT_RPC_MESSAGE::ListVolumeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FLINT_RPC_MESSAGE::ListVolumeRequest, ::FLINT_RPC_MESSAGE::ListVolumeResponse>* streamer) {
                       return this->StreamedListVolumes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListVolumes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListVolumes(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::ListVolumeRequest* /*request*/, ::FLINT_RPC_MESSAGE::ListVolumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListVolumes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FLINT_RPC_MESSAGE::ListVolumeRequest,::FLINT_RPC_MESSAGE::ListVolumeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeExtentFault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VolumeExtentFault() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>* streamer) {
                       return this->StreamedVolumeExtentFault(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VolumeExtentFault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeExtentFault(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest* /*request*/, ::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeExtentFault(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FLINT_RPC_MESSAGE::VolumeExtentFaultRequest,::FLINT_RPC_MESSAGE::VolumeExtentFaultResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetFlintMetadata<WithStreamedUnaryMethod_CreateVolume<WithStreamedUnaryMethod_OpenVolume<WithStreamedUnaryMethod_DeleteVolume<WithStreamedUnaryMethod_ListVolumes<WithStreamedUnaryMethod_VolumeExtentFault<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetFlintMetadata<WithStreamedUnaryMethod_CreateVolume<WithStreamedUnaryMethod_OpenVolume<WithStreamedUnaryMethod_DeleteVolume<WithStreamedUnaryMethod_ListVolumes<WithStreamedUnaryMethod_VolumeExtentFault<Service > > > > > > StreamedService;
};

class SchedulerService final {
 public:
  static constexpr char const* service_full_name() {
    return "FLINT_RPC_SERVICE.SchedulerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RegisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::FLINT_RPC_MESSAGE::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>> AsyncRegisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>>(AsyncRegisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>> PrepareAsyncRegisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>>(PrepareAsyncRegisterClientRaw(context, request, cq));
    }
    virtual ::grpc::Status UnregisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::FLINT_RPC_MESSAGE::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>> AsyncUnregisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>>(AsyncUnregisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>> PrepareAsyncUnregisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>>(PrepareAsyncUnregisterClientRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateClientSlo(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::FLINT_RPC_MESSAGE::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>> AsyncUpdateClientSlo(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>>(AsyncUpdateClientSloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>> PrepareAsyncUpdateClientSlo(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>>(PrepareAsyncUpdateClientSloRaw(context, request, cq));
    }
    virtual ::grpc::Status RegisterEventCallbacks(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest& request, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>> AsyncRegisterEventCallbacks(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>>(AsyncRegisterEventCallbacksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>> PrepareAsyncRegisterEventCallbacks(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>>(PrepareAsyncRegisterEventCallbacksRaw(context, request, cq));
    }
    virtual ::grpc::Status PullView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest& request, ::FLINT_RPC_MESSAGE::PullViewResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::PullViewResponse>> AsyncPullView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::PullViewResponse>>(AsyncPullViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::PullViewResponse>> PrepareAsyncPullView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::PullViewResponse>>(PrepareAsyncPullViewRaw(context, request, cq));
    }
    virtual ::grpc::Status ReportCmpl(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest& request, ::FLINT_RPC_MESSAGE::ReportCmplResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::ReportCmplResponse>> AsyncReportCmpl(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::ReportCmplResponse>>(AsyncReportCmplRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::ReportCmplResponse>> PrepareAsyncReportCmpl(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::ReportCmplResponse>>(PrepareAsyncReportCmplRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestIOSlice(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest& request, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>> AsyncRequestIOSlice(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>>(AsyncRequestIOSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>> PrepareAsyncRequestIOSlice(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>>(PrepareAsyncRequestIOSliceRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RegisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UnregisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnregisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateClientSlo(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateClientSlo(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RegisterEventCallbacks(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* request, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterEventCallbacks(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* request, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PullView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest* request, ::FLINT_RPC_MESSAGE::PullViewResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PullView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest* request, ::FLINT_RPC_MESSAGE::PullViewResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReportCmpl(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* request, ::FLINT_RPC_MESSAGE::ReportCmplResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportCmpl(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* request, ::FLINT_RPC_MESSAGE::ReportCmplResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestIOSlice(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* request, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestIOSlice(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* request, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>* AsyncRegisterClientRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>* PrepareAsyncRegisterClientRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>* AsyncUnregisterClientRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>* PrepareAsyncUnregisterClientRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>* AsyncUpdateClientSloRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterResponse>* PrepareAsyncUpdateClientSloRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>* AsyncRegisterEventCallbacksRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>* PrepareAsyncRegisterEventCallbacksRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::PullViewResponse>* AsyncPullViewRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::PullViewResponse>* PrepareAsyncPullViewRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::ReportCmplResponse>* AsyncReportCmplRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::ReportCmplResponse>* PrepareAsyncReportCmplRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>* AsyncRequestIOSliceRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>* PrepareAsyncRequestIOSliceRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RegisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::FLINT_RPC_MESSAGE::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>> AsyncRegisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>>(AsyncRegisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>> PrepareAsyncRegisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>>(PrepareAsyncRegisterClientRaw(context, request, cq));
    }
    ::grpc::Status UnregisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::FLINT_RPC_MESSAGE::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>> AsyncUnregisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>>(AsyncUnregisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>> PrepareAsyncUnregisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>>(PrepareAsyncUnregisterClientRaw(context, request, cq));
    }
    ::grpc::Status UpdateClientSlo(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::FLINT_RPC_MESSAGE::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>> AsyncUpdateClientSlo(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>>(AsyncUpdateClientSloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>> PrepareAsyncUpdateClientSlo(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>>(PrepareAsyncUpdateClientSloRaw(context, request, cq));
    }
    ::grpc::Status RegisterEventCallbacks(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest& request, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>> AsyncRegisterEventCallbacks(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>>(AsyncRegisterEventCallbacksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>> PrepareAsyncRegisterEventCallbacks(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>>(PrepareAsyncRegisterEventCallbacksRaw(context, request, cq));
    }
    ::grpc::Status PullView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest& request, ::FLINT_RPC_MESSAGE::PullViewResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PullViewResponse>> AsyncPullView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PullViewResponse>>(AsyncPullViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PullViewResponse>> PrepareAsyncPullView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PullViewResponse>>(PrepareAsyncPullViewRaw(context, request, cq));
    }
    ::grpc::Status ReportCmpl(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest& request, ::FLINT_RPC_MESSAGE::ReportCmplResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ReportCmplResponse>> AsyncReportCmpl(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ReportCmplResponse>>(AsyncReportCmplRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ReportCmplResponse>> PrepareAsyncReportCmpl(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ReportCmplResponse>>(PrepareAsyncReportCmplRaw(context, request, cq));
    }
    ::grpc::Status RequestIOSlice(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest& request, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>> AsyncRequestIOSlice(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>>(AsyncRequestIOSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>> PrepareAsyncRequestIOSlice(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>>(PrepareAsyncRequestIOSliceRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RegisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnregisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void UnregisterClient(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateClientSlo(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateClientSlo(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterEventCallbacks(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* request, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterEventCallbacks(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* request, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PullView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest* request, ::FLINT_RPC_MESSAGE::PullViewResponse* response, std::function<void(::grpc::Status)>) override;
      void PullView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest* request, ::FLINT_RPC_MESSAGE::PullViewResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReportCmpl(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* request, ::FLINT_RPC_MESSAGE::ReportCmplResponse* response, std::function<void(::grpc::Status)>) override;
      void ReportCmpl(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* request, ::FLINT_RPC_MESSAGE::ReportCmplResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestIOSlice(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* request, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestIOSlice(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* request, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>* AsyncRegisterClientRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>* PrepareAsyncRegisterClientRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>* AsyncUnregisterClientRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>* PrepareAsyncUnregisterClientRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>* AsyncUpdateClientSloRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterResponse>* PrepareAsyncUpdateClientSloRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>* AsyncRegisterEventCallbacksRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>* PrepareAsyncRegisterEventCallbacksRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PullViewResponse>* AsyncPullViewRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PullViewResponse>* PrepareAsyncPullViewRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ReportCmplResponse>* AsyncReportCmplRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::ReportCmplResponse>* PrepareAsyncReportCmplRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>* AsyncRequestIOSliceRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>* PrepareAsyncRequestIOSliceRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterClient_;
    const ::grpc::internal::RpcMethod rpcmethod_UnregisterClient_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateClientSlo_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterEventCallbacks_;
    const ::grpc::internal::RpcMethod rpcmethod_PullView_;
    const ::grpc::internal::RpcMethod rpcmethod_ReportCmpl_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestIOSlice_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterClient(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response);
    virtual ::grpc::Status UnregisterClient(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response);
    virtual ::grpc::Status UpdateClientSlo(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response);
    virtual ::grpc::Status RegisterEventCallbacks(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* request, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* response);
    virtual ::grpc::Status PullView(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest* request, ::FLINT_RPC_MESSAGE::PullViewResponse* response);
    virtual ::grpc::Status ReportCmpl(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* request, ::FLINT_RPC_MESSAGE::ReportCmplResponse* response);
    virtual ::grpc::Status RequestIOSlice(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* request, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterClient() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterClient(::grpc::ServerContext* context, ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::FLINT_RPC_MESSAGE::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnregisterClient() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UnregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterClient(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregisterClient(::grpc::ServerContext* context, ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::FLINT_RPC_MESSAGE::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateClientSlo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateClientSlo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateClientSlo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateClientSlo(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateClientSlo(::grpc::ServerContext* context, ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::FLINT_RPC_MESSAGE::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterEventCallbacks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterEventCallbacks() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RegisterEventCallbacks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterEventCallbacks(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterEventCallbacks(::grpc::ServerContext* context, ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PullView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PullView() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PullView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullView(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::PullViewRequest* /*request*/, ::FLINT_RPC_MESSAGE::PullViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPullView(::grpc::ServerContext* context, ::FLINT_RPC_MESSAGE::PullViewRequest* request, ::grpc::ServerAsyncResponseWriter< ::FLINT_RPC_MESSAGE::PullViewResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportCmpl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReportCmpl() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReportCmpl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportCmpl(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* /*request*/, ::FLINT_RPC_MESSAGE::ReportCmplResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportCmpl(::grpc::ServerContext* context, ::FLINT_RPC_MESSAGE::ReportCmplRequest* request, ::grpc::ServerAsyncResponseWriter< ::FLINT_RPC_MESSAGE::ReportCmplResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestIOSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestIOSlice() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RequestIOSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestIOSlice(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* /*request*/, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestIOSlice(::grpc::ServerContext* context, ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* request, ::grpc::ServerAsyncResponseWriter< ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterClient<WithAsyncMethod_UnregisterClient<WithAsyncMethod_UpdateClientSlo<WithAsyncMethod_RegisterEventCallbacks<WithAsyncMethod_PullView<WithAsyncMethod_ReportCmpl<WithAsyncMethod_RequestIOSlice<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterClient() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response) { return this->RegisterClient(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterClient(
        ::grpc::MessageAllocator< ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterClient(
      ::grpc::CallbackServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnregisterClient() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response) { return this->UnregisterClient(context, request, response); }));}
    void SetMessageAllocatorFor_UnregisterClient(
        ::grpc::MessageAllocator< ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterClient(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnregisterClient(
      ::grpc::CallbackServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateClientSlo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateClientSlo() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FLINT_RPC_MESSAGE::RegisterRequest* request, ::FLINT_RPC_MESSAGE::RegisterResponse* response) { return this->UpdateClientSlo(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateClientSlo(
        ::grpc::MessageAllocator< ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateClientSlo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateClientSlo(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateClientSlo(
      ::grpc::CallbackServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterEventCallbacks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterEventCallbacks() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* request, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* response) { return this->RegisterEventCallbacks(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterEventCallbacks(
        ::grpc::MessageAllocator< ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterEventCallbacks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterEventCallbacks(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterEventCallbacks(
      ::grpc::CallbackServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PullView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PullView() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::PullViewRequest, ::FLINT_RPC_MESSAGE::PullViewResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FLINT_RPC_MESSAGE::PullViewRequest* request, ::FLINT_RPC_MESSAGE::PullViewResponse* response) { return this->PullView(context, request, response); }));}
    void SetMessageAllocatorFor_PullView(
        ::grpc::MessageAllocator< ::FLINT_RPC_MESSAGE::PullViewRequest, ::FLINT_RPC_MESSAGE::PullViewResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::PullViewRequest, ::FLINT_RPC_MESSAGE::PullViewResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PullView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullView(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::PullViewRequest* /*request*/, ::FLINT_RPC_MESSAGE::PullViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PullView(
      ::grpc::CallbackServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::PullViewRequest* /*request*/, ::FLINT_RPC_MESSAGE::PullViewResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReportCmpl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReportCmpl() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::ReportCmplRequest, ::FLINT_RPC_MESSAGE::ReportCmplResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* request, ::FLINT_RPC_MESSAGE::ReportCmplResponse* response) { return this->ReportCmpl(context, request, response); }));}
    void SetMessageAllocatorFor_ReportCmpl(
        ::grpc::MessageAllocator< ::FLINT_RPC_MESSAGE::ReportCmplRequest, ::FLINT_RPC_MESSAGE::ReportCmplResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::ReportCmplRequest, ::FLINT_RPC_MESSAGE::ReportCmplResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReportCmpl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportCmpl(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* /*request*/, ::FLINT_RPC_MESSAGE::ReportCmplResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportCmpl(
      ::grpc::CallbackServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* /*request*/, ::FLINT_RPC_MESSAGE::ReportCmplResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestIOSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestIOSlice() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::RequestIOSliceRequest, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* request, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* response) { return this->RequestIOSlice(context, request, response); }));}
    void SetMessageAllocatorFor_RequestIOSlice(
        ::grpc::MessageAllocator< ::FLINT_RPC_MESSAGE::RequestIOSliceRequest, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::RequestIOSliceRequest, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestIOSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestIOSlice(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* /*request*/, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestIOSlice(
      ::grpc::CallbackServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* /*request*/, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RegisterClient<WithCallbackMethod_UnregisterClient<WithCallbackMethod_UpdateClientSlo<WithCallbackMethod_RegisterEventCallbacks<WithCallbackMethod_PullView<WithCallbackMethod_ReportCmpl<WithCallbackMethod_RequestIOSlice<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterClient() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnregisterClient() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UnregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterClient(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateClientSlo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateClientSlo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateClientSlo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateClientSlo(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterEventCallbacks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterEventCallbacks() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RegisterEventCallbacks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterEventCallbacks(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PullView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PullView() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PullView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullView(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::PullViewRequest* /*request*/, ::FLINT_RPC_MESSAGE::PullViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReportCmpl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReportCmpl() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReportCmpl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportCmpl(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* /*request*/, ::FLINT_RPC_MESSAGE::ReportCmplResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestIOSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestIOSlice() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RequestIOSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestIOSlice(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* /*request*/, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterClient() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterClient(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnregisterClient() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UnregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterClient(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregisterClient(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateClientSlo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateClientSlo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateClientSlo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateClientSlo(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateClientSlo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterEventCallbacks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterEventCallbacks() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RegisterEventCallbacks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterEventCallbacks(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterEventCallbacks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PullView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PullView() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_PullView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullView(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::PullViewRequest* /*request*/, ::FLINT_RPC_MESSAGE::PullViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPullView(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportCmpl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReportCmpl() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ReportCmpl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportCmpl(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* /*request*/, ::FLINT_RPC_MESSAGE::ReportCmplResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportCmpl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestIOSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestIOSlice() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_RequestIOSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestIOSlice(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* /*request*/, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestIOSlice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterClient() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterClient(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnregisterClient() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnregisterClient(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterClient(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnregisterClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateClientSlo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateClientSlo() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateClientSlo(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateClientSlo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateClientSlo(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateClientSlo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterEventCallbacks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterEventCallbacks() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterEventCallbacks(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterEventCallbacks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterEventCallbacks(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterEventCallbacks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PullView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PullView() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PullView(context, request, response); }));
    }
    ~WithRawCallbackMethod_PullView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullView(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::PullViewRequest* /*request*/, ::FLINT_RPC_MESSAGE::PullViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PullView(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReportCmpl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReportCmpl() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReportCmpl(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReportCmpl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportCmpl(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* /*request*/, ::FLINT_RPC_MESSAGE::ReportCmplResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReportCmpl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestIOSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestIOSlice() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestIOSlice(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestIOSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestIOSlice(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* /*request*/, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestIOSlice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterClient() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse>* streamer) {
                       return this->StreamedRegisterClient(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterClient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FLINT_RPC_MESSAGE::RegisterRequest,::FLINT_RPC_MESSAGE::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnregisterClient() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse>* streamer) {
                       return this->StreamedUnregisterClient(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnregisterClient(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnregisterClient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FLINT_RPC_MESSAGE::RegisterRequest,::FLINT_RPC_MESSAGE::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateClientSlo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateClientSlo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FLINT_RPC_MESSAGE::RegisterRequest, ::FLINT_RPC_MESSAGE::RegisterResponse>* streamer) {
                       return this->StreamedUpdateClientSlo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateClientSlo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateClientSlo(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateClientSlo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FLINT_RPC_MESSAGE::RegisterRequest,::FLINT_RPC_MESSAGE::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterEventCallbacks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterEventCallbacks() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>* streamer) {
                       return this->StreamedRegisterEventCallbacks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterEventCallbacks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterEventCallbacks(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest* /*request*/, ::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterEventCallbacks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FLINT_RPC_MESSAGE::RegisterEventCallbackRequest,::FLINT_RPC_MESSAGE::RegisterEventCallbackResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PullView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PullView() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FLINT_RPC_MESSAGE::PullViewRequest, ::FLINT_RPC_MESSAGE::PullViewResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FLINT_RPC_MESSAGE::PullViewRequest, ::FLINT_RPC_MESSAGE::PullViewResponse>* streamer) {
                       return this->StreamedPullView(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PullView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PullView(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::PullViewRequest* /*request*/, ::FLINT_RPC_MESSAGE::PullViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPullView(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FLINT_RPC_MESSAGE::PullViewRequest,::FLINT_RPC_MESSAGE::PullViewResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportCmpl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReportCmpl() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FLINT_RPC_MESSAGE::ReportCmplRequest, ::FLINT_RPC_MESSAGE::ReportCmplResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FLINT_RPC_MESSAGE::ReportCmplRequest, ::FLINT_RPC_MESSAGE::ReportCmplResponse>* streamer) {
                       return this->StreamedReportCmpl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReportCmpl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportCmpl(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::ReportCmplRequest* /*request*/, ::FLINT_RPC_MESSAGE::ReportCmplResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportCmpl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FLINT_RPC_MESSAGE::ReportCmplRequest,::FLINT_RPC_MESSAGE::ReportCmplResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestIOSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestIOSlice() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FLINT_RPC_MESSAGE::RequestIOSliceRequest, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FLINT_RPC_MESSAGE::RequestIOSliceRequest, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse>* streamer) {
                       return this->StreamedRequestIOSlice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestIOSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestIOSlice(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::RequestIOSliceRequest* /*request*/, ::FLINT_RPC_MESSAGE::RequestIOSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestIOSlice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FLINT_RPC_MESSAGE::RequestIOSliceRequest,::FLINT_RPC_MESSAGE::RequestIOSliceResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterClient<WithStreamedUnaryMethod_UnregisterClient<WithStreamedUnaryMethod_UpdateClientSlo<WithStreamedUnaryMethod_RegisterEventCallbacks<WithStreamedUnaryMethod_PullView<WithStreamedUnaryMethod_ReportCmpl<WithStreamedUnaryMethod_RequestIOSlice<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterClient<WithStreamedUnaryMethod_UnregisterClient<WithStreamedUnaryMethod_UpdateClientSlo<WithStreamedUnaryMethod_RegisterEventCallbacks<WithStreamedUnaryMethod_PullView<WithStreamedUnaryMethod_ReportCmpl<WithStreamedUnaryMethod_RequestIOSlice<Service > > > > > > > StreamedService;
};

class LocalSchedulerService final {
 public:
  static constexpr char const* service_full_name() {
    return "FLINT_RPC_SERVICE.LocalSchedulerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status PushView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest& request, ::FLINT_RPC_MESSAGE::PushViewResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::PushViewResponse>> AsyncPushView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::PushViewResponse>>(AsyncPushViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::PushViewResponse>> PrepareAsyncPushView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::PushViewResponse>>(PrepareAsyncPushViewRaw(context, request, cq));
    }
    virtual ::grpc::Status BottleneckReport(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest& request, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::BottleneckReportResponse>> AsyncBottleneckReport(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::BottleneckReportResponse>>(AsyncBottleneckReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::BottleneckReportResponse>> PrepareAsyncBottleneckReport(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::BottleneckReportResponse>>(PrepareAsyncBottleneckReportRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void PushView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest* request, ::FLINT_RPC_MESSAGE::PushViewResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest* request, ::FLINT_RPC_MESSAGE::PushViewResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BottleneckReport(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* request, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BottleneckReport(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* request, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::PushViewResponse>* AsyncPushViewRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::PushViewResponse>* PrepareAsyncPushViewRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::BottleneckReportResponse>* AsyncBottleneckReportRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FLINT_RPC_MESSAGE::BottleneckReportResponse>* PrepareAsyncBottleneckReportRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PushView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest& request, ::FLINT_RPC_MESSAGE::PushViewResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PushViewResponse>> AsyncPushView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PushViewResponse>>(AsyncPushViewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PushViewResponse>> PrepareAsyncPushView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PushViewResponse>>(PrepareAsyncPushViewRaw(context, request, cq));
    }
    ::grpc::Status BottleneckReport(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest& request, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::BottleneckReportResponse>> AsyncBottleneckReport(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::BottleneckReportResponse>>(AsyncBottleneckReportRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::BottleneckReportResponse>> PrepareAsyncBottleneckReport(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::BottleneckReportResponse>>(PrepareAsyncBottleneckReportRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PushView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest* request, ::FLINT_RPC_MESSAGE::PushViewResponse* response, std::function<void(::grpc::Status)>) override;
      void PushView(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest* request, ::FLINT_RPC_MESSAGE::PushViewResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BottleneckReport(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* request, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* response, std::function<void(::grpc::Status)>) override;
      void BottleneckReport(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* request, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PushViewResponse>* AsyncPushViewRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::PushViewResponse>* PrepareAsyncPushViewRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::BottleneckReportResponse>* AsyncBottleneckReportRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FLINT_RPC_MESSAGE::BottleneckReportResponse>* PrepareAsyncBottleneckReportRaw(::grpc::ClientContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PushView_;
    const ::grpc::internal::RpcMethod rpcmethod_BottleneckReport_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PushView(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest* request, ::FLINT_RPC_MESSAGE::PushViewResponse* response);
    virtual ::grpc::Status BottleneckReport(::grpc::ServerContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* request, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PushView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushView() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PushView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushView(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::PushViewRequest* /*request*/, ::FLINT_RPC_MESSAGE::PushViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushView(::grpc::ServerContext* context, ::FLINT_RPC_MESSAGE::PushViewRequest* request, ::grpc::ServerAsyncResponseWriter< ::FLINT_RPC_MESSAGE::PushViewResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BottleneckReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BottleneckReport() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_BottleneckReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BottleneckReport(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* /*request*/, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBottleneckReport(::grpc::ServerContext* context, ::FLINT_RPC_MESSAGE::BottleneckReportRequest* request, ::grpc::ServerAsyncResponseWriter< ::FLINT_RPC_MESSAGE::BottleneckReportResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PushView<WithAsyncMethod_BottleneckReport<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PushView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushView() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::PushViewRequest, ::FLINT_RPC_MESSAGE::PushViewResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FLINT_RPC_MESSAGE::PushViewRequest* request, ::FLINT_RPC_MESSAGE::PushViewResponse* response) { return this->PushView(context, request, response); }));}
    void SetMessageAllocatorFor_PushView(
        ::grpc::MessageAllocator< ::FLINT_RPC_MESSAGE::PushViewRequest, ::FLINT_RPC_MESSAGE::PushViewResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::PushViewRequest, ::FLINT_RPC_MESSAGE::PushViewResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PushView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushView(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::PushViewRequest* /*request*/, ::FLINT_RPC_MESSAGE::PushViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushView(
      ::grpc::CallbackServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::PushViewRequest* /*request*/, ::FLINT_RPC_MESSAGE::PushViewResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BottleneckReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BottleneckReport() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::BottleneckReportRequest, ::FLINT_RPC_MESSAGE::BottleneckReportResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* request, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* response) { return this->BottleneckReport(context, request, response); }));}
    void SetMessageAllocatorFor_BottleneckReport(
        ::grpc::MessageAllocator< ::FLINT_RPC_MESSAGE::BottleneckReportRequest, ::FLINT_RPC_MESSAGE::BottleneckReportResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::FLINT_RPC_MESSAGE::BottleneckReportRequest, ::FLINT_RPC_MESSAGE::BottleneckReportResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BottleneckReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BottleneckReport(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* /*request*/, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BottleneckReport(
      ::grpc::CallbackServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* /*request*/, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PushView<WithCallbackMethod_BottleneckReport<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PushView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushView() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PushView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushView(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::PushViewRequest* /*request*/, ::FLINT_RPC_MESSAGE::PushViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BottleneckReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BottleneckReport() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_BottleneckReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BottleneckReport(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* /*request*/, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushView() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PushView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushView(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::PushViewRequest* /*request*/, ::FLINT_RPC_MESSAGE::PushViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushView(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BottleneckReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BottleneckReport() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_BottleneckReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BottleneckReport(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* /*request*/, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBottleneckReport(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushView() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushView(context, request, response); }));
    }
    ~WithRawCallbackMethod_PushView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushView(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::PushViewRequest* /*request*/, ::FLINT_RPC_MESSAGE::PushViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushView(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BottleneckReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BottleneckReport() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BottleneckReport(context, request, response); }));
    }
    ~WithRawCallbackMethod_BottleneckReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BottleneckReport(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* /*request*/, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BottleneckReport(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushView : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushView() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FLINT_RPC_MESSAGE::PushViewRequest, ::FLINT_RPC_MESSAGE::PushViewResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FLINT_RPC_MESSAGE::PushViewRequest, ::FLINT_RPC_MESSAGE::PushViewResponse>* streamer) {
                       return this->StreamedPushView(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushView() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushView(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::PushViewRequest* /*request*/, ::FLINT_RPC_MESSAGE::PushViewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushView(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FLINT_RPC_MESSAGE::PushViewRequest,::FLINT_RPC_MESSAGE::PushViewResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BottleneckReport : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BottleneckReport() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::FLINT_RPC_MESSAGE::BottleneckReportRequest, ::FLINT_RPC_MESSAGE::BottleneckReportResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::FLINT_RPC_MESSAGE::BottleneckReportRequest, ::FLINT_RPC_MESSAGE::BottleneckReportResponse>* streamer) {
                       return this->StreamedBottleneckReport(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BottleneckReport() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BottleneckReport(::grpc::ServerContext* /*context*/, const ::FLINT_RPC_MESSAGE::BottleneckReportRequest* /*request*/, ::FLINT_RPC_MESSAGE::BottleneckReportResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBottleneckReport(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FLINT_RPC_MESSAGE::BottleneckReportRequest,::FLINT_RPC_MESSAGE::BottleneckReportResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PushView<WithStreamedUnaryMethod_BottleneckReport<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PushView<WithStreamedUnaryMethod_BottleneckReport<Service > > StreamedService;
};

}  // namespace FLINT_RPC_SERVICE


#endif  // GRPC_service_2eproto__INCLUDED
